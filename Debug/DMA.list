
DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1d4  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000500  0800a388  0800a388  0000b388  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a888  0800a888  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a888  0800a888  0000b888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a890  0800a890  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a890  0800a890  0000b890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a894  0800a894  0000b894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a898  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000127c  200001d4  0800aa6c  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001450  0800aa6c  0000c450  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fdfe  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022e9  00000000  00000000  0001c002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  0001e2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000af6  00000000  00000000  0001f130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b4ea  00000000  00000000  0001fc26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010499  00000000  00000000  0004b110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d478  00000000  00000000  0005b5a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00168a21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005100  00000000  00000000  00168a64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  0016db64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d4 	.word	0x200001d4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a36c 	.word	0x0800a36c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	0800a36c 	.word	0x0800a36c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_frsub>:
 8000ca8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000cac:	e002      	b.n	8000cb4 <__addsf3>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_fsub>:
 8000cb0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000cb4 <__addsf3>:
 8000cb4:	0042      	lsls	r2, r0, #1
 8000cb6:	bf1f      	itttt	ne
 8000cb8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cbc:	ea92 0f03 	teqne	r2, r3
 8000cc0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cc4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cc8:	d06a      	beq.n	8000da0 <__addsf3+0xec>
 8000cca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cd2:	bfc1      	itttt	gt
 8000cd4:	18d2      	addgt	r2, r2, r3
 8000cd6:	4041      	eorgt	r1, r0
 8000cd8:	4048      	eorgt	r0, r1
 8000cda:	4041      	eorgt	r1, r0
 8000cdc:	bfb8      	it	lt
 8000cde:	425b      	neglt	r3, r3
 8000ce0:	2b19      	cmp	r3, #25
 8000ce2:	bf88      	it	hi
 8000ce4:	4770      	bxhi	lr
 8000ce6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000cea:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cee:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000cf2:	bf18      	it	ne
 8000cf4:	4240      	negne	r0, r0
 8000cf6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000cfa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000cfe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d02:	bf18      	it	ne
 8000d04:	4249      	negne	r1, r1
 8000d06:	ea92 0f03 	teq	r2, r3
 8000d0a:	d03f      	beq.n	8000d8c <__addsf3+0xd8>
 8000d0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d10:	fa41 fc03 	asr.w	ip, r1, r3
 8000d14:	eb10 000c 	adds.w	r0, r0, ip
 8000d18:	f1c3 0320 	rsb	r3, r3, #32
 8000d1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d20:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d24:	d502      	bpl.n	8000d2c <__addsf3+0x78>
 8000d26:	4249      	negs	r1, r1
 8000d28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d2c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d30:	d313      	bcc.n	8000d5a <__addsf3+0xa6>
 8000d32:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d36:	d306      	bcc.n	8000d46 <__addsf3+0x92>
 8000d38:	0840      	lsrs	r0, r0, #1
 8000d3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d3e:	f102 0201 	add.w	r2, r2, #1
 8000d42:	2afe      	cmp	r2, #254	@ 0xfe
 8000d44:	d251      	bcs.n	8000dea <__addsf3+0x136>
 8000d46:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d4e:	bf08      	it	eq
 8000d50:	f020 0001 	biceq.w	r0, r0, #1
 8000d54:	ea40 0003 	orr.w	r0, r0, r3
 8000d58:	4770      	bx	lr
 8000d5a:	0049      	lsls	r1, r1, #1
 8000d5c:	eb40 0000 	adc.w	r0, r0, r0
 8000d60:	3a01      	subs	r2, #1
 8000d62:	bf28      	it	cs
 8000d64:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d68:	d2ed      	bcs.n	8000d46 <__addsf3+0x92>
 8000d6a:	fab0 fc80 	clz	ip, r0
 8000d6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d72:	ebb2 020c 	subs.w	r2, r2, ip
 8000d76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d7a:	bfaa      	itet	ge
 8000d7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d80:	4252      	neglt	r2, r2
 8000d82:	4318      	orrge	r0, r3
 8000d84:	bfbc      	itt	lt
 8000d86:	40d0      	lsrlt	r0, r2
 8000d88:	4318      	orrlt	r0, r3
 8000d8a:	4770      	bx	lr
 8000d8c:	f092 0f00 	teq	r2, #0
 8000d90:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d94:	bf06      	itte	eq
 8000d96:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d9a:	3201      	addeq	r2, #1
 8000d9c:	3b01      	subne	r3, #1
 8000d9e:	e7b5      	b.n	8000d0c <__addsf3+0x58>
 8000da0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000da4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000da8:	bf18      	it	ne
 8000daa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dae:	d021      	beq.n	8000df4 <__addsf3+0x140>
 8000db0:	ea92 0f03 	teq	r2, r3
 8000db4:	d004      	beq.n	8000dc0 <__addsf3+0x10c>
 8000db6:	f092 0f00 	teq	r2, #0
 8000dba:	bf08      	it	eq
 8000dbc:	4608      	moveq	r0, r1
 8000dbe:	4770      	bx	lr
 8000dc0:	ea90 0f01 	teq	r0, r1
 8000dc4:	bf1c      	itt	ne
 8000dc6:	2000      	movne	r0, #0
 8000dc8:	4770      	bxne	lr
 8000dca:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dce:	d104      	bne.n	8000dda <__addsf3+0x126>
 8000dd0:	0040      	lsls	r0, r0, #1
 8000dd2:	bf28      	it	cs
 8000dd4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000dd8:	4770      	bx	lr
 8000dda:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dde:	bf3c      	itt	cc
 8000de0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000de4:	4770      	bxcc	lr
 8000de6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000dea:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000dee:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000df2:	4770      	bx	lr
 8000df4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000df8:	bf16      	itet	ne
 8000dfa:	4608      	movne	r0, r1
 8000dfc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e00:	4601      	movne	r1, r0
 8000e02:	0242      	lsls	r2, r0, #9
 8000e04:	bf06      	itte	eq
 8000e06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e0a:	ea90 0f01 	teqeq	r0, r1
 8000e0e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e12:	4770      	bx	lr

08000e14 <__aeabi_ui2f>:
 8000e14:	f04f 0300 	mov.w	r3, #0
 8000e18:	e004      	b.n	8000e24 <__aeabi_i2f+0x8>
 8000e1a:	bf00      	nop

08000e1c <__aeabi_i2f>:
 8000e1c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e20:	bf48      	it	mi
 8000e22:	4240      	negmi	r0, r0
 8000e24:	ea5f 0c00 	movs.w	ip, r0
 8000e28:	bf08      	it	eq
 8000e2a:	4770      	bxeq	lr
 8000e2c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e30:	4601      	mov	r1, r0
 8000e32:	f04f 0000 	mov.w	r0, #0
 8000e36:	e01c      	b.n	8000e72 <__aeabi_l2f+0x2a>

08000e38 <__aeabi_ul2f>:
 8000e38:	ea50 0201 	orrs.w	r2, r0, r1
 8000e3c:	bf08      	it	eq
 8000e3e:	4770      	bxeq	lr
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	e00a      	b.n	8000e5c <__aeabi_l2f+0x14>
 8000e46:	bf00      	nop

08000e48 <__aeabi_l2f>:
 8000e48:	ea50 0201 	orrs.w	r2, r0, r1
 8000e4c:	bf08      	it	eq
 8000e4e:	4770      	bxeq	lr
 8000e50:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e54:	d502      	bpl.n	8000e5c <__aeabi_l2f+0x14>
 8000e56:	4240      	negs	r0, r0
 8000e58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e5c:	ea5f 0c01 	movs.w	ip, r1
 8000e60:	bf02      	ittt	eq
 8000e62:	4684      	moveq	ip, r0
 8000e64:	4601      	moveq	r1, r0
 8000e66:	2000      	moveq	r0, #0
 8000e68:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e6c:	bf08      	it	eq
 8000e6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e72:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e76:	fabc f28c 	clz	r2, ip
 8000e7a:	3a08      	subs	r2, #8
 8000e7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e80:	db10      	blt.n	8000ea4 <__aeabi_l2f+0x5c>
 8000e82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e86:	4463      	add	r3, ip
 8000e88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e8c:	f1c2 0220 	rsb	r2, r2, #32
 8000e90:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e94:	fa20 f202 	lsr.w	r2, r0, r2
 8000e98:	eb43 0002 	adc.w	r0, r3, r2
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f102 0220 	add.w	r2, r2, #32
 8000ea8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eac:	f1c2 0220 	rsb	r2, r2, #32
 8000eb0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000eb4:	fa21 f202 	lsr.w	r2, r1, r2
 8000eb8:	eb43 0002 	adc.w	r0, r3, r2
 8000ebc:	bf08      	it	eq
 8000ebe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ec2:	4770      	bx	lr

08000ec4 <__aeabi_uldivmod>:
 8000ec4:	b953      	cbnz	r3, 8000edc <__aeabi_uldivmod+0x18>
 8000ec6:	b94a      	cbnz	r2, 8000edc <__aeabi_uldivmod+0x18>
 8000ec8:	2900      	cmp	r1, #0
 8000eca:	bf08      	it	eq
 8000ecc:	2800      	cmpeq	r0, #0
 8000ece:	bf1c      	itt	ne
 8000ed0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ed4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ed8:	f000 b9a0 	b.w	800121c <__aeabi_idiv0>
 8000edc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ee0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ee4:	f000 f83c 	bl	8000f60 <__udivmoddi4>
 8000ee8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000eec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ef0:	b004      	add	sp, #16
 8000ef2:	4770      	bx	lr

08000ef4 <__aeabi_d2lz>:
 8000ef4:	b538      	push	{r3, r4, r5, lr}
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2300      	movs	r3, #0
 8000efa:	4604      	mov	r4, r0
 8000efc:	460d      	mov	r5, r1
 8000efe:	f7ff fdfd 	bl	8000afc <__aeabi_dcmplt>
 8000f02:	b928      	cbnz	r0, 8000f10 <__aeabi_d2lz+0x1c>
 8000f04:	4620      	mov	r0, r4
 8000f06:	4629      	mov	r1, r5
 8000f08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f0c:	f000 b80a 	b.w	8000f24 <__aeabi_d2ulz>
 8000f10:	4620      	mov	r0, r4
 8000f12:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000f16:	f000 f805 	bl	8000f24 <__aeabi_d2ulz>
 8000f1a:	4240      	negs	r0, r0
 8000f1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f20:	bd38      	pop	{r3, r4, r5, pc}
 8000f22:	bf00      	nop

08000f24 <__aeabi_d2ulz>:
 8000f24:	b5d0      	push	{r4, r6, r7, lr}
 8000f26:	4b0c      	ldr	r3, [pc, #48]	@ (8000f58 <__aeabi_d2ulz+0x34>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	4606      	mov	r6, r0
 8000f2c:	460f      	mov	r7, r1
 8000f2e:	f7ff fb73 	bl	8000618 <__aeabi_dmul>
 8000f32:	f7ff fe49 	bl	8000bc8 <__aeabi_d2uiz>
 8000f36:	4604      	mov	r4, r0
 8000f38:	f7ff faf4 	bl	8000524 <__aeabi_ui2d>
 8000f3c:	4b07      	ldr	r3, [pc, #28]	@ (8000f5c <__aeabi_d2ulz+0x38>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f7ff fb6a 	bl	8000618 <__aeabi_dmul>
 8000f44:	4602      	mov	r2, r0
 8000f46:	460b      	mov	r3, r1
 8000f48:	4630      	mov	r0, r6
 8000f4a:	4639      	mov	r1, r7
 8000f4c:	f7ff f9ac 	bl	80002a8 <__aeabi_dsub>
 8000f50:	f7ff fe3a 	bl	8000bc8 <__aeabi_d2uiz>
 8000f54:	4621      	mov	r1, r4
 8000f56:	bdd0      	pop	{r4, r6, r7, pc}
 8000f58:	3df00000 	.word	0x3df00000
 8000f5c:	41f00000 	.word	0x41f00000

08000f60 <__udivmoddi4>:
 8000f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f64:	9d08      	ldr	r5, [sp, #32]
 8000f66:	460c      	mov	r4, r1
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d14e      	bne.n	800100a <__udivmoddi4+0xaa>
 8000f6c:	4694      	mov	ip, r2
 8000f6e:	458c      	cmp	ip, r1
 8000f70:	4686      	mov	lr, r0
 8000f72:	fab2 f282 	clz	r2, r2
 8000f76:	d962      	bls.n	800103e <__udivmoddi4+0xde>
 8000f78:	b14a      	cbz	r2, 8000f8e <__udivmoddi4+0x2e>
 8000f7a:	f1c2 0320 	rsb	r3, r2, #32
 8000f7e:	4091      	lsls	r1, r2
 8000f80:	fa20 f303 	lsr.w	r3, r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	4319      	orrs	r1, r3
 8000f8a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f92:	fa1f f68c 	uxth.w	r6, ip
 8000f96:	fbb1 f4f7 	udiv	r4, r1, r7
 8000f9a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f9e:	fb07 1114 	mls	r1, r7, r4, r1
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb04 f106 	mul.w	r1, r4, r6
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d90a      	bls.n	8000fc4 <__udivmoddi4+0x64>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f104 30ff 	add.w	r0, r4, #4294967295
 8000fb6:	f080 8112 	bcs.w	80011de <__udivmoddi4+0x27e>
 8000fba:	4299      	cmp	r1, r3
 8000fbc:	f240 810f 	bls.w	80011de <__udivmoddi4+0x27e>
 8000fc0:	3c02      	subs	r4, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1a59      	subs	r1, r3, r1
 8000fc6:	fa1f f38e 	uxth.w	r3, lr
 8000fca:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fce:	fb07 1110 	mls	r1, r7, r0, r1
 8000fd2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fd6:	fb00 f606 	mul.w	r6, r0, r6
 8000fda:	429e      	cmp	r6, r3
 8000fdc:	d90a      	bls.n	8000ff4 <__udivmoddi4+0x94>
 8000fde:	eb1c 0303 	adds.w	r3, ip, r3
 8000fe2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fe6:	f080 80fc 	bcs.w	80011e2 <__udivmoddi4+0x282>
 8000fea:	429e      	cmp	r6, r3
 8000fec:	f240 80f9 	bls.w	80011e2 <__udivmoddi4+0x282>
 8000ff0:	4463      	add	r3, ip
 8000ff2:	3802      	subs	r0, #2
 8000ff4:	1b9b      	subs	r3, r3, r6
 8000ff6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	b11d      	cbz	r5, 8001006 <__udivmoddi4+0xa6>
 8000ffe:	40d3      	lsrs	r3, r2
 8001000:	2200      	movs	r2, #0
 8001002:	e9c5 3200 	strd	r3, r2, [r5]
 8001006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800100a:	428b      	cmp	r3, r1
 800100c:	d905      	bls.n	800101a <__udivmoddi4+0xba>
 800100e:	b10d      	cbz	r5, 8001014 <__udivmoddi4+0xb4>
 8001010:	e9c5 0100 	strd	r0, r1, [r5]
 8001014:	2100      	movs	r1, #0
 8001016:	4608      	mov	r0, r1
 8001018:	e7f5      	b.n	8001006 <__udivmoddi4+0xa6>
 800101a:	fab3 f183 	clz	r1, r3
 800101e:	2900      	cmp	r1, #0
 8001020:	d146      	bne.n	80010b0 <__udivmoddi4+0x150>
 8001022:	42a3      	cmp	r3, r4
 8001024:	d302      	bcc.n	800102c <__udivmoddi4+0xcc>
 8001026:	4290      	cmp	r0, r2
 8001028:	f0c0 80f0 	bcc.w	800120c <__udivmoddi4+0x2ac>
 800102c:	1a86      	subs	r6, r0, r2
 800102e:	eb64 0303 	sbc.w	r3, r4, r3
 8001032:	2001      	movs	r0, #1
 8001034:	2d00      	cmp	r5, #0
 8001036:	d0e6      	beq.n	8001006 <__udivmoddi4+0xa6>
 8001038:	e9c5 6300 	strd	r6, r3, [r5]
 800103c:	e7e3      	b.n	8001006 <__udivmoddi4+0xa6>
 800103e:	2a00      	cmp	r2, #0
 8001040:	f040 8090 	bne.w	8001164 <__udivmoddi4+0x204>
 8001044:	eba1 040c 	sub.w	r4, r1, ip
 8001048:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800104c:	fa1f f78c 	uxth.w	r7, ip
 8001050:	2101      	movs	r1, #1
 8001052:	fbb4 f6f8 	udiv	r6, r4, r8
 8001056:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800105a:	fb08 4416 	mls	r4, r8, r6, r4
 800105e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001062:	fb07 f006 	mul.w	r0, r7, r6
 8001066:	4298      	cmp	r0, r3
 8001068:	d908      	bls.n	800107c <__udivmoddi4+0x11c>
 800106a:	eb1c 0303 	adds.w	r3, ip, r3
 800106e:	f106 34ff 	add.w	r4, r6, #4294967295
 8001072:	d202      	bcs.n	800107a <__udivmoddi4+0x11a>
 8001074:	4298      	cmp	r0, r3
 8001076:	f200 80cd 	bhi.w	8001214 <__udivmoddi4+0x2b4>
 800107a:	4626      	mov	r6, r4
 800107c:	1a1c      	subs	r4, r3, r0
 800107e:	fa1f f38e 	uxth.w	r3, lr
 8001082:	fbb4 f0f8 	udiv	r0, r4, r8
 8001086:	fb08 4410 	mls	r4, r8, r0, r4
 800108a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800108e:	fb00 f707 	mul.w	r7, r0, r7
 8001092:	429f      	cmp	r7, r3
 8001094:	d908      	bls.n	80010a8 <__udivmoddi4+0x148>
 8001096:	eb1c 0303 	adds.w	r3, ip, r3
 800109a:	f100 34ff 	add.w	r4, r0, #4294967295
 800109e:	d202      	bcs.n	80010a6 <__udivmoddi4+0x146>
 80010a0:	429f      	cmp	r7, r3
 80010a2:	f200 80b0 	bhi.w	8001206 <__udivmoddi4+0x2a6>
 80010a6:	4620      	mov	r0, r4
 80010a8:	1bdb      	subs	r3, r3, r7
 80010aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80010ae:	e7a5      	b.n	8000ffc <__udivmoddi4+0x9c>
 80010b0:	f1c1 0620 	rsb	r6, r1, #32
 80010b4:	408b      	lsls	r3, r1
 80010b6:	fa22 f706 	lsr.w	r7, r2, r6
 80010ba:	431f      	orrs	r7, r3
 80010bc:	fa20 fc06 	lsr.w	ip, r0, r6
 80010c0:	fa04 f301 	lsl.w	r3, r4, r1
 80010c4:	ea43 030c 	orr.w	r3, r3, ip
 80010c8:	40f4      	lsrs	r4, r6
 80010ca:	fa00 f801 	lsl.w	r8, r0, r1
 80010ce:	0c38      	lsrs	r0, r7, #16
 80010d0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80010d4:	fbb4 fef0 	udiv	lr, r4, r0
 80010d8:	fa1f fc87 	uxth.w	ip, r7
 80010dc:	fb00 441e 	mls	r4, r0, lr, r4
 80010e0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80010e4:	fb0e f90c 	mul.w	r9, lr, ip
 80010e8:	45a1      	cmp	r9, r4
 80010ea:	fa02 f201 	lsl.w	r2, r2, r1
 80010ee:	d90a      	bls.n	8001106 <__udivmoddi4+0x1a6>
 80010f0:	193c      	adds	r4, r7, r4
 80010f2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80010f6:	f080 8084 	bcs.w	8001202 <__udivmoddi4+0x2a2>
 80010fa:	45a1      	cmp	r9, r4
 80010fc:	f240 8081 	bls.w	8001202 <__udivmoddi4+0x2a2>
 8001100:	f1ae 0e02 	sub.w	lr, lr, #2
 8001104:	443c      	add	r4, r7
 8001106:	eba4 0409 	sub.w	r4, r4, r9
 800110a:	fa1f f983 	uxth.w	r9, r3
 800110e:	fbb4 f3f0 	udiv	r3, r4, r0
 8001112:	fb00 4413 	mls	r4, r0, r3, r4
 8001116:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800111a:	fb03 fc0c 	mul.w	ip, r3, ip
 800111e:	45a4      	cmp	ip, r4
 8001120:	d907      	bls.n	8001132 <__udivmoddi4+0x1d2>
 8001122:	193c      	adds	r4, r7, r4
 8001124:	f103 30ff 	add.w	r0, r3, #4294967295
 8001128:	d267      	bcs.n	80011fa <__udivmoddi4+0x29a>
 800112a:	45a4      	cmp	ip, r4
 800112c:	d965      	bls.n	80011fa <__udivmoddi4+0x29a>
 800112e:	3b02      	subs	r3, #2
 8001130:	443c      	add	r4, r7
 8001132:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8001136:	fba0 9302 	umull	r9, r3, r0, r2
 800113a:	eba4 040c 	sub.w	r4, r4, ip
 800113e:	429c      	cmp	r4, r3
 8001140:	46ce      	mov	lr, r9
 8001142:	469c      	mov	ip, r3
 8001144:	d351      	bcc.n	80011ea <__udivmoddi4+0x28a>
 8001146:	d04e      	beq.n	80011e6 <__udivmoddi4+0x286>
 8001148:	b155      	cbz	r5, 8001160 <__udivmoddi4+0x200>
 800114a:	ebb8 030e 	subs.w	r3, r8, lr
 800114e:	eb64 040c 	sbc.w	r4, r4, ip
 8001152:	fa04 f606 	lsl.w	r6, r4, r6
 8001156:	40cb      	lsrs	r3, r1
 8001158:	431e      	orrs	r6, r3
 800115a:	40cc      	lsrs	r4, r1
 800115c:	e9c5 6400 	strd	r6, r4, [r5]
 8001160:	2100      	movs	r1, #0
 8001162:	e750      	b.n	8001006 <__udivmoddi4+0xa6>
 8001164:	f1c2 0320 	rsb	r3, r2, #32
 8001168:	fa20 f103 	lsr.w	r1, r0, r3
 800116c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001170:	fa24 f303 	lsr.w	r3, r4, r3
 8001174:	4094      	lsls	r4, r2
 8001176:	430c      	orrs	r4, r1
 8001178:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800117c:	fa00 fe02 	lsl.w	lr, r0, r2
 8001180:	fa1f f78c 	uxth.w	r7, ip
 8001184:	fbb3 f0f8 	udiv	r0, r3, r8
 8001188:	fb08 3110 	mls	r1, r8, r0, r3
 800118c:	0c23      	lsrs	r3, r4, #16
 800118e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001192:	fb00 f107 	mul.w	r1, r0, r7
 8001196:	4299      	cmp	r1, r3
 8001198:	d908      	bls.n	80011ac <__udivmoddi4+0x24c>
 800119a:	eb1c 0303 	adds.w	r3, ip, r3
 800119e:	f100 36ff 	add.w	r6, r0, #4294967295
 80011a2:	d22c      	bcs.n	80011fe <__udivmoddi4+0x29e>
 80011a4:	4299      	cmp	r1, r3
 80011a6:	d92a      	bls.n	80011fe <__udivmoddi4+0x29e>
 80011a8:	3802      	subs	r0, #2
 80011aa:	4463      	add	r3, ip
 80011ac:	1a5b      	subs	r3, r3, r1
 80011ae:	b2a4      	uxth	r4, r4
 80011b0:	fbb3 f1f8 	udiv	r1, r3, r8
 80011b4:	fb08 3311 	mls	r3, r8, r1, r3
 80011b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80011bc:	fb01 f307 	mul.w	r3, r1, r7
 80011c0:	42a3      	cmp	r3, r4
 80011c2:	d908      	bls.n	80011d6 <__udivmoddi4+0x276>
 80011c4:	eb1c 0404 	adds.w	r4, ip, r4
 80011c8:	f101 36ff 	add.w	r6, r1, #4294967295
 80011cc:	d213      	bcs.n	80011f6 <__udivmoddi4+0x296>
 80011ce:	42a3      	cmp	r3, r4
 80011d0:	d911      	bls.n	80011f6 <__udivmoddi4+0x296>
 80011d2:	3902      	subs	r1, #2
 80011d4:	4464      	add	r4, ip
 80011d6:	1ae4      	subs	r4, r4, r3
 80011d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80011dc:	e739      	b.n	8001052 <__udivmoddi4+0xf2>
 80011de:	4604      	mov	r4, r0
 80011e0:	e6f0      	b.n	8000fc4 <__udivmoddi4+0x64>
 80011e2:	4608      	mov	r0, r1
 80011e4:	e706      	b.n	8000ff4 <__udivmoddi4+0x94>
 80011e6:	45c8      	cmp	r8, r9
 80011e8:	d2ae      	bcs.n	8001148 <__udivmoddi4+0x1e8>
 80011ea:	ebb9 0e02 	subs.w	lr, r9, r2
 80011ee:	eb63 0c07 	sbc.w	ip, r3, r7
 80011f2:	3801      	subs	r0, #1
 80011f4:	e7a8      	b.n	8001148 <__udivmoddi4+0x1e8>
 80011f6:	4631      	mov	r1, r6
 80011f8:	e7ed      	b.n	80011d6 <__udivmoddi4+0x276>
 80011fa:	4603      	mov	r3, r0
 80011fc:	e799      	b.n	8001132 <__udivmoddi4+0x1d2>
 80011fe:	4630      	mov	r0, r6
 8001200:	e7d4      	b.n	80011ac <__udivmoddi4+0x24c>
 8001202:	46d6      	mov	lr, sl
 8001204:	e77f      	b.n	8001106 <__udivmoddi4+0x1a6>
 8001206:	4463      	add	r3, ip
 8001208:	3802      	subs	r0, #2
 800120a:	e74d      	b.n	80010a8 <__udivmoddi4+0x148>
 800120c:	4606      	mov	r6, r0
 800120e:	4623      	mov	r3, r4
 8001210:	4608      	mov	r0, r1
 8001212:	e70f      	b.n	8001034 <__udivmoddi4+0xd4>
 8001214:	3e02      	subs	r6, #2
 8001216:	4463      	add	r3, ip
 8001218:	e730      	b.n	800107c <__udivmoddi4+0x11c>
 800121a:	bf00      	nop

0800121c <__aeabi_idiv0>:
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop

08001220 <calculate_average>:
/* USER CODE BEGIN PV */
uint32_t adc_values[1000];
char msg[50];
/* USER CODE END PV */

float calculate_average(uint32_t *array, size_t length) {
 8001220:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001224:	b086      	sub	sp, #24
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
 800122a:	6039      	str	r1, [r7, #0]
    uint64_t sum = 0;
 800122c:	f04f 0200 	mov.w	r2, #0
 8001230:	f04f 0300 	mov.w	r3, #0
 8001234:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for (size_t i = 0; i < length; i++) {
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	e012      	b.n	8001264 <calculate_average+0x44>
        sum += array[i];
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	4413      	add	r3, r2
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2200      	movs	r2, #0
 800124a:	461c      	mov	r4, r3
 800124c:	4615      	mov	r5, r2
 800124e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001252:	eb12 0804 	adds.w	r8, r2, r4
 8001256:	eb43 0905 	adc.w	r9, r3, r5
 800125a:	e9c7 8904 	strd	r8, r9, [r7, #16]
    for (size_t i = 0; i < length; i++) {
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	3301      	adds	r3, #1
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fa      	ldr	r2, [r7, #12]
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	429a      	cmp	r2, r3
 800126a:	d3e8      	bcc.n	800123e <calculate_average+0x1e>
    }
    return (float)sum / length;
 800126c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001270:	f7ff fde2 	bl	8000e38 <__aeabi_ul2f>
 8001274:	ee06 0a90 	vmov	s13, r0
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	ee07 3a90 	vmov	s15, r3
 800127e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001286:	eef0 7a47 	vmov.f32	s15, s14
}
 800128a:	eeb0 0a67 	vmov.f32	s0, s15
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001298 <main>:
void MX_GPIO_Init(void);
void MX_ADC1_Init(void);
void MX_LPUART1_UART_Init(void);
void MX_DMA_Init(void);

int main(void) {
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
    HAL_Init();
 800129c:	f000 fc8f 	bl	8001bbe <HAL_Init>
    SystemClock_Config();
 80012a0:	f000 f8b4 	bl	800140c <SystemClock_Config>
    MX_GPIO_Init();
 80012a4:	f000 f9c4 	bl	8001630 <MX_GPIO_Init>
    MX_DMA_Init();
 80012a8:	f000 f9a4 	bl	80015f4 <MX_DMA_Init>
    MX_ADC1_Init();
 80012ac:	f000 f900 	bl	80014b0 <MX_ADC1_Init>
    MX_LPUART1_UART_Init();
 80012b0:	f000 f974 	bl	800159c <MX_LPUART1_UART_Init>
    sprintf(msg, "UART Initialized\r\n");
 80012b4:	491d      	ldr	r1, [pc, #116]	@ (800132c <main+0x94>)
 80012b6:	481e      	ldr	r0, [pc, #120]	@ (8001330 <main+0x98>)
 80012b8:	f005 fc20 	bl	8006afc <siprintf>
    HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80012bc:	481c      	ldr	r0, [pc, #112]	@ (8001330 <main+0x98>)
 80012be:	f7fe ffe7 	bl	8000290 <strlen>
 80012c2:	4603      	mov	r3, r0
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ca:	4919      	ldr	r1, [pc, #100]	@ (8001330 <main+0x98>)
 80012cc:	4819      	ldr	r0, [pc, #100]	@ (8001334 <main+0x9c>)
 80012ce:	f003 ff8b 	bl	80051e8 <HAL_UART_Transmit>

    if (HAL_ADC_Start_DMA(&hadc1, adc_values, 1000) != HAL_OK) {
 80012d2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012d6:	4918      	ldr	r1, [pc, #96]	@ (8001338 <main+0xa0>)
 80012d8:	4818      	ldr	r0, [pc, #96]	@ (800133c <main+0xa4>)
 80012da:	f001 f845 	bl	8002368 <HAL_ADC_Start_DMA>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d010      	beq.n	8001306 <main+0x6e>
        sprintf(msg, "ADC DMA Start Error\r\n");
 80012e4:	4916      	ldr	r1, [pc, #88]	@ (8001340 <main+0xa8>)
 80012e6:	4812      	ldr	r0, [pc, #72]	@ (8001330 <main+0x98>)
 80012e8:	f005 fc08 	bl	8006afc <siprintf>
        HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80012ec:	4810      	ldr	r0, [pc, #64]	@ (8001330 <main+0x98>)
 80012ee:	f7fe ffcf 	bl	8000290 <strlen>
 80012f2:	4603      	mov	r3, r0
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	f04f 33ff 	mov.w	r3, #4294967295
 80012fa:	490d      	ldr	r1, [pc, #52]	@ (8001330 <main+0x98>)
 80012fc:	480d      	ldr	r0, [pc, #52]	@ (8001334 <main+0x9c>)
 80012fe:	f003 ff73 	bl	80051e8 <HAL_UART_Transmit>
        Error_Handler();
 8001302:	f000 f9ff 	bl	8001704 <Error_Handler>
    }

    sprintf(msg, "ADC DMA Started\r\n");
 8001306:	490f      	ldr	r1, [pc, #60]	@ (8001344 <main+0xac>)
 8001308:	4809      	ldr	r0, [pc, #36]	@ (8001330 <main+0x98>)
 800130a:	f005 fbf7 	bl	8006afc <siprintf>
    HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800130e:	4808      	ldr	r0, [pc, #32]	@ (8001330 <main+0x98>)
 8001310:	f7fe ffbe 	bl	8000290 <strlen>
 8001314:	4603      	mov	r3, r0
 8001316:	b29a      	uxth	r2, r3
 8001318:	f04f 33ff 	mov.w	r3, #4294967295
 800131c:	4904      	ldr	r1, [pc, #16]	@ (8001330 <main+0x98>)
 800131e:	4805      	ldr	r0, [pc, #20]	@ (8001334 <main+0x9c>)
 8001320:	f003 ff62 	bl	80051e8 <HAL_UART_Transmit>

    while (1) {
        HAL_Delay(100);
 8001324:	2064      	movs	r0, #100	@ 0x64
 8001326:	f000 fcbf 	bl	8001ca8 <HAL_Delay>
 800132a:	e7fb      	b.n	8001324 <main+0x8c>
 800132c:	0800a388 	.word	0x0800a388
 8001330:	200012c8 	.word	0x200012c8
 8001334:	200002a0 	.word	0x200002a0
 8001338:	20000328 	.word	0x20000328
 800133c:	200001f0 	.word	0x200001f0
 8001340:	0800a39c 	.word	0x0800a39c
 8001344:	0800a3b4 	.word	0x0800a3b4

08001348 <HAL_ADC_ConvHalfCpltCallback>:
    }
}

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	  sprintf(msg, "Hello\r\n");
 8001350:	490d      	ldr	r1, [pc, #52]	@ (8001388 <HAL_ADC_ConvHalfCpltCallback+0x40>)
 8001352:	480e      	ldr	r0, [pc, #56]	@ (800138c <HAL_ADC_ConvHalfCpltCallback+0x44>)
 8001354:	f005 fbd2 	bl	8006afc <siprintf>
    if (hadc->Instance == ADC1) {
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a0c      	ldr	r2, [pc, #48]	@ (8001390 <HAL_ADC_ConvHalfCpltCallback+0x48>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d10e      	bne.n	8001380 <HAL_ADC_ConvHalfCpltCallback+0x38>
        sprintf(msg, "Half conversion complete\r\n");
 8001362:	490c      	ldr	r1, [pc, #48]	@ (8001394 <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 8001364:	4809      	ldr	r0, [pc, #36]	@ (800138c <HAL_ADC_ConvHalfCpltCallback+0x44>)
 8001366:	f005 fbc9 	bl	8006afc <siprintf>
        HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800136a:	4808      	ldr	r0, [pc, #32]	@ (800138c <HAL_ADC_ConvHalfCpltCallback+0x44>)
 800136c:	f7fe ff90 	bl	8000290 <strlen>
 8001370:	4603      	mov	r3, r0
 8001372:	b29a      	uxth	r2, r3
 8001374:	f04f 33ff 	mov.w	r3, #4294967295
 8001378:	4904      	ldr	r1, [pc, #16]	@ (800138c <HAL_ADC_ConvHalfCpltCallback+0x44>)
 800137a:	4807      	ldr	r0, [pc, #28]	@ (8001398 <HAL_ADC_ConvHalfCpltCallback+0x50>)
 800137c:	f003 ff34 	bl	80051e8 <HAL_UART_Transmit>
    }
}
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	0800a3c8 	.word	0x0800a3c8
 800138c:	200012c8 	.word	0x200012c8
 8001390:	50040000 	.word	0x50040000
 8001394:	0800a3d0 	.word	0x0800a3d0
 8001398:	200002a0 	.word	0x200002a0

0800139c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a13      	ldr	r2, [pc, #76]	@ (80013f8 <HAL_ADC_ConvCpltCallback+0x5c>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d120      	bne.n	80013f0 <HAL_ADC_ConvCpltCallback+0x54>
        float average = calculate_average(adc_values, 1000);
 80013ae:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80013b2:	4812      	ldr	r0, [pc, #72]	@ (80013fc <HAL_ADC_ConvCpltCallback+0x60>)
 80013b4:	f7ff ff34 	bl	8001220 <calculate_average>
 80013b8:	ed87 0a03 	vstr	s0, [r7, #12]

        sprintf(msg, "Conversion complete. Average: %.2f\r\n", average);
 80013bc:	68f8      	ldr	r0, [r7, #12]
 80013be:	f7ff f8d3 	bl	8000568 <__aeabi_f2d>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	490e      	ldr	r1, [pc, #56]	@ (8001400 <HAL_ADC_ConvCpltCallback+0x64>)
 80013c8:	480e      	ldr	r0, [pc, #56]	@ (8001404 <HAL_ADC_ConvCpltCallback+0x68>)
 80013ca:	f005 fb97 	bl	8006afc <siprintf>
        HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80013ce:	480d      	ldr	r0, [pc, #52]	@ (8001404 <HAL_ADC_ConvCpltCallback+0x68>)
 80013d0:	f7fe ff5e 	bl	8000290 <strlen>
 80013d4:	4603      	mov	r3, r0
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	f04f 33ff 	mov.w	r3, #4294967295
 80013dc:	4909      	ldr	r1, [pc, #36]	@ (8001404 <HAL_ADC_ConvCpltCallback+0x68>)
 80013de:	480a      	ldr	r0, [pc, #40]	@ (8001408 <HAL_ADC_ConvCpltCallback+0x6c>)
 80013e0:	f003 ff02 	bl	80051e8 <HAL_UART_Transmit>

        HAL_ADC_Start_DMA(hadc, adc_values, 1000);
 80013e4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80013e8:	4904      	ldr	r1, [pc, #16]	@ (80013fc <HAL_ADC_ConvCpltCallback+0x60>)
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f000 ffbc 	bl	8002368 <HAL_ADC_Start_DMA>
    }
}
 80013f0:	bf00      	nop
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	50040000 	.word	0x50040000
 80013fc:	20000328 	.word	0x20000328
 8001400:	0800a3ec 	.word	0x0800a3ec
 8001404:	200012c8 	.word	0x200012c8
 8001408:	200002a0 	.word	0x200002a0

0800140c <SystemClock_Config>:
void SystemClock_Config(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b096      	sub	sp, #88	@ 0x58
 8001410:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	2244      	movs	r2, #68	@ 0x44
 8001418:	2100      	movs	r1, #0
 800141a:	4618      	mov	r0, r3
 800141c:	f005 fbd1 	bl	8006bc2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001420:	463b      	mov	r3, r7
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	60da      	str	r2, [r3, #12]
 800142c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800142e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001432:	f002 fb1d 	bl	8003a70 <HAL_PWREx_ControlVoltageScaling>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800143c:	f000 f962 	bl	8001704 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001440:	2302      	movs	r3, #2
 8001442:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001444:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001448:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800144a:	2340      	movs	r3, #64	@ 0x40
 800144c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800144e:	2302      	movs	r3, #2
 8001450:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001452:	2302      	movs	r3, #2
 8001454:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001456:	2301      	movs	r3, #1
 8001458:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800145a:	230a      	movs	r3, #10
 800145c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800145e:	2302      	movs	r3, #2
 8001460:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001462:	2302      	movs	r3, #2
 8001464:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001466:	2302      	movs	r3, #2
 8001468:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	4618      	mov	r0, r3
 8001470:	f002 fb64 	bl	8003b3c <HAL_RCC_OscConfig>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800147a:	f000 f943 	bl	8001704 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800147e:	230f      	movs	r3, #15
 8001480:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001482:	2303      	movs	r3, #3
 8001484:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001486:	2300      	movs	r3, #0
 8001488:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800148a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800148e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001490:	2300      	movs	r3, #0
 8001492:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001494:	463b      	mov	r3, r7
 8001496:	2104      	movs	r1, #4
 8001498:	4618      	mov	r0, r3
 800149a:	f002 ff69 	bl	8004370 <HAL_RCC_ClockConfig>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80014a4:	f000 f92e 	bl	8001704 <Error_Handler>
  }
}
 80014a8:	bf00      	nop
 80014aa:	3758      	adds	r7, #88	@ 0x58
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC1_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08a      	sub	sp, #40	@ 0x28
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80014b6:	f107 031c 	add.w	r3, r7, #28
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
 80014d0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80014d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001590 <MX_ADC1_Init+0xe0>)
 80014d4:	4a2f      	ldr	r2, [pc, #188]	@ (8001594 <MX_ADC1_Init+0xe4>)
 80014d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80014d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001590 <MX_ADC1_Init+0xe0>)
 80014da:	2200      	movs	r2, #0
 80014dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014de:	4b2c      	ldr	r3, [pc, #176]	@ (8001590 <MX_ADC1_Init+0xe0>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001590 <MX_ADC1_Init+0xe0>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014ea:	4b29      	ldr	r3, [pc, #164]	@ (8001590 <MX_ADC1_Init+0xe0>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014f0:	4b27      	ldr	r3, [pc, #156]	@ (8001590 <MX_ADC1_Init+0xe0>)
 80014f2:	2204      	movs	r2, #4
 80014f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80014f6:	4b26      	ldr	r3, [pc, #152]	@ (8001590 <MX_ADC1_Init+0xe0>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80014fc:	4b24      	ldr	r3, [pc, #144]	@ (8001590 <MX_ADC1_Init+0xe0>)
 80014fe:	2201      	movs	r2, #1
 8001500:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001502:	4b23      	ldr	r3, [pc, #140]	@ (8001590 <MX_ADC1_Init+0xe0>)
 8001504:	2201      	movs	r2, #1
 8001506:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001508:	4b21      	ldr	r3, [pc, #132]	@ (8001590 <MX_ADC1_Init+0xe0>)
 800150a:	2200      	movs	r2, #0
 800150c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001510:	4b1f      	ldr	r3, [pc, #124]	@ (8001590 <MX_ADC1_Init+0xe0>)
 8001512:	2200      	movs	r2, #0
 8001514:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001516:	4b1e      	ldr	r3, [pc, #120]	@ (8001590 <MX_ADC1_Init+0xe0>)
 8001518:	2200      	movs	r2, #0
 800151a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800151c:	4b1c      	ldr	r3, [pc, #112]	@ (8001590 <MX_ADC1_Init+0xe0>)
 800151e:	2200      	movs	r2, #0
 8001520:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001524:	4b1a      	ldr	r3, [pc, #104]	@ (8001590 <MX_ADC1_Init+0xe0>)
 8001526:	2200      	movs	r2, #0
 8001528:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800152a:	4b19      	ldr	r3, [pc, #100]	@ (8001590 <MX_ADC1_Init+0xe0>)
 800152c:	2200      	movs	r2, #0
 800152e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001532:	4817      	ldr	r0, [pc, #92]	@ (8001590 <MX_ADC1_Init+0xe0>)
 8001534:	f000 fdc4 	bl	80020c0 <HAL_ADC_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800153e:	f000 f8e1 	bl	8001704 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001542:	2300      	movs	r3, #0
 8001544:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001546:	f107 031c 	add.w	r3, r7, #28
 800154a:	4619      	mov	r1, r3
 800154c:	4810      	ldr	r0, [pc, #64]	@ (8001590 <MX_ADC1_Init+0xe0>)
 800154e:	f001 fd1d 	bl	8002f8c <HAL_ADCEx_MultiModeConfigChannel>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001558:	f000 f8d4 	bl	8001704 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800155c:	4b0e      	ldr	r3, [pc, #56]	@ (8001598 <MX_ADC1_Init+0xe8>)
 800155e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001560:	2306      	movs	r3, #6
 8001562:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001564:	2300      	movs	r3, #0
 8001566:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001568:	237f      	movs	r3, #127	@ 0x7f
 800156a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800156c:	2304      	movs	r3, #4
 800156e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001574:	1d3b      	adds	r3, r7, #4
 8001576:	4619      	mov	r1, r3
 8001578:	4805      	ldr	r0, [pc, #20]	@ (8001590 <MX_ADC1_Init+0xe0>)
 800157a:	f000 ffbb 	bl	80024f4 <HAL_ADC_ConfigChannel>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001584:	f000 f8be 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001588:	bf00      	nop
 800158a:	3728      	adds	r7, #40	@ 0x28
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	200001f0 	.word	0x200001f0
 8001594:	50040000 	.word	0x50040000
 8001598:	04300002 	.word	0x04300002

0800159c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_LPUART1_UART_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80015a0:	4b12      	ldr	r3, [pc, #72]	@ (80015ec <MX_LPUART1_UART_Init+0x50>)
 80015a2:	4a13      	ldr	r2, [pc, #76]	@ (80015f0 <MX_LPUART1_UART_Init+0x54>)
 80015a4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80015a6:	4b11      	ldr	r3, [pc, #68]	@ (80015ec <MX_LPUART1_UART_Init+0x50>)
 80015a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015ac:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015ae:	4b0f      	ldr	r3, [pc, #60]	@ (80015ec <MX_LPUART1_UART_Init+0x50>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80015b4:	4b0d      	ldr	r3, [pc, #52]	@ (80015ec <MX_LPUART1_UART_Init+0x50>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80015ba:	4b0c      	ldr	r3, [pc, #48]	@ (80015ec <MX_LPUART1_UART_Init+0x50>)
 80015bc:	2200      	movs	r2, #0
 80015be:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80015c0:	4b0a      	ldr	r3, [pc, #40]	@ (80015ec <MX_LPUART1_UART_Init+0x50>)
 80015c2:	220c      	movs	r2, #12
 80015c4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015c6:	4b09      	ldr	r3, [pc, #36]	@ (80015ec <MX_LPUART1_UART_Init+0x50>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015cc:	4b07      	ldr	r3, [pc, #28]	@ (80015ec <MX_LPUART1_UART_Init+0x50>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015d2:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <MX_LPUART1_UART_Init+0x50>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80015d8:	4804      	ldr	r0, [pc, #16]	@ (80015ec <MX_LPUART1_UART_Init+0x50>)
 80015da:	f003 fdb7 	bl	800514c <HAL_UART_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80015e4:	f000 f88e 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	200002a0 	.word	0x200002a0
 80015f0:	40008000 	.word	0x40008000

080015f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015fa:	4b0c      	ldr	r3, [pc, #48]	@ (800162c <MX_DMA_Init+0x38>)
 80015fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015fe:	4a0b      	ldr	r2, [pc, #44]	@ (800162c <MX_DMA_Init+0x38>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	6493      	str	r3, [r2, #72]	@ 0x48
 8001606:	4b09      	ldr	r3, [pc, #36]	@ (800162c <MX_DMA_Init+0x38>)
 8001608:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	607b      	str	r3, [r7, #4]
 8001610:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001612:	2200      	movs	r2, #0
 8001614:	2100      	movs	r1, #0
 8001616:	200b      	movs	r0, #11
 8001618:	f001 fe43 	bl	80032a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800161c:	200b      	movs	r0, #11
 800161e:	f001 fe5c 	bl	80032da <HAL_NVIC_EnableIRQ>

}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40021000 	.word	0x40021000

08001630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08a      	sub	sp, #40	@ 0x28
 8001634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001636:	f107 0314 	add.w	r3, r7, #20
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]
 8001642:	60da      	str	r2, [r3, #12]
 8001644:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001646:	4b2c      	ldr	r3, [pc, #176]	@ (80016f8 <MX_GPIO_Init+0xc8>)
 8001648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164a:	4a2b      	ldr	r2, [pc, #172]	@ (80016f8 <MX_GPIO_Init+0xc8>)
 800164c:	f043 0304 	orr.w	r3, r3, #4
 8001650:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001652:	4b29      	ldr	r3, [pc, #164]	@ (80016f8 <MX_GPIO_Init+0xc8>)
 8001654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001656:	f003 0304 	and.w	r3, r3, #4
 800165a:	613b      	str	r3, [r7, #16]
 800165c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800165e:	4b26      	ldr	r3, [pc, #152]	@ (80016f8 <MX_GPIO_Init+0xc8>)
 8001660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001662:	4a25      	ldr	r2, [pc, #148]	@ (80016f8 <MX_GPIO_Init+0xc8>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800166a:	4b23      	ldr	r3, [pc, #140]	@ (80016f8 <MX_GPIO_Init+0xc8>)
 800166c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001676:	4b20      	ldr	r3, [pc, #128]	@ (80016f8 <MX_GPIO_Init+0xc8>)
 8001678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800167a:	4a1f      	ldr	r2, [pc, #124]	@ (80016f8 <MX_GPIO_Init+0xc8>)
 800167c:	f043 0302 	orr.w	r3, r3, #2
 8001680:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001682:	4b1d      	ldr	r3, [pc, #116]	@ (80016f8 <MX_GPIO_Init+0xc8>)
 8001684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	60bb      	str	r3, [r7, #8]
 800168c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800168e:	4b1a      	ldr	r3, [pc, #104]	@ (80016f8 <MX_GPIO_Init+0xc8>)
 8001690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001692:	4a19      	ldr	r2, [pc, #100]	@ (80016f8 <MX_GPIO_Init+0xc8>)
 8001694:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001698:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800169a:	4b17      	ldr	r3, [pc, #92]	@ (80016f8 <MX_GPIO_Init+0xc8>)
 800169c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800169e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80016a6:	f002 fa39 	bl	8003b1c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_SET);
 80016aa:	2201      	movs	r2, #1
 80016ac:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 80016b0:	4812      	ldr	r0, [pc, #72]	@ (80016fc <MX_GPIO_Init+0xcc>)
 80016b2:	f002 f9b7 	bl	8003a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016bc:	2300      	movs	r3, #0
 80016be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c4:	f107 0314 	add.w	r3, r7, #20
 80016c8:	4619      	mov	r1, r3
 80016ca:	480d      	ldr	r0, [pc, #52]	@ (8001700 <MX_GPIO_Init+0xd0>)
 80016cc:	f002 f818 	bl	8003700 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80016d0:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 80016d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d6:	2301      	movs	r3, #1
 80016d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016de:	2300      	movs	r3, #0
 80016e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e2:	f107 0314 	add.w	r3, r7, #20
 80016e6:	4619      	mov	r1, r3
 80016e8:	4804      	ldr	r0, [pc, #16]	@ (80016fc <MX_GPIO_Init+0xcc>)
 80016ea:	f002 f809 	bl	8003700 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016ee:	bf00      	nop
 80016f0:	3728      	adds	r7, #40	@ 0x28
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40021000 	.word	0x40021000
 80016fc:	48000400 	.word	0x48000400
 8001700:	48000800 	.word	0x48000800

08001704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001708:	b672      	cpsid	i
}
 800170a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800170c:	bf00      	nop
 800170e:	e7fd      	b.n	800170c <Error_Handler+0x8>

08001710 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001716:	4b0f      	ldr	r3, [pc, #60]	@ (8001754 <HAL_MspInit+0x44>)
 8001718:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800171a:	4a0e      	ldr	r2, [pc, #56]	@ (8001754 <HAL_MspInit+0x44>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	6613      	str	r3, [r2, #96]	@ 0x60
 8001722:	4b0c      	ldr	r3, [pc, #48]	@ (8001754 <HAL_MspInit+0x44>)
 8001724:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	607b      	str	r3, [r7, #4]
 800172c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800172e:	4b09      	ldr	r3, [pc, #36]	@ (8001754 <HAL_MspInit+0x44>)
 8001730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001732:	4a08      	ldr	r2, [pc, #32]	@ (8001754 <HAL_MspInit+0x44>)
 8001734:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001738:	6593      	str	r3, [r2, #88]	@ 0x58
 800173a:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <HAL_MspInit+0x44>)
 800173c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800173e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001742:	603b      	str	r3, [r7, #0]
 8001744:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	40021000 	.word	0x40021000

08001758 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b0ac      	sub	sp, #176	@ 0xb0
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001760:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001770:	f107 0310 	add.w	r3, r7, #16
 8001774:	228c      	movs	r2, #140	@ 0x8c
 8001776:	2100      	movs	r1, #0
 8001778:	4618      	mov	r0, r3
 800177a:	f005 fa22 	bl	8006bc2 <memset>
  if(hadc->Instance==ADC1)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a3c      	ldr	r2, [pc, #240]	@ (8001874 <HAL_ADC_MspInit+0x11c>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d171      	bne.n	800186c <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001788:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800178c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800178e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001792:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001796:	2302      	movs	r3, #2
 8001798:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800179a:	2301      	movs	r3, #1
 800179c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800179e:	2308      	movs	r3, #8
 80017a0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80017a2:	2302      	movs	r3, #2
 80017a4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80017a6:	2302      	movs	r3, #2
 80017a8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80017aa:	2302      	movs	r3, #2
 80017ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80017ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80017b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017b4:	f107 0310 	add.w	r3, r7, #16
 80017b8:	4618      	mov	r0, r3
 80017ba:	f002 fffd 	bl	80047b8 <HAL_RCCEx_PeriphCLKConfig>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80017c4:	f7ff ff9e 	bl	8001704 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80017c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001878 <HAL_ADC_MspInit+0x120>)
 80017ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017cc:	4a2a      	ldr	r2, [pc, #168]	@ (8001878 <HAL_ADC_MspInit+0x120>)
 80017ce:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80017d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017d4:	4b28      	ldr	r3, [pc, #160]	@ (8001878 <HAL_ADC_MspInit+0x120>)
 80017d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e0:	4b25      	ldr	r3, [pc, #148]	@ (8001878 <HAL_ADC_MspInit+0x120>)
 80017e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e4:	4a24      	ldr	r2, [pc, #144]	@ (8001878 <HAL_ADC_MspInit+0x120>)
 80017e6:	f043 0304 	orr.w	r3, r3, #4
 80017ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ec:	4b22      	ldr	r3, [pc, #136]	@ (8001878 <HAL_ADC_MspInit+0x120>)
 80017ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017f0:	f003 0304 	and.w	r3, r3, #4
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017f8:	2303      	movs	r3, #3
 80017fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017fe:	2303      	movs	r3, #3
 8001800:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800180a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800180e:	4619      	mov	r1, r3
 8001810:	481a      	ldr	r0, [pc, #104]	@ (800187c <HAL_ADC_MspInit+0x124>)
 8001812:	f001 ff75 	bl	8003700 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001816:	4b1a      	ldr	r3, [pc, #104]	@ (8001880 <HAL_ADC_MspInit+0x128>)
 8001818:	4a1a      	ldr	r2, [pc, #104]	@ (8001884 <HAL_ADC_MspInit+0x12c>)
 800181a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800181c:	4b18      	ldr	r3, [pc, #96]	@ (8001880 <HAL_ADC_MspInit+0x128>)
 800181e:	2200      	movs	r2, #0
 8001820:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001822:	4b17      	ldr	r3, [pc, #92]	@ (8001880 <HAL_ADC_MspInit+0x128>)
 8001824:	2200      	movs	r2, #0
 8001826:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001828:	4b15      	ldr	r3, [pc, #84]	@ (8001880 <HAL_ADC_MspInit+0x128>)
 800182a:	2200      	movs	r2, #0
 800182c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800182e:	4b14      	ldr	r3, [pc, #80]	@ (8001880 <HAL_ADC_MspInit+0x128>)
 8001830:	2280      	movs	r2, #128	@ 0x80
 8001832:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001834:	4b12      	ldr	r3, [pc, #72]	@ (8001880 <HAL_ADC_MspInit+0x128>)
 8001836:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800183a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800183c:	4b10      	ldr	r3, [pc, #64]	@ (8001880 <HAL_ADC_MspInit+0x128>)
 800183e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001842:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001844:	4b0e      	ldr	r3, [pc, #56]	@ (8001880 <HAL_ADC_MspInit+0x128>)
 8001846:	2200      	movs	r2, #0
 8001848:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800184a:	4b0d      	ldr	r3, [pc, #52]	@ (8001880 <HAL_ADC_MspInit+0x128>)
 800184c:	2200      	movs	r2, #0
 800184e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001850:	480b      	ldr	r0, [pc, #44]	@ (8001880 <HAL_ADC_MspInit+0x128>)
 8001852:	f001 fd5d 	bl	8003310 <HAL_DMA_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 800185c:	f7ff ff52 	bl	8001704 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4a07      	ldr	r2, [pc, #28]	@ (8001880 <HAL_ADC_MspInit+0x128>)
 8001864:	651a      	str	r2, [r3, #80]	@ 0x50
 8001866:	4a06      	ldr	r2, [pc, #24]	@ (8001880 <HAL_ADC_MspInit+0x128>)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800186c:	bf00      	nop
 800186e:	37b0      	adds	r7, #176	@ 0xb0
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	50040000 	.word	0x50040000
 8001878:	40021000 	.word	0x40021000
 800187c:	48000800 	.word	0x48000800
 8001880:	20000258 	.word	0x20000258
 8001884:	40020008 	.word	0x40020008

08001888 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b0ac      	sub	sp, #176	@ 0xb0
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001890:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018a0:	f107 0310 	add.w	r3, r7, #16
 80018a4:	228c      	movs	r2, #140	@ 0x8c
 80018a6:	2100      	movs	r1, #0
 80018a8:	4618      	mov	r0, r3
 80018aa:	f005 f98a 	bl	8006bc2 <memset>
  if(huart->Instance==LPUART1)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a22      	ldr	r2, [pc, #136]	@ (800193c <HAL_UART_MspInit+0xb4>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d13d      	bne.n	8001934 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80018b8:	2320      	movs	r3, #32
 80018ba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80018bc:	2300      	movs	r3, #0
 80018be:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018c0:	f107 0310 	add.w	r3, r7, #16
 80018c4:	4618      	mov	r0, r3
 80018c6:	f002 ff77 	bl	80047b8 <HAL_RCCEx_PeriphCLKConfig>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018d0:	f7ff ff18 	bl	8001704 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80018d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001940 <HAL_UART_MspInit+0xb8>)
 80018d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018d8:	4a19      	ldr	r2, [pc, #100]	@ (8001940 <HAL_UART_MspInit+0xb8>)
 80018da:	f043 0301 	orr.w	r3, r3, #1
 80018de:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80018e0:	4b17      	ldr	r3, [pc, #92]	@ (8001940 <HAL_UART_MspInit+0xb8>)
 80018e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80018ec:	4b14      	ldr	r3, [pc, #80]	@ (8001940 <HAL_UART_MspInit+0xb8>)
 80018ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018f0:	4a13      	ldr	r2, [pc, #76]	@ (8001940 <HAL_UART_MspInit+0xb8>)
 80018f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018f8:	4b11      	ldr	r3, [pc, #68]	@ (8001940 <HAL_UART_MspInit+0xb8>)
 80018fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001900:	60bb      	str	r3, [r7, #8]
 8001902:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8001904:	f002 f90a 	bl	8003b1c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001908:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800190c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001910:	2302      	movs	r3, #2
 8001912:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	2300      	movs	r3, #0
 8001918:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191c:	2303      	movs	r3, #3
 800191e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001922:	2308      	movs	r3, #8
 8001924:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001928:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800192c:	4619      	mov	r1, r3
 800192e:	4805      	ldr	r0, [pc, #20]	@ (8001944 <HAL_UART_MspInit+0xbc>)
 8001930:	f001 fee6 	bl	8003700 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8001934:	bf00      	nop
 8001936:	37b0      	adds	r7, #176	@ 0xb0
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40008000 	.word	0x40008000
 8001940:	40021000 	.word	0x40021000
 8001944:	48001800 	.word	0x48001800

08001948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800194c:	bf00      	nop
 800194e:	e7fd      	b.n	800194c <NMI_Handler+0x4>

08001950 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001954:	bf00      	nop
 8001956:	e7fd      	b.n	8001954 <HardFault_Handler+0x4>

08001958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800195c:	bf00      	nop
 800195e:	e7fd      	b.n	800195c <MemManage_Handler+0x4>

08001960 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001964:	bf00      	nop
 8001966:	e7fd      	b.n	8001964 <BusFault_Handler+0x4>

08001968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800196c:	bf00      	nop
 800196e:	e7fd      	b.n	800196c <UsageFault_Handler+0x4>

08001970 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800199e:	f000 f963 	bl	8001c68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80019ac:	4802      	ldr	r0, [pc, #8]	@ (80019b8 <DMA1_Channel1_IRQHandler+0x10>)
 80019ae:	f001 fdc7 	bl	8003540 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000258 	.word	0x20000258

080019bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  return 1;
 80019c0:	2301      	movs	r3, #1
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <_kill>:

int _kill(int pid, int sig)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019d6:	f005 f947 	bl	8006c68 <__errno>
 80019da:	4603      	mov	r3, r0
 80019dc:	2216      	movs	r2, #22
 80019de:	601a      	str	r2, [r3, #0]
  return -1;
 80019e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <_exit>:

void _exit (int status)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019f4:	f04f 31ff 	mov.w	r1, #4294967295
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff ffe7 	bl	80019cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80019fe:	bf00      	nop
 8001a00:	e7fd      	b.n	80019fe <_exit+0x12>

08001a02 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b086      	sub	sp, #24
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	60f8      	str	r0, [r7, #12]
 8001a0a:	60b9      	str	r1, [r7, #8]
 8001a0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
 8001a12:	e00a      	b.n	8001a2a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a14:	f3af 8000 	nop.w
 8001a18:	4601      	mov	r1, r0
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	1c5a      	adds	r2, r3, #1
 8001a1e:	60ba      	str	r2, [r7, #8]
 8001a20:	b2ca      	uxtb	r2, r1
 8001a22:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	3301      	adds	r3, #1
 8001a28:	617b      	str	r3, [r7, #20]
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	dbf0      	blt.n	8001a14 <_read+0x12>
  }

  return len;
 8001a32:	687b      	ldr	r3, [r7, #4]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	e009      	b.n	8001a62 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	1c5a      	adds	r2, r3, #1
 8001a52:	60ba      	str	r2, [r7, #8]
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	617b      	str	r3, [r7, #20]
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	dbf1      	blt.n	8001a4e <_write+0x12>
  }
  return len;
 8001a6a:	687b      	ldr	r3, [r7, #4]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3718      	adds	r7, #24
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <_close>:

int _close(int file)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a9c:	605a      	str	r2, [r3, #4]
  return 0;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <_isatty>:

int _isatty(int file)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ab4:	2301      	movs	r3, #1
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b085      	sub	sp, #20
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	60f8      	str	r0, [r7, #12]
 8001aca:	60b9      	str	r1, [r7, #8]
 8001acc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ae4:	4a14      	ldr	r2, [pc, #80]	@ (8001b38 <_sbrk+0x5c>)
 8001ae6:	4b15      	ldr	r3, [pc, #84]	@ (8001b3c <_sbrk+0x60>)
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001af0:	4b13      	ldr	r3, [pc, #76]	@ (8001b40 <_sbrk+0x64>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d102      	bne.n	8001afe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001af8:	4b11      	ldr	r3, [pc, #68]	@ (8001b40 <_sbrk+0x64>)
 8001afa:	4a12      	ldr	r2, [pc, #72]	@ (8001b44 <_sbrk+0x68>)
 8001afc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001afe:	4b10      	ldr	r3, [pc, #64]	@ (8001b40 <_sbrk+0x64>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4413      	add	r3, r2
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d207      	bcs.n	8001b1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b0c:	f005 f8ac 	bl	8006c68 <__errno>
 8001b10:	4603      	mov	r3, r0
 8001b12:	220c      	movs	r2, #12
 8001b14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b16:	f04f 33ff 	mov.w	r3, #4294967295
 8001b1a:	e009      	b.n	8001b30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b1c:	4b08      	ldr	r3, [pc, #32]	@ (8001b40 <_sbrk+0x64>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b22:	4b07      	ldr	r3, [pc, #28]	@ (8001b40 <_sbrk+0x64>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4413      	add	r3, r2
 8001b2a:	4a05      	ldr	r2, [pc, #20]	@ (8001b40 <_sbrk+0x64>)
 8001b2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3718      	adds	r7, #24
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20050000 	.word	0x20050000
 8001b3c:	00000400 	.word	0x00000400
 8001b40:	200012fc 	.word	0x200012fc
 8001b44:	20001450 	.word	0x20001450

08001b48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b4c:	4b06      	ldr	r3, [pc, #24]	@ (8001b68 <SystemInit+0x20>)
 8001b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b52:	4a05      	ldr	r2, [pc, #20]	@ (8001b68 <SystemInit+0x20>)
 8001b54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ba4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b70:	f7ff ffea 	bl	8001b48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b74:	480c      	ldr	r0, [pc, #48]	@ (8001ba8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b76:	490d      	ldr	r1, [pc, #52]	@ (8001bac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b78:	4a0d      	ldr	r2, [pc, #52]	@ (8001bb0 <LoopForever+0xe>)
  movs r3, #0
 8001b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b7c:	e002      	b.n	8001b84 <LoopCopyDataInit>

08001b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b82:	3304      	adds	r3, #4

08001b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b88:	d3f9      	bcc.n	8001b7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b8c:	4c0a      	ldr	r4, [pc, #40]	@ (8001bb8 <LoopForever+0x16>)
  movs r3, #0
 8001b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b90:	e001      	b.n	8001b96 <LoopFillZerobss>

08001b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b94:	3204      	adds	r2, #4

08001b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b98:	d3fb      	bcc.n	8001b92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b9a:	f005 f86b 	bl	8006c74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b9e:	f7ff fb7b 	bl	8001298 <main>

08001ba2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ba2:	e7fe      	b.n	8001ba2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ba4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bac:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001bb0:	0800a898 	.word	0x0800a898
  ldr r2, =_sbss
 8001bb4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001bb8:	20001450 	.word	0x20001450

08001bbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bbc:	e7fe      	b.n	8001bbc <ADC1_2_IRQHandler>

08001bbe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc8:	2003      	movs	r0, #3
 8001bca:	f001 fb5f 	bl	800328c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bce:	2000      	movs	r0, #0
 8001bd0:	f000 f80e 	bl	8001bf0 <HAL_InitTick>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d002      	beq.n	8001be0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	71fb      	strb	r3, [r7, #7]
 8001bde:	e001      	b.n	8001be4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001be0:	f7ff fd96 	bl	8001710 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001be4:	79fb      	ldrb	r3, [r7, #7]
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
	...

08001bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001bfc:	4b17      	ldr	r3, [pc, #92]	@ (8001c5c <HAL_InitTick+0x6c>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d023      	beq.n	8001c4c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c04:	4b16      	ldr	r3, [pc, #88]	@ (8001c60 <HAL_InitTick+0x70>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4b14      	ldr	r3, [pc, #80]	@ (8001c5c <HAL_InitTick+0x6c>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f001 fb6b 	bl	80032f6 <HAL_SYSTICK_Config>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10f      	bne.n	8001c46 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b0f      	cmp	r3, #15
 8001c2a:	d809      	bhi.n	8001c40 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	f04f 30ff 	mov.w	r0, #4294967295
 8001c34:	f001 fb35 	bl	80032a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c38:	4a0a      	ldr	r2, [pc, #40]	@ (8001c64 <HAL_InitTick+0x74>)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6013      	str	r3, [r2, #0]
 8001c3e:	e007      	b.n	8001c50 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	73fb      	strb	r3, [r7, #15]
 8001c44:	e004      	b.n	8001c50 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	73fb      	strb	r3, [r7, #15]
 8001c4a:	e001      	b.n	8001c50 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20000008 	.word	0x20000008
 8001c60:	20000000 	.word	0x20000000
 8001c64:	20000004 	.word	0x20000004

08001c68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c6c:	4b06      	ldr	r3, [pc, #24]	@ (8001c88 <HAL_IncTick+0x20>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	461a      	mov	r2, r3
 8001c72:	4b06      	ldr	r3, [pc, #24]	@ (8001c8c <HAL_IncTick+0x24>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4413      	add	r3, r2
 8001c78:	4a04      	ldr	r2, [pc, #16]	@ (8001c8c <HAL_IncTick+0x24>)
 8001c7a:	6013      	str	r3, [r2, #0]
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	20000008 	.word	0x20000008
 8001c8c:	20001300 	.word	0x20001300

08001c90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  return uwTick;
 8001c94:	4b03      	ldr	r3, [pc, #12]	@ (8001ca4 <HAL_GetTick+0x14>)
 8001c96:	681b      	ldr	r3, [r3, #0]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	20001300 	.word	0x20001300

08001ca8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cb0:	f7ff ffee 	bl	8001c90 <HAL_GetTick>
 8001cb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc0:	d005      	beq.n	8001cce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8001cec <HAL_Delay+0x44>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	4413      	add	r3, r2
 8001ccc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cce:	bf00      	nop
 8001cd0:	f7ff ffde 	bl	8001c90 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d8f7      	bhi.n	8001cd0 <HAL_Delay+0x28>
  {
  }
}
 8001ce0:	bf00      	nop
 8001ce2:	bf00      	nop
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	20000008 	.word	0x20000008

08001cf0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	431a      	orrs	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	609a      	str	r2, [r3, #8]
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
 8001d1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b087      	sub	sp, #28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
 8001d64:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	3360      	adds	r3, #96	@ 0x60
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	4b08      	ldr	r3, [pc, #32]	@ (8001d9c <LL_ADC_SetOffset+0x44>)
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	430a      	orrs	r2, r1
 8001d86:	4313      	orrs	r3, r2
 8001d88:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001d90:	bf00      	nop
 8001d92:	371c      	adds	r7, #28
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	03fff000 	.word	0x03fff000

08001da0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3360      	adds	r3, #96	@ 0x60
 8001dae:	461a      	mov	r2, r3
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b087      	sub	sp, #28
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	3360      	adds	r3, #96	@ 0x60
 8001ddc:	461a      	mov	r2, r3
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4413      	add	r3, r2
 8001de4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	431a      	orrs	r2, r3
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001df6:	bf00      	nop
 8001df8:	371c      	adds	r7, #28
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b083      	sub	sp, #12
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
 8001e0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	695b      	ldr	r3, [r3, #20]
 8001e10:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	431a      	orrs	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	615a      	str	r2, [r3, #20]
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d101      	bne.n	8001e40 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e000      	b.n	8001e42 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b087      	sub	sp, #28
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	60f8      	str	r0, [r7, #12]
 8001e56:	60b9      	str	r1, [r7, #8]
 8001e58:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	3330      	adds	r3, #48	@ 0x30
 8001e5e:	461a      	mov	r2, r3
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	0a1b      	lsrs	r3, r3, #8
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	f003 030c 	and.w	r3, r3, #12
 8001e6a:	4413      	add	r3, r2
 8001e6c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	f003 031f 	and.w	r3, r3, #31
 8001e78:	211f      	movs	r1, #31
 8001e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	401a      	ands	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	0e9b      	lsrs	r3, r3, #26
 8001e86:	f003 011f 	and.w	r1, r3, #31
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	f003 031f 	and.w	r3, r3, #31
 8001e90:	fa01 f303 	lsl.w	r3, r1, r3
 8001e94:	431a      	orrs	r2, r3
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e9a:	bf00      	nop
 8001e9c:	371c      	adds	r7, #28
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b087      	sub	sp, #28
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	60f8      	str	r0, [r7, #12]
 8001eae:	60b9      	str	r1, [r7, #8]
 8001eb0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	3314      	adds	r3, #20
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	0e5b      	lsrs	r3, r3, #25
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	4413      	add	r3, r2
 8001ec4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	0d1b      	lsrs	r3, r3, #20
 8001ece:	f003 031f 	and.w	r3, r3, #31
 8001ed2:	2107      	movs	r1, #7
 8001ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	401a      	ands	r2, r3
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	0d1b      	lsrs	r3, r3, #20
 8001ee0:	f003 031f 	and.w	r3, r3, #31
 8001ee4:	6879      	ldr	r1, [r7, #4]
 8001ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eea:	431a      	orrs	r2, r3
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ef0:	bf00      	nop
 8001ef2:	371c      	adds	r7, #28
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f14:	43db      	mvns	r3, r3
 8001f16:	401a      	ands	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f003 0318 	and.w	r3, r3, #24
 8001f1e:	4908      	ldr	r1, [pc, #32]	@ (8001f40 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f20:	40d9      	lsrs	r1, r3
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	400b      	ands	r3, r1
 8001f26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001f32:	bf00      	nop
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	0007ffff 	.word	0x0007ffff

08001f44 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f003 031f 	and.w	r3, r3, #31
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001f70:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	6093      	str	r3, [r2, #8]
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f98:	d101      	bne.n	8001f9e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e000      	b.n	8001fa0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001fbc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fc0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fe4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001fe8:	d101      	bne.n	8001fee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001fea:	2301      	movs	r3, #1
 8001fec:	e000      	b.n	8001ff0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800200c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002010:	f043 0201 	orr.w	r2, r3, #1
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	2b01      	cmp	r3, #1
 8002036:	d101      	bne.n	800203c <LL_ADC_IsEnabled+0x18>
 8002038:	2301      	movs	r3, #1
 800203a:	e000      	b.n	800203e <LL_ADC_IsEnabled+0x1a>
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800204a:	b480      	push	{r7}
 800204c:	b083      	sub	sp, #12
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800205a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800205e:	f043 0204 	orr.w	r2, r3, #4
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002072:	b480      	push	{r7}
 8002074:	b083      	sub	sp, #12
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 0304 	and.w	r3, r3, #4
 8002082:	2b04      	cmp	r3, #4
 8002084:	d101      	bne.n	800208a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f003 0308 	and.w	r3, r3, #8
 80020a8:	2b08      	cmp	r3, #8
 80020aa:	d101      	bne.n	80020b0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80020ac:	2301      	movs	r3, #1
 80020ae:	e000      	b.n	80020b2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
	...

080020c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020c0:	b590      	push	{r4, r7, lr}
 80020c2:	b089      	sub	sp, #36	@ 0x24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020c8:	2300      	movs	r3, #0
 80020ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e133      	b.n	8002342 <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d109      	bne.n	80020fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7ff fb35 	bl	8001758 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff ff3f 	bl	8001f84 <LL_ADC_IsDeepPowerDownEnabled>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d004      	beq.n	8002116 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ff25 	bl	8001f60 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff ff5a 	bl	8001fd4 <LL_ADC_IsInternalRegulatorEnabled>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d115      	bne.n	8002152 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff ff3e 	bl	8001fac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002130:	4b86      	ldr	r3, [pc, #536]	@ (800234c <HAL_ADC_Init+0x28c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	099b      	lsrs	r3, r3, #6
 8002136:	4a86      	ldr	r2, [pc, #536]	@ (8002350 <HAL_ADC_Init+0x290>)
 8002138:	fba2 2303 	umull	r2, r3, r2, r3
 800213c:	099b      	lsrs	r3, r3, #6
 800213e:	3301      	adds	r3, #1
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002144:	e002      	b.n	800214c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	3b01      	subs	r3, #1
 800214a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f9      	bne.n	8002146 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff ff3c 	bl	8001fd4 <LL_ADC_IsInternalRegulatorEnabled>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d10d      	bne.n	800217e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002166:	f043 0210 	orr.w	r2, r3, #16
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002172:	f043 0201 	orr.w	r2, r3, #1
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff ff75 	bl	8002072 <LL_ADC_REG_IsConversionOngoing>
 8002188:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800218e:	f003 0310 	and.w	r3, r3, #16
 8002192:	2b00      	cmp	r3, #0
 8002194:	f040 80cc 	bne.w	8002330 <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	2b00      	cmp	r3, #0
 800219c:	f040 80c8 	bne.w	8002330 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80021a8:	f043 0202 	orr.w	r2, r3, #2
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff ff35 	bl	8002024 <LL_ADC_IsEnabled>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d115      	bne.n	80021ec <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021c0:	4864      	ldr	r0, [pc, #400]	@ (8002354 <HAL_ADC_Init+0x294>)
 80021c2:	f7ff ff2f 	bl	8002024 <LL_ADC_IsEnabled>
 80021c6:	4604      	mov	r4, r0
 80021c8:	4863      	ldr	r0, [pc, #396]	@ (8002358 <HAL_ADC_Init+0x298>)
 80021ca:	f7ff ff2b 	bl	8002024 <LL_ADC_IsEnabled>
 80021ce:	4603      	mov	r3, r0
 80021d0:	431c      	orrs	r4, r3
 80021d2:	4862      	ldr	r0, [pc, #392]	@ (800235c <HAL_ADC_Init+0x29c>)
 80021d4:	f7ff ff26 	bl	8002024 <LL_ADC_IsEnabled>
 80021d8:	4603      	mov	r3, r0
 80021da:	4323      	orrs	r3, r4
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d105      	bne.n	80021ec <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	4619      	mov	r1, r3
 80021e6:	485e      	ldr	r0, [pc, #376]	@ (8002360 <HAL_ADC_Init+0x2a0>)
 80021e8:	f7ff fd82 	bl	8001cf0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	7e5b      	ldrb	r3, [r3, #25]
 80021f0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021f6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80021fc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002202:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 3020 	ldrb.w	r3, [r3, #32]
 800220a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800220c:	4313      	orrs	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d106      	bne.n	8002228 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800221e:	3b01      	subs	r3, #1
 8002220:	045b      	lsls	r3, r3, #17
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4313      	orrs	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800222c:	2b00      	cmp	r3, #0
 800222e:	d009      	beq.n	8002244 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002234:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800223c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4313      	orrs	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68da      	ldr	r2, [r3, #12]
 800224a:	4b46      	ldr	r3, [pc, #280]	@ (8002364 <HAL_ADC_Init+0x2a4>)
 800224c:	4013      	ands	r3, r2
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6812      	ldr	r2, [r2, #0]
 8002252:	69b9      	ldr	r1, [r7, #24]
 8002254:	430b      	orrs	r3, r1
 8002256:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff ff1b 	bl	8002098 <LL_ADC_INJ_IsConversionOngoing>
 8002262:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d140      	bne.n	80022ec <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d13d      	bne.n	80022ec <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	7e1b      	ldrb	r3, [r3, #24]
 8002278:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800227a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002282:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002284:	4313      	orrs	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002292:	f023 0306 	bic.w	r3, r3, #6
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	6812      	ldr	r2, [r2, #0]
 800229a:	69b9      	ldr	r1, [r7, #24]
 800229c:	430b      	orrs	r3, r1
 800229e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d118      	bne.n	80022dc <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80022b4:	f023 0304 	bic.w	r3, r3, #4
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80022c0:	4311      	orrs	r1, r2
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80022c6:	4311      	orrs	r1, r2
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80022cc:	430a      	orrs	r2, r1
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f042 0201 	orr.w	r2, r2, #1
 80022d8:	611a      	str	r2, [r3, #16]
 80022da:	e007      	b.n	80022ec <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	691a      	ldr	r2, [r3, #16]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 0201 	bic.w	r2, r2, #1
 80022ea:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d10c      	bne.n	800230e <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fa:	f023 010f 	bic.w	r1, r3, #15
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	1e5a      	subs	r2, r3, #1
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	430a      	orrs	r2, r1
 800230a:	631a      	str	r2, [r3, #48]	@ 0x30
 800230c:	e007      	b.n	800231e <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 020f 	bic.w	r2, r2, #15
 800231c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002322:	f023 0303 	bic.w	r3, r3, #3
 8002326:	f043 0201 	orr.w	r2, r3, #1
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	659a      	str	r2, [r3, #88]	@ 0x58
 800232e:	e007      	b.n	8002340 <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002334:	f043 0210 	orr.w	r2, r3, #16
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002340:	7ffb      	ldrb	r3, [r7, #31]
}
 8002342:	4618      	mov	r0, r3
 8002344:	3724      	adds	r7, #36	@ 0x24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd90      	pop	{r4, r7, pc}
 800234a:	bf00      	nop
 800234c:	20000000 	.word	0x20000000
 8002350:	053e2d63 	.word	0x053e2d63
 8002354:	50040000 	.word	0x50040000
 8002358:	50040100 	.word	0x50040100
 800235c:	50040200 	.word	0x50040200
 8002360:	50040300 	.word	0x50040300
 8002364:	fff0c007 	.word	0xfff0c007

08002368 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002374:	4853      	ldr	r0, [pc, #332]	@ (80024c4 <HAL_ADC_Start_DMA+0x15c>)
 8002376:	f7ff fde5 	bl	8001f44 <LL_ADC_GetMultimode>
 800237a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff fe76 	bl	8002072 <LL_ADC_REG_IsConversionOngoing>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	f040 8093 	bne.w	80024b4 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002394:	2b01      	cmp	r3, #1
 8002396:	d101      	bne.n	800239c <HAL_ADC_Start_DMA+0x34>
 8002398:	2302      	movs	r3, #2
 800239a:	e08e      	b.n	80024ba <HAL_ADC_Start_DMA+0x152>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a47      	ldr	r2, [pc, #284]	@ (80024c8 <HAL_ADC_Start_DMA+0x160>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d008      	beq.n	80023c0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d005      	beq.n	80023c0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	2b05      	cmp	r3, #5
 80023b8:	d002      	beq.n	80023c0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	2b09      	cmp	r3, #9
 80023be:	d172      	bne.n	80024a6 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f000 fca3 	bl	8002d0c <ADC_Enable>
 80023c6:	4603      	mov	r3, r0
 80023c8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80023ca:	7dfb      	ldrb	r3, [r7, #23]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d165      	bne.n	800249c <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80023d8:	f023 0301 	bic.w	r3, r3, #1
 80023dc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a38      	ldr	r2, [pc, #224]	@ (80024cc <HAL_ADC_Start_DMA+0x164>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d002      	beq.n	80023f4 <HAL_ADC_Start_DMA+0x8c>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	e000      	b.n	80023f6 <HAL_ADC_Start_DMA+0x8e>
 80023f4:	4b36      	ldr	r3, [pc, #216]	@ (80024d0 <HAL_ADC_Start_DMA+0x168>)
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	6812      	ldr	r2, [r2, #0]
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d002      	beq.n	8002404 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d105      	bne.n	8002410 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002408:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002414:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d006      	beq.n	800242a <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002420:	f023 0206 	bic.w	r2, r3, #6
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002428:	e002      	b.n	8002430 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002434:	4a27      	ldr	r2, [pc, #156]	@ (80024d4 <HAL_ADC_Start_DMA+0x16c>)
 8002436:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800243c:	4a26      	ldr	r2, [pc, #152]	@ (80024d8 <HAL_ADC_Start_DMA+0x170>)
 800243e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002444:	4a25      	ldr	r2, [pc, #148]	@ (80024dc <HAL_ADC_Start_DMA+0x174>)
 8002446:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	221c      	movs	r2, #28
 800244e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0210 	orr.w	r2, r2, #16
 8002466:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	68da      	ldr	r2, [r3, #12]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f042 0201 	orr.w	r2, r2, #1
 8002476:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	3340      	adds	r3, #64	@ 0x40
 8002482:	4619      	mov	r1, r3
 8002484:	68ba      	ldr	r2, [r7, #8]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f000 fffa 	bl	8003480 <HAL_DMA_Start_IT>
 800248c:	4603      	mov	r3, r0
 800248e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff fdd8 	bl	800204a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800249a:	e00d      	b.n	80024b8 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      if (tmp_hal_status == HAL_OK)
 80024a4:	e008      	b.n	80024b8 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80024b2:	e001      	b.n	80024b8 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80024b4:	2302      	movs	r3, #2
 80024b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80024b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	50040300 	.word	0x50040300
 80024c8:	50040200 	.word	0x50040200
 80024cc:	50040100 	.word	0x50040100
 80024d0:	50040000 	.word	0x50040000
 80024d4:	08002e19 	.word	0x08002e19
 80024d8:	08002ef1 	.word	0x08002ef1
 80024dc:	08002f0d 	.word	0x08002f0d

080024e0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b0b6      	sub	sp, #216	@ 0xd8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024fe:	2300      	movs	r3, #0
 8002500:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002504:	2300      	movs	r3, #0
 8002506:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800250e:	2b01      	cmp	r3, #1
 8002510:	d101      	bne.n	8002516 <HAL_ADC_ConfigChannel+0x22>
 8002512:	2302      	movs	r3, #2
 8002514:	e3e3      	b.n	8002cde <HAL_ADC_ConfigChannel+0x7ea>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff fda5 	bl	8002072 <LL_ADC_REG_IsConversionOngoing>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	f040 83c4 	bne.w	8002cb8 <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	2b05      	cmp	r3, #5
 800253e:	d824      	bhi.n	800258a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	3b02      	subs	r3, #2
 8002546:	2b03      	cmp	r3, #3
 8002548:	d81b      	bhi.n	8002582 <HAL_ADC_ConfigChannel+0x8e>
 800254a:	a201      	add	r2, pc, #4	@ (adr r2, 8002550 <HAL_ADC_ConfigChannel+0x5c>)
 800254c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002550:	08002561 	.word	0x08002561
 8002554:	08002569 	.word	0x08002569
 8002558:	08002571 	.word	0x08002571
 800255c:	08002579 	.word	0x08002579
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002560:	230c      	movs	r3, #12
 8002562:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002566:	e010      	b.n	800258a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002568:	2312      	movs	r3, #18
 800256a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800256e:	e00c      	b.n	800258a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002570:	2318      	movs	r3, #24
 8002572:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002576:	e008      	b.n	800258a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002578:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800257c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002580:	e003      	b.n	800258a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002582:	2306      	movs	r3, #6
 8002584:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002588:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6818      	ldr	r0, [r3, #0]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	461a      	mov	r2, r3
 8002594:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002598:	f7ff fc59 	bl	8001e4e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff fd66 	bl	8002072 <LL_ADC_REG_IsConversionOngoing>
 80025a6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff fd72 	bl	8002098 <LL_ADC_INJ_IsConversionOngoing>
 80025b4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f040 81bf 	bne.w	8002940 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f040 81ba 	bne.w	8002940 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80025d4:	d10f      	bne.n	80025f6 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6818      	ldr	r0, [r3, #0]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2200      	movs	r2, #0
 80025e0:	4619      	mov	r1, r3
 80025e2:	f7ff fc60 	bl	8001ea6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff fc07 	bl	8001e02 <LL_ADC_SetSamplingTimeCommonConfig>
 80025f4:	e00e      	b.n	8002614 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6818      	ldr	r0, [r3, #0]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	6819      	ldr	r1, [r3, #0]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	461a      	mov	r2, r3
 8002604:	f7ff fc4f 	bl	8001ea6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2100      	movs	r1, #0
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff fbf7 	bl	8001e02 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	695a      	ldr	r2, [r3, #20]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	08db      	lsrs	r3, r3, #3
 8002620:	f003 0303 	and.w	r3, r3, #3
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	2b04      	cmp	r3, #4
 8002634:	d00a      	beq.n	800264c <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6818      	ldr	r0, [r3, #0]
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	6919      	ldr	r1, [r3, #16]
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002646:	f7ff fb87 	bl	8001d58 <LL_ADC_SetOffset>
 800264a:	e179      	b.n	8002940 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2100      	movs	r1, #0
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff fba4 	bl	8001da0 <LL_ADC_GetOffsetChannel>
 8002658:	4603      	mov	r3, r0
 800265a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10a      	bne.n	8002678 <HAL_ADC_ConfigChannel+0x184>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2100      	movs	r1, #0
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff fb99 	bl	8001da0 <LL_ADC_GetOffsetChannel>
 800266e:	4603      	mov	r3, r0
 8002670:	0e9b      	lsrs	r3, r3, #26
 8002672:	f003 021f 	and.w	r2, r3, #31
 8002676:	e01e      	b.n	80026b6 <HAL_ADC_ConfigChannel+0x1c2>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2100      	movs	r1, #0
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff fb8e 	bl	8001da0 <LL_ADC_GetOffsetChannel>
 8002684:	4603      	mov	r3, r0
 8002686:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800268e:	fa93 f3a3 	rbit	r3, r3
 8002692:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002696:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800269a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800269e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80026a6:	2320      	movs	r3, #32
 80026a8:	e004      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80026aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80026ae:	fab3 f383 	clz	r3, r3
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d105      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x1da>
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	0e9b      	lsrs	r3, r3, #26
 80026c8:	f003 031f 	and.w	r3, r3, #31
 80026cc:	e018      	b.n	8002700 <HAL_ADC_ConfigChannel+0x20c>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80026da:	fa93 f3a3 	rbit	r3, r3
 80026de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80026e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80026e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80026ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80026f2:	2320      	movs	r3, #32
 80026f4:	e004      	b.n	8002700 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80026f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80026fa:	fab3 f383 	clz	r3, r3
 80026fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002700:	429a      	cmp	r2, r3
 8002702:	d106      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2200      	movs	r2, #0
 800270a:	2100      	movs	r1, #0
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff fb5d 	bl	8001dcc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2101      	movs	r1, #1
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff fb41 	bl	8001da0 <LL_ADC_GetOffsetChannel>
 800271e:	4603      	mov	r3, r0
 8002720:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10a      	bne.n	800273e <HAL_ADC_ConfigChannel+0x24a>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2101      	movs	r1, #1
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff fb36 	bl	8001da0 <LL_ADC_GetOffsetChannel>
 8002734:	4603      	mov	r3, r0
 8002736:	0e9b      	lsrs	r3, r3, #26
 8002738:	f003 021f 	and.w	r2, r3, #31
 800273c:	e01e      	b.n	800277c <HAL_ADC_ConfigChannel+0x288>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2101      	movs	r1, #1
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff fb2b 	bl	8001da0 <LL_ADC_GetOffsetChannel>
 800274a:	4603      	mov	r3, r0
 800274c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002750:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002754:	fa93 f3a3 	rbit	r3, r3
 8002758:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800275c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002760:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002764:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 800276c:	2320      	movs	r3, #32
 800276e:	e004      	b.n	800277a <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002770:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002774:	fab3 f383 	clz	r3, r3
 8002778:	b2db      	uxtb	r3, r3
 800277a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002784:	2b00      	cmp	r3, #0
 8002786:	d105      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x2a0>
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	0e9b      	lsrs	r3, r3, #26
 800278e:	f003 031f 	and.w	r3, r3, #31
 8002792:	e018      	b.n	80027c6 <HAL_ADC_ConfigChannel+0x2d2>
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80027a0:	fa93 f3a3 	rbit	r3, r3
 80027a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80027a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80027ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80027b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d101      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80027b8:	2320      	movs	r3, #32
 80027ba:	e004      	b.n	80027c6 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80027bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80027c0:	fab3 f383 	clz	r3, r3
 80027c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d106      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2200      	movs	r2, #0
 80027d0:	2101      	movs	r1, #1
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff fafa 	bl	8001dcc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2102      	movs	r1, #2
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff fade 	bl	8001da0 <LL_ADC_GetOffsetChannel>
 80027e4:	4603      	mov	r3, r0
 80027e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10a      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x310>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2102      	movs	r1, #2
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff fad3 	bl	8001da0 <LL_ADC_GetOffsetChannel>
 80027fa:	4603      	mov	r3, r0
 80027fc:	0e9b      	lsrs	r3, r3, #26
 80027fe:	f003 021f 	and.w	r2, r3, #31
 8002802:	e01e      	b.n	8002842 <HAL_ADC_ConfigChannel+0x34e>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2102      	movs	r1, #2
 800280a:	4618      	mov	r0, r3
 800280c:	f7ff fac8 	bl	8001da0 <LL_ADC_GetOffsetChannel>
 8002810:	4603      	mov	r3, r0
 8002812:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002816:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800281a:	fa93 f3a3 	rbit	r3, r3
 800281e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002822:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002826:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800282a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002832:	2320      	movs	r3, #32
 8002834:	e004      	b.n	8002840 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002836:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800283a:	fab3 f383 	clz	r3, r3
 800283e:	b2db      	uxtb	r3, r3
 8002840:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800284a:	2b00      	cmp	r3, #0
 800284c:	d105      	bne.n	800285a <HAL_ADC_ConfigChannel+0x366>
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	0e9b      	lsrs	r3, r3, #26
 8002854:	f003 031f 	and.w	r3, r3, #31
 8002858:	e014      	b.n	8002884 <HAL_ADC_ConfigChannel+0x390>
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002860:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002862:	fa93 f3a3 	rbit	r3, r3
 8002866:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002868:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800286a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800286e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002876:	2320      	movs	r3, #32
 8002878:	e004      	b.n	8002884 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800287a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800287e:	fab3 f383 	clz	r3, r3
 8002882:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002884:	429a      	cmp	r2, r3
 8002886:	d106      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2200      	movs	r2, #0
 800288e:	2102      	movs	r1, #2
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff fa9b 	bl	8001dcc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2103      	movs	r1, #3
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff fa7f 	bl	8001da0 <LL_ADC_GetOffsetChannel>
 80028a2:	4603      	mov	r3, r0
 80028a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10a      	bne.n	80028c2 <HAL_ADC_ConfigChannel+0x3ce>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2103      	movs	r1, #3
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff fa74 	bl	8001da0 <LL_ADC_GetOffsetChannel>
 80028b8:	4603      	mov	r3, r0
 80028ba:	0e9b      	lsrs	r3, r3, #26
 80028bc:	f003 021f 	and.w	r2, r3, #31
 80028c0:	e017      	b.n	80028f2 <HAL_ADC_ConfigChannel+0x3fe>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2103      	movs	r1, #3
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff fa69 	bl	8001da0 <LL_ADC_GetOffsetChannel>
 80028ce:	4603      	mov	r3, r0
 80028d0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80028d4:	fa93 f3a3 	rbit	r3, r3
 80028d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80028da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028dc:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80028de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80028e4:	2320      	movs	r3, #32
 80028e6:	e003      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80028e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028ea:	fab3 f383 	clz	r3, r3
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d105      	bne.n	800290a <HAL_ADC_ConfigChannel+0x416>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	0e9b      	lsrs	r3, r3, #26
 8002904:	f003 031f 	and.w	r3, r3, #31
 8002908:	e011      	b.n	800292e <HAL_ADC_ConfigChannel+0x43a>
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002910:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002912:	fa93 f3a3 	rbit	r3, r3
 8002916:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002918:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800291a:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800291c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002922:	2320      	movs	r3, #32
 8002924:	e003      	b.n	800292e <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002926:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002928:	fab3 f383 	clz	r3, r3
 800292c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800292e:	429a      	cmp	r2, r3
 8002930:	d106      	bne.n	8002940 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2200      	movs	r2, #0
 8002938:	2103      	movs	r1, #3
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff fa46 	bl	8001dcc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff fb6d 	bl	8002024 <LL_ADC_IsEnabled>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	f040 813f 	bne.w	8002bd0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6818      	ldr	r0, [r3, #0]
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	6819      	ldr	r1, [r3, #0]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	461a      	mov	r2, r3
 8002960:	f7ff facc 	bl	8001efc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	4a8e      	ldr	r2, [pc, #568]	@ (8002ba4 <HAL_ADC_ConfigChannel+0x6b0>)
 800296a:	4293      	cmp	r3, r2
 800296c:	f040 8130 	bne.w	8002bd0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10b      	bne.n	8002998 <HAL_ADC_ConfigChannel+0x4a4>
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	0e9b      	lsrs	r3, r3, #26
 8002986:	3301      	adds	r3, #1
 8002988:	f003 031f 	and.w	r3, r3, #31
 800298c:	2b09      	cmp	r3, #9
 800298e:	bf94      	ite	ls
 8002990:	2301      	movls	r3, #1
 8002992:	2300      	movhi	r3, #0
 8002994:	b2db      	uxtb	r3, r3
 8002996:	e019      	b.n	80029cc <HAL_ADC_ConfigChannel+0x4d8>
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029a0:	fa93 f3a3 	rbit	r3, r3
 80029a4:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80029a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80029aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80029b0:	2320      	movs	r3, #32
 80029b2:	e003      	b.n	80029bc <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80029b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029b6:	fab3 f383 	clz	r3, r3
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	3301      	adds	r3, #1
 80029be:	f003 031f 	and.w	r3, r3, #31
 80029c2:	2b09      	cmp	r3, #9
 80029c4:	bf94      	ite	ls
 80029c6:	2301      	movls	r3, #1
 80029c8:	2300      	movhi	r3, #0
 80029ca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d079      	beq.n	8002ac4 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d107      	bne.n	80029ec <HAL_ADC_ConfigChannel+0x4f8>
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	0e9b      	lsrs	r3, r3, #26
 80029e2:	3301      	adds	r3, #1
 80029e4:	069b      	lsls	r3, r3, #26
 80029e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029ea:	e015      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x524>
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029f4:	fa93 f3a3 	rbit	r3, r3
 80029f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80029fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029fc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80029fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d101      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002a04:	2320      	movs	r3, #32
 8002a06:	e003      	b.n	8002a10 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002a08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a0a:	fab3 f383 	clz	r3, r3
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	3301      	adds	r3, #1
 8002a12:	069b      	lsls	r3, r3, #26
 8002a14:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d109      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x544>
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	0e9b      	lsrs	r3, r3, #26
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	f003 031f 	and.w	r3, r3, #31
 8002a30:	2101      	movs	r1, #1
 8002a32:	fa01 f303 	lsl.w	r3, r1, r3
 8002a36:	e017      	b.n	8002a68 <HAL_ADC_ConfigChannel+0x574>
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a40:	fa93 f3a3 	rbit	r3, r3
 8002a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002a46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a48:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002a4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d101      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002a50:	2320      	movs	r3, #32
 8002a52:	e003      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002a54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a56:	fab3 f383 	clz	r3, r3
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	f003 031f 	and.w	r3, r3, #31
 8002a62:	2101      	movs	r1, #1
 8002a64:	fa01 f303 	lsl.w	r3, r1, r3
 8002a68:	ea42 0103 	orr.w	r1, r2, r3
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d10a      	bne.n	8002a8e <HAL_ADC_ConfigChannel+0x59a>
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	0e9b      	lsrs	r3, r3, #26
 8002a7e:	3301      	adds	r3, #1
 8002a80:	f003 021f 	and.w	r2, r3, #31
 8002a84:	4613      	mov	r3, r2
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	4413      	add	r3, r2
 8002a8a:	051b      	lsls	r3, r3, #20
 8002a8c:	e018      	b.n	8002ac0 <HAL_ADC_ConfigChannel+0x5cc>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a96:	fa93 f3a3 	rbit	r3, r3
 8002a9a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002aa6:	2320      	movs	r3, #32
 8002aa8:	e003      	b.n	8002ab2 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aac:	fab3 f383 	clz	r3, r3
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	f003 021f 	and.w	r2, r3, #31
 8002ab8:	4613      	mov	r3, r2
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	4413      	add	r3, r2
 8002abe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ac0:	430b      	orrs	r3, r1
 8002ac2:	e080      	b.n	8002bc6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d107      	bne.n	8002ae0 <HAL_ADC_ConfigChannel+0x5ec>
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	0e9b      	lsrs	r3, r3, #26
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	069b      	lsls	r3, r3, #26
 8002ada:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ade:	e015      	b.n	8002b0c <HAL_ADC_ConfigChannel+0x618>
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ae8:	fa93 f3a3 	rbit	r3, r3
 8002aec:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002af8:	2320      	movs	r3, #32
 8002afa:	e003      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002afe:	fab3 f383 	clz	r3, r3
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	3301      	adds	r3, #1
 8002b06:	069b      	lsls	r3, r3, #26
 8002b08:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d109      	bne.n	8002b2c <HAL_ADC_ConfigChannel+0x638>
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	0e9b      	lsrs	r3, r3, #26
 8002b1e:	3301      	adds	r3, #1
 8002b20:	f003 031f 	and.w	r3, r3, #31
 8002b24:	2101      	movs	r1, #1
 8002b26:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2a:	e017      	b.n	8002b5c <HAL_ADC_ConfigChannel+0x668>
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	fa93 f3a3 	rbit	r3, r3
 8002b38:	61bb      	str	r3, [r7, #24]
  return result;
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002b3e:	6a3b      	ldr	r3, [r7, #32]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d101      	bne.n	8002b48 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002b44:	2320      	movs	r3, #32
 8002b46:	e003      	b.n	8002b50 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002b48:	6a3b      	ldr	r3, [r7, #32]
 8002b4a:	fab3 f383 	clz	r3, r3
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	3301      	adds	r3, #1
 8002b52:	f003 031f 	and.w	r3, r3, #31
 8002b56:	2101      	movs	r1, #1
 8002b58:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5c:	ea42 0103 	orr.w	r1, r2, r3
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10d      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x694>
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	0e9b      	lsrs	r3, r3, #26
 8002b72:	3301      	adds	r3, #1
 8002b74:	f003 021f 	and.w	r2, r3, #31
 8002b78:	4613      	mov	r3, r2
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	4413      	add	r3, r2
 8002b7e:	3b1e      	subs	r3, #30
 8002b80:	051b      	lsls	r3, r3, #20
 8002b82:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b86:	e01d      	b.n	8002bc4 <HAL_ADC_ConfigChannel+0x6d0>
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	fa93 f3a3 	rbit	r3, r3
 8002b94:	60fb      	str	r3, [r7, #12]
  return result;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d103      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002ba0:	2320      	movs	r3, #32
 8002ba2:	e005      	b.n	8002bb0 <HAL_ADC_ConfigChannel+0x6bc>
 8002ba4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	fab3 f383 	clz	r3, r3
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	f003 021f 	and.w	r2, r3, #31
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	4413      	add	r3, r2
 8002bbc:	3b1e      	subs	r3, #30
 8002bbe:	051b      	lsls	r3, r3, #20
 8002bc0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bc4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bca:	4619      	mov	r1, r3
 8002bcc:	f7ff f96b 	bl	8001ea6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	4b44      	ldr	r3, [pc, #272]	@ (8002ce8 <HAL_ADC_ConfigChannel+0x7f4>)
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d07a      	beq.n	8002cd2 <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002bdc:	4843      	ldr	r0, [pc, #268]	@ (8002cec <HAL_ADC_ConfigChannel+0x7f8>)
 8002bde:	f7ff f8ad 	bl	8001d3c <LL_ADC_GetCommonPathInternalCh>
 8002be2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a41      	ldr	r2, [pc, #260]	@ (8002cf0 <HAL_ADC_ConfigChannel+0x7fc>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d12c      	bne.n	8002c4a <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002bf0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002bf4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d126      	bne.n	8002c4a <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a3c      	ldr	r2, [pc, #240]	@ (8002cf4 <HAL_ADC_ConfigChannel+0x800>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d004      	beq.n	8002c10 <HAL_ADC_ConfigChannel+0x71c>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a3b      	ldr	r2, [pc, #236]	@ (8002cf8 <HAL_ADC_ConfigChannel+0x804>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d15d      	bne.n	8002ccc <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c14:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4834      	ldr	r0, [pc, #208]	@ (8002cec <HAL_ADC_ConfigChannel+0x7f8>)
 8002c1c:	f7ff f87b 	bl	8001d16 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c20:	4b36      	ldr	r3, [pc, #216]	@ (8002cfc <HAL_ADC_ConfigChannel+0x808>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	099b      	lsrs	r3, r3, #6
 8002c26:	4a36      	ldr	r2, [pc, #216]	@ (8002d00 <HAL_ADC_ConfigChannel+0x80c>)
 8002c28:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2c:	099b      	lsrs	r3, r3, #6
 8002c2e:	1c5a      	adds	r2, r3, #1
 8002c30:	4613      	mov	r3, r2
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	4413      	add	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002c3a:	e002      	b.n	8002c42 <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1f9      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c48:	e040      	b.n	8002ccc <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a2d      	ldr	r2, [pc, #180]	@ (8002d04 <HAL_ADC_ConfigChannel+0x810>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d118      	bne.n	8002c86 <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d112      	bne.n	8002c86 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a23      	ldr	r2, [pc, #140]	@ (8002cf4 <HAL_ADC_ConfigChannel+0x800>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d004      	beq.n	8002c74 <HAL_ADC_ConfigChannel+0x780>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a22      	ldr	r2, [pc, #136]	@ (8002cf8 <HAL_ADC_ConfigChannel+0x804>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d12d      	bne.n	8002cd0 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c78:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	481b      	ldr	r0, [pc, #108]	@ (8002cec <HAL_ADC_ConfigChannel+0x7f8>)
 8002c80:	f7ff f849 	bl	8001d16 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c84:	e024      	b.n	8002cd0 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a1f      	ldr	r2, [pc, #124]	@ (8002d08 <HAL_ADC_ConfigChannel+0x814>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d120      	bne.n	8002cd2 <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d11a      	bne.n	8002cd2 <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a14      	ldr	r2, [pc, #80]	@ (8002cf4 <HAL_ADC_ConfigChannel+0x800>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d115      	bne.n	8002cd2 <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ca6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002caa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002cae:	4619      	mov	r1, r3
 8002cb0:	480e      	ldr	r0, [pc, #56]	@ (8002cec <HAL_ADC_ConfigChannel+0x7f8>)
 8002cb2:	f7ff f830 	bl	8001d16 <LL_ADC_SetCommonPathInternalCh>
 8002cb6:	e00c      	b.n	8002cd2 <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cbc:	f043 0220 	orr.w	r2, r3, #32
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002cca:	e002      	b.n	8002cd2 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ccc:	bf00      	nop
 8002cce:	e000      	b.n	8002cd2 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cd0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002cda:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	37d8      	adds	r7, #216	@ 0xd8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	80080000 	.word	0x80080000
 8002cec:	50040300 	.word	0x50040300
 8002cf0:	c7520000 	.word	0xc7520000
 8002cf4:	50040000 	.word	0x50040000
 8002cf8:	50040200 	.word	0x50040200
 8002cfc:	20000000 	.word	0x20000000
 8002d00:	053e2d63 	.word	0x053e2d63
 8002d04:	cb840000 	.word	0xcb840000
 8002d08:	80000001 	.word	0x80000001

08002d0c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002d14:	2300      	movs	r3, #0
 8002d16:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff f981 	bl	8002024 <LL_ADC_IsEnabled>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d169      	bne.n	8002dfc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689a      	ldr	r2, [r3, #8]
 8002d2e:	4b36      	ldr	r3, [pc, #216]	@ (8002e08 <ADC_Enable+0xfc>)
 8002d30:	4013      	ands	r3, r2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00d      	beq.n	8002d52 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d3a:	f043 0210 	orr.w	r2, r3, #16
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d46:	f043 0201 	orr.w	r2, r3, #1
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e055      	b.n	8002dfe <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff f950 	bl	8001ffc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002d5c:	482b      	ldr	r0, [pc, #172]	@ (8002e0c <ADC_Enable+0x100>)
 8002d5e:	f7fe ffed 	bl	8001d3c <LL_ADC_GetCommonPathInternalCh>
 8002d62:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002d64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d013      	beq.n	8002d94 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d6c:	4b28      	ldr	r3, [pc, #160]	@ (8002e10 <ADC_Enable+0x104>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	099b      	lsrs	r3, r3, #6
 8002d72:	4a28      	ldr	r2, [pc, #160]	@ (8002e14 <ADC_Enable+0x108>)
 8002d74:	fba2 2303 	umull	r2, r3, r2, r3
 8002d78:	099b      	lsrs	r3, r3, #6
 8002d7a:	1c5a      	adds	r2, r3, #1
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	4413      	add	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002d86:	e002      	b.n	8002d8e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1f9      	bne.n	8002d88 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002d94:	f7fe ff7c 	bl	8001c90 <HAL_GetTick>
 8002d98:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d9a:	e028      	b.n	8002dee <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff f93f 	bl	8002024 <LL_ADC_IsEnabled>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d104      	bne.n	8002db6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff f923 	bl	8001ffc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002db6:	f7fe ff6b 	bl	8001c90 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d914      	bls.n	8002dee <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d00d      	beq.n	8002dee <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dd6:	f043 0210 	orr.w	r2, r3, #16
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002de2:	f043 0201 	orr.w	r2, r3, #1
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e007      	b.n	8002dfe <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d1cf      	bne.n	8002d9c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	8000003f 	.word	0x8000003f
 8002e0c:	50040300 	.word	0x50040300
 8002e10:	20000000 	.word	0x20000000
 8002e14:	053e2d63 	.word	0x053e2d63

08002e18 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e24:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e2a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d14b      	bne.n	8002eca <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e36:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0308 	and.w	r3, r3, #8
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d021      	beq.n	8002e90 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7fe ffe9 	bl	8001e28 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d032      	beq.n	8002ec2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d12b      	bne.n	8002ec2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e6e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d11f      	bne.n	8002ec2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e86:	f043 0201 	orr.w	r2, r3, #1
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	659a      	str	r2, [r3, #88]	@ 0x58
 8002e8e:	e018      	b.n	8002ec2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d111      	bne.n	8002ec2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d105      	bne.n	8002ec2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eba:	f043 0201 	orr.w	r2, r3, #1
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f7fe fa6a 	bl	800139c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ec8:	e00e      	b.n	8002ee8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ece:	f003 0310 	and.w	r3, r3, #16
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f7ff fb02 	bl	80024e0 <HAL_ADC_ErrorCallback>
}
 8002edc:	e004      	b.n	8002ee8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ee2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	4798      	blx	r3
}
 8002ee8:	bf00      	nop
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002efc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f7fe fa22 	bl	8001348 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f04:	bf00      	nop
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f18:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f1e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f2a:	f043 0204 	orr.w	r2, r3, #4
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f7ff fad4 	bl	80024e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f38:	bf00      	nop
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <LL_ADC_IsEnabled>:
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d101      	bne.n	8002f58 <LL_ADC_IsEnabled+0x18>
 8002f54:	2301      	movs	r3, #1
 8002f56:	e000      	b.n	8002f5a <LL_ADC_IsEnabled+0x1a>
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <LL_ADC_REG_IsConversionOngoing>:
{
 8002f66:	b480      	push	{r7}
 8002f68:	b083      	sub	sp, #12
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 0304 	and.w	r3, r3, #4
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d101      	bne.n	8002f7e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e000      	b.n	8002f80 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002f8c:	b590      	push	{r4, r7, lr}
 8002f8e:	b0a1      	sub	sp, #132	@ 0x84
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f96:	2300      	movs	r3, #0
 8002f98:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d101      	bne.n	8002faa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	e093      	b.n	80030d2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a47      	ldr	r2, [pc, #284]	@ (80030dc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d102      	bne.n	8002fca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002fc4:	4b46      	ldr	r3, [pc, #280]	@ (80030e0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	e001      	b.n	8002fce <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10b      	bne.n	8002fec <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fd8:	f043 0220 	orr.w	r2, r3, #32
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e072      	b.n	80030d2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7ff ffb9 	bl	8002f66 <LL_ADC_REG_IsConversionOngoing>
 8002ff4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff ffb3 	bl	8002f66 <LL_ADC_REG_IsConversionOngoing>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d154      	bne.n	80030b0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003006:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003008:	2b00      	cmp	r3, #0
 800300a:	d151      	bne.n	80030b0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800300c:	4b35      	ldr	r3, [pc, #212]	@ (80030e4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800300e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d02c      	beq.n	8003072 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003018:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	6859      	ldr	r1, [r3, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800302a:	035b      	lsls	r3, r3, #13
 800302c:	430b      	orrs	r3, r1
 800302e:	431a      	orrs	r2, r3
 8003030:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003032:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003034:	4829      	ldr	r0, [pc, #164]	@ (80030dc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003036:	f7ff ff83 	bl	8002f40 <LL_ADC_IsEnabled>
 800303a:	4604      	mov	r4, r0
 800303c:	4828      	ldr	r0, [pc, #160]	@ (80030e0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800303e:	f7ff ff7f 	bl	8002f40 <LL_ADC_IsEnabled>
 8003042:	4603      	mov	r3, r0
 8003044:	431c      	orrs	r4, r3
 8003046:	4828      	ldr	r0, [pc, #160]	@ (80030e8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003048:	f7ff ff7a 	bl	8002f40 <LL_ADC_IsEnabled>
 800304c:	4603      	mov	r3, r0
 800304e:	4323      	orrs	r3, r4
 8003050:	2b00      	cmp	r3, #0
 8003052:	d137      	bne.n	80030c4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003054:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800305c:	f023 030f 	bic.w	r3, r3, #15
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	6811      	ldr	r1, [r2, #0]
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	6892      	ldr	r2, [r2, #8]
 8003068:	430a      	orrs	r2, r1
 800306a:	431a      	orrs	r2, r3
 800306c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800306e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003070:	e028      	b.n	80030c4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003072:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800307a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800307c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800307e:	4817      	ldr	r0, [pc, #92]	@ (80030dc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003080:	f7ff ff5e 	bl	8002f40 <LL_ADC_IsEnabled>
 8003084:	4604      	mov	r4, r0
 8003086:	4816      	ldr	r0, [pc, #88]	@ (80030e0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003088:	f7ff ff5a 	bl	8002f40 <LL_ADC_IsEnabled>
 800308c:	4603      	mov	r3, r0
 800308e:	431c      	orrs	r4, r3
 8003090:	4815      	ldr	r0, [pc, #84]	@ (80030e8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003092:	f7ff ff55 	bl	8002f40 <LL_ADC_IsEnabled>
 8003096:	4603      	mov	r3, r0
 8003098:	4323      	orrs	r3, r4
 800309a:	2b00      	cmp	r3, #0
 800309c:	d112      	bne.n	80030c4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800309e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80030a6:	f023 030f 	bic.w	r3, r3, #15
 80030aa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80030ac:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80030ae:	e009      	b.n	80030c4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b4:	f043 0220 	orr.w	r2, r3, #32
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80030c2:	e000      	b.n	80030c6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80030c4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80030ce:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3784      	adds	r7, #132	@ 0x84
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd90      	pop	{r4, r7, pc}
 80030da:	bf00      	nop
 80030dc:	50040000 	.word	0x50040000
 80030e0:	50040100 	.word	0x50040100
 80030e4:	50040300 	.word	0x50040300
 80030e8:	50040200 	.word	0x50040200

080030ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003130 <__NVIC_SetPriorityGrouping+0x44>)
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003108:	4013      	ands	r3, r2
 800310a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003114:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003118:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800311c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800311e:	4a04      	ldr	r2, [pc, #16]	@ (8003130 <__NVIC_SetPriorityGrouping+0x44>)
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	60d3      	str	r3, [r2, #12]
}
 8003124:	bf00      	nop
 8003126:	3714      	adds	r7, #20
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	e000ed00 	.word	0xe000ed00

08003134 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003138:	4b04      	ldr	r3, [pc, #16]	@ (800314c <__NVIC_GetPriorityGrouping+0x18>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	0a1b      	lsrs	r3, r3, #8
 800313e:	f003 0307 	and.w	r3, r3, #7
}
 8003142:	4618      	mov	r0, r3
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	e000ed00 	.word	0xe000ed00

08003150 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	4603      	mov	r3, r0
 8003158:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800315a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315e:	2b00      	cmp	r3, #0
 8003160:	db0b      	blt.n	800317a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003162:	79fb      	ldrb	r3, [r7, #7]
 8003164:	f003 021f 	and.w	r2, r3, #31
 8003168:	4907      	ldr	r1, [pc, #28]	@ (8003188 <__NVIC_EnableIRQ+0x38>)
 800316a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316e:	095b      	lsrs	r3, r3, #5
 8003170:	2001      	movs	r0, #1
 8003172:	fa00 f202 	lsl.w	r2, r0, r2
 8003176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	e000e100 	.word	0xe000e100

0800318c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	4603      	mov	r3, r0
 8003194:	6039      	str	r1, [r7, #0]
 8003196:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319c:	2b00      	cmp	r3, #0
 800319e:	db0a      	blt.n	80031b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	b2da      	uxtb	r2, r3
 80031a4:	490c      	ldr	r1, [pc, #48]	@ (80031d8 <__NVIC_SetPriority+0x4c>)
 80031a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031aa:	0112      	lsls	r2, r2, #4
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	440b      	add	r3, r1
 80031b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031b4:	e00a      	b.n	80031cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	4908      	ldr	r1, [pc, #32]	@ (80031dc <__NVIC_SetPriority+0x50>)
 80031bc:	79fb      	ldrb	r3, [r7, #7]
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	3b04      	subs	r3, #4
 80031c4:	0112      	lsls	r2, r2, #4
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	440b      	add	r3, r1
 80031ca:	761a      	strb	r2, [r3, #24]
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr
 80031d8:	e000e100 	.word	0xe000e100
 80031dc:	e000ed00 	.word	0xe000ed00

080031e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b089      	sub	sp, #36	@ 0x24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	f1c3 0307 	rsb	r3, r3, #7
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	bf28      	it	cs
 80031fe:	2304      	movcs	r3, #4
 8003200:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	3304      	adds	r3, #4
 8003206:	2b06      	cmp	r3, #6
 8003208:	d902      	bls.n	8003210 <NVIC_EncodePriority+0x30>
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	3b03      	subs	r3, #3
 800320e:	e000      	b.n	8003212 <NVIC_EncodePriority+0x32>
 8003210:	2300      	movs	r3, #0
 8003212:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003214:	f04f 32ff 	mov.w	r2, #4294967295
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	43da      	mvns	r2, r3
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	401a      	ands	r2, r3
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003228:	f04f 31ff 	mov.w	r1, #4294967295
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	fa01 f303 	lsl.w	r3, r1, r3
 8003232:	43d9      	mvns	r1, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003238:	4313      	orrs	r3, r2
         );
}
 800323a:	4618      	mov	r0, r3
 800323c:	3724      	adds	r7, #36	@ 0x24
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
	...

08003248 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	3b01      	subs	r3, #1
 8003254:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003258:	d301      	bcc.n	800325e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800325a:	2301      	movs	r3, #1
 800325c:	e00f      	b.n	800327e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800325e:	4a0a      	ldr	r2, [pc, #40]	@ (8003288 <SysTick_Config+0x40>)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3b01      	subs	r3, #1
 8003264:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003266:	210f      	movs	r1, #15
 8003268:	f04f 30ff 	mov.w	r0, #4294967295
 800326c:	f7ff ff8e 	bl	800318c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003270:	4b05      	ldr	r3, [pc, #20]	@ (8003288 <SysTick_Config+0x40>)
 8003272:	2200      	movs	r2, #0
 8003274:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003276:	4b04      	ldr	r3, [pc, #16]	@ (8003288 <SysTick_Config+0x40>)
 8003278:	2207      	movs	r2, #7
 800327a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	e000e010 	.word	0xe000e010

0800328c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f7ff ff29 	bl	80030ec <__NVIC_SetPriorityGrouping>
}
 800329a:	bf00      	nop
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b086      	sub	sp, #24
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	4603      	mov	r3, r0
 80032aa:	60b9      	str	r1, [r7, #8]
 80032ac:	607a      	str	r2, [r7, #4]
 80032ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80032b0:	2300      	movs	r3, #0
 80032b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032b4:	f7ff ff3e 	bl	8003134 <__NVIC_GetPriorityGrouping>
 80032b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	68b9      	ldr	r1, [r7, #8]
 80032be:	6978      	ldr	r0, [r7, #20]
 80032c0:	f7ff ff8e 	bl	80031e0 <NVIC_EncodePriority>
 80032c4:	4602      	mov	r2, r0
 80032c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032ca:	4611      	mov	r1, r2
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff ff5d 	bl	800318c <__NVIC_SetPriority>
}
 80032d2:	bf00      	nop
 80032d4:	3718      	adds	r7, #24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b082      	sub	sp, #8
 80032de:	af00      	add	r7, sp, #0
 80032e0:	4603      	mov	r3, r0
 80032e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff ff31 	bl	8003150 <__NVIC_EnableIRQ>
}
 80032ee:	bf00      	nop
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b082      	sub	sp, #8
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7ff ffa2 	bl	8003248 <SysTick_Config>
 8003304:	4603      	mov	r3, r0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
	...

08003310 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e098      	b.n	8003454 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	461a      	mov	r2, r3
 8003328:	4b4d      	ldr	r3, [pc, #308]	@ (8003460 <HAL_DMA_Init+0x150>)
 800332a:	429a      	cmp	r2, r3
 800332c:	d80f      	bhi.n	800334e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	461a      	mov	r2, r3
 8003334:	4b4b      	ldr	r3, [pc, #300]	@ (8003464 <HAL_DMA_Init+0x154>)
 8003336:	4413      	add	r3, r2
 8003338:	4a4b      	ldr	r2, [pc, #300]	@ (8003468 <HAL_DMA_Init+0x158>)
 800333a:	fba2 2303 	umull	r2, r3, r2, r3
 800333e:	091b      	lsrs	r3, r3, #4
 8003340:	009a      	lsls	r2, r3, #2
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a48      	ldr	r2, [pc, #288]	@ (800346c <HAL_DMA_Init+0x15c>)
 800334a:	641a      	str	r2, [r3, #64]	@ 0x40
 800334c:	e00e      	b.n	800336c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	461a      	mov	r2, r3
 8003354:	4b46      	ldr	r3, [pc, #280]	@ (8003470 <HAL_DMA_Init+0x160>)
 8003356:	4413      	add	r3, r2
 8003358:	4a43      	ldr	r2, [pc, #268]	@ (8003468 <HAL_DMA_Init+0x158>)
 800335a:	fba2 2303 	umull	r2, r3, r2, r3
 800335e:	091b      	lsrs	r3, r3, #4
 8003360:	009a      	lsls	r2, r3, #2
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a42      	ldr	r2, [pc, #264]	@ (8003474 <HAL_DMA_Init+0x164>)
 800336a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2202      	movs	r2, #2
 8003370:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003382:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003386:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003390:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800339c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033c6:	d039      	beq.n	800343c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033cc:	4a27      	ldr	r2, [pc, #156]	@ (800346c <HAL_DMA_Init+0x15c>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d11a      	bne.n	8003408 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80033d2:	4b29      	ldr	r3, [pc, #164]	@ (8003478 <HAL_DMA_Init+0x168>)
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033da:	f003 031c 	and.w	r3, r3, #28
 80033de:	210f      	movs	r1, #15
 80033e0:	fa01 f303 	lsl.w	r3, r1, r3
 80033e4:	43db      	mvns	r3, r3
 80033e6:	4924      	ldr	r1, [pc, #144]	@ (8003478 <HAL_DMA_Init+0x168>)
 80033e8:	4013      	ands	r3, r2
 80033ea:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80033ec:	4b22      	ldr	r3, [pc, #136]	@ (8003478 <HAL_DMA_Init+0x168>)
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6859      	ldr	r1, [r3, #4]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033f8:	f003 031c 	and.w	r3, r3, #28
 80033fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003400:	491d      	ldr	r1, [pc, #116]	@ (8003478 <HAL_DMA_Init+0x168>)
 8003402:	4313      	orrs	r3, r2
 8003404:	600b      	str	r3, [r1, #0]
 8003406:	e019      	b.n	800343c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003408:	4b1c      	ldr	r3, [pc, #112]	@ (800347c <HAL_DMA_Init+0x16c>)
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003410:	f003 031c 	and.w	r3, r3, #28
 8003414:	210f      	movs	r1, #15
 8003416:	fa01 f303 	lsl.w	r3, r1, r3
 800341a:	43db      	mvns	r3, r3
 800341c:	4917      	ldr	r1, [pc, #92]	@ (800347c <HAL_DMA_Init+0x16c>)
 800341e:	4013      	ands	r3, r2
 8003420:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003422:	4b16      	ldr	r3, [pc, #88]	@ (800347c <HAL_DMA_Init+0x16c>)
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6859      	ldr	r1, [r3, #4]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800342e:	f003 031c 	and.w	r3, r3, #28
 8003432:	fa01 f303 	lsl.w	r3, r1, r3
 8003436:	4911      	ldr	r1, [pc, #68]	@ (800347c <HAL_DMA_Init+0x16c>)
 8003438:	4313      	orrs	r3, r2
 800343a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3714      	adds	r7, #20
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	40020407 	.word	0x40020407
 8003464:	bffdfff8 	.word	0xbffdfff8
 8003468:	cccccccd 	.word	0xcccccccd
 800346c:	40020000 	.word	0x40020000
 8003470:	bffdfbf8 	.word	0xbffdfbf8
 8003474:	40020400 	.word	0x40020400
 8003478:	400200a8 	.word	0x400200a8
 800347c:	400204a8 	.word	0x400204a8

08003480 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
 800348c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800348e:	2300      	movs	r3, #0
 8003490:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003498:	2b01      	cmp	r3, #1
 800349a:	d101      	bne.n	80034a0 <HAL_DMA_Start_IT+0x20>
 800349c:	2302      	movs	r3, #2
 800349e:	e04b      	b.n	8003538 <HAL_DMA_Start_IT+0xb8>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d13a      	bne.n	800352a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2202      	movs	r2, #2
 80034b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0201 	bic.w	r2, r2, #1
 80034d0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	68b9      	ldr	r1, [r7, #8]
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	f000 f8e0 	bl	800369e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d008      	beq.n	80034f8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f042 020e 	orr.w	r2, r2, #14
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	e00f      	b.n	8003518 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 0204 	bic.w	r2, r2, #4
 8003506:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f042 020a 	orr.w	r2, r2, #10
 8003516:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f042 0201 	orr.w	r2, r2, #1
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	e005      	b.n	8003536 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003532:	2302      	movs	r3, #2
 8003534:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003536:	7dfb      	ldrb	r3, [r7, #23]
}
 8003538:	4618      	mov	r0, r3
 800353a:	3718      	adds	r7, #24
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800355c:	f003 031c 	and.w	r3, r3, #28
 8003560:	2204      	movs	r2, #4
 8003562:	409a      	lsls	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	4013      	ands	r3, r2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d026      	beq.n	80035ba <HAL_DMA_IRQHandler+0x7a>
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	f003 0304 	and.w	r3, r3, #4
 8003572:	2b00      	cmp	r3, #0
 8003574:	d021      	beq.n	80035ba <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0320 	and.w	r3, r3, #32
 8003580:	2b00      	cmp	r3, #0
 8003582:	d107      	bne.n	8003594 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 0204 	bic.w	r2, r2, #4
 8003592:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003598:	f003 021c 	and.w	r2, r3, #28
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a0:	2104      	movs	r1, #4
 80035a2:	fa01 f202 	lsl.w	r2, r1, r2
 80035a6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d071      	beq.n	8003694 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80035b8:	e06c      	b.n	8003694 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035be:	f003 031c 	and.w	r3, r3, #28
 80035c2:	2202      	movs	r2, #2
 80035c4:	409a      	lsls	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	4013      	ands	r3, r2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d02e      	beq.n	800362c <HAL_DMA_IRQHandler+0xec>
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d029      	beq.n	800362c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0320 	and.w	r3, r3, #32
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10b      	bne.n	80035fe <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 020a 	bic.w	r2, r2, #10
 80035f4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003602:	f003 021c 	and.w	r2, r3, #28
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360a:	2102      	movs	r1, #2
 800360c:	fa01 f202 	lsl.w	r2, r1, r2
 8003610:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800361e:	2b00      	cmp	r3, #0
 8003620:	d038      	beq.n	8003694 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800362a:	e033      	b.n	8003694 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003630:	f003 031c 	and.w	r3, r3, #28
 8003634:	2208      	movs	r2, #8
 8003636:	409a      	lsls	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4013      	ands	r3, r2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d02a      	beq.n	8003696 <HAL_DMA_IRQHandler+0x156>
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	f003 0308 	and.w	r3, r3, #8
 8003646:	2b00      	cmp	r3, #0
 8003648:	d025      	beq.n	8003696 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 020e 	bic.w	r2, r2, #14
 8003658:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800365e:	f003 021c 	and.w	r2, r3, #28
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003666:	2101      	movs	r1, #1
 8003668:	fa01 f202 	lsl.w	r2, r1, r2
 800366c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003688:	2b00      	cmp	r3, #0
 800368a:	d004      	beq.n	8003696 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003694:	bf00      	nop
 8003696:	bf00      	nop
}
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800369e:	b480      	push	{r7}
 80036a0:	b085      	sub	sp, #20
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	60f8      	str	r0, [r7, #12]
 80036a6:	60b9      	str	r1, [r7, #8]
 80036a8:	607a      	str	r2, [r7, #4]
 80036aa:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036b0:	f003 021c 	and.w	r2, r3, #28
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b8:	2101      	movs	r1, #1
 80036ba:	fa01 f202 	lsl.w	r2, r1, r2
 80036be:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	2b10      	cmp	r3, #16
 80036ce:	d108      	bne.n	80036e2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80036e0:	e007      	b.n	80036f2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68ba      	ldr	r2, [r7, #8]
 80036e8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	60da      	str	r2, [r3, #12]
}
 80036f2:	bf00      	nop
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
	...

08003700 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003700:	b480      	push	{r7}
 8003702:	b087      	sub	sp, #28
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800370a:	2300      	movs	r3, #0
 800370c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800370e:	e166      	b.n	80039de <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	2101      	movs	r1, #1
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	fa01 f303 	lsl.w	r3, r1, r3
 800371c:	4013      	ands	r3, r2
 800371e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2b00      	cmp	r3, #0
 8003724:	f000 8158 	beq.w	80039d8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f003 0303 	and.w	r3, r3, #3
 8003730:	2b01      	cmp	r3, #1
 8003732:	d005      	beq.n	8003740 <HAL_GPIO_Init+0x40>
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f003 0303 	and.w	r3, r3, #3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d130      	bne.n	80037a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	2203      	movs	r2, #3
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	43db      	mvns	r3, r3
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	4013      	ands	r3, r2
 8003756:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	68da      	ldr	r2, [r3, #12]
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	4313      	orrs	r3, r2
 8003768:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003776:	2201      	movs	r2, #1
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	fa02 f303 	lsl.w	r3, r2, r3
 800377e:	43db      	mvns	r3, r3
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	4013      	ands	r3, r2
 8003784:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	091b      	lsrs	r3, r3, #4
 800378c:	f003 0201 	and.w	r2, r3, #1
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	fa02 f303 	lsl.w	r3, r2, r3
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	4313      	orrs	r3, r2
 800379a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f003 0303 	and.w	r3, r3, #3
 80037aa:	2b03      	cmp	r3, #3
 80037ac:	d017      	beq.n	80037de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	2203      	movs	r2, #3
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	43db      	mvns	r3, r3
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	4013      	ands	r3, r2
 80037c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	689a      	ldr	r2, [r3, #8]
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	fa02 f303 	lsl.w	r3, r2, r3
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f003 0303 	and.w	r3, r3, #3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d123      	bne.n	8003832 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	08da      	lsrs	r2, r3, #3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	3208      	adds	r2, #8
 80037f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f003 0307 	and.w	r3, r3, #7
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	220f      	movs	r2, #15
 8003802:	fa02 f303 	lsl.w	r3, r2, r3
 8003806:	43db      	mvns	r3, r3
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	4013      	ands	r3, r2
 800380c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	691a      	ldr	r2, [r3, #16]
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	fa02 f303 	lsl.w	r3, r2, r3
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	4313      	orrs	r3, r2
 8003822:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	08da      	lsrs	r2, r3, #3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3208      	adds	r2, #8
 800382c:	6939      	ldr	r1, [r7, #16]
 800382e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	2203      	movs	r2, #3
 800383e:	fa02 f303 	lsl.w	r3, r2, r3
 8003842:	43db      	mvns	r3, r3
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	4013      	ands	r3, r2
 8003848:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f003 0203 	and.w	r2, r3, #3
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	fa02 f303 	lsl.w	r3, r2, r3
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	4313      	orrs	r3, r2
 800385e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 80b2 	beq.w	80039d8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003874:	4b61      	ldr	r3, [pc, #388]	@ (80039fc <HAL_GPIO_Init+0x2fc>)
 8003876:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003878:	4a60      	ldr	r2, [pc, #384]	@ (80039fc <HAL_GPIO_Init+0x2fc>)
 800387a:	f043 0301 	orr.w	r3, r3, #1
 800387e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003880:	4b5e      	ldr	r3, [pc, #376]	@ (80039fc <HAL_GPIO_Init+0x2fc>)
 8003882:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	60bb      	str	r3, [r7, #8]
 800388a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800388c:	4a5c      	ldr	r2, [pc, #368]	@ (8003a00 <HAL_GPIO_Init+0x300>)
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	089b      	lsrs	r3, r3, #2
 8003892:	3302      	adds	r3, #2
 8003894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003898:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f003 0303 	and.w	r3, r3, #3
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	220f      	movs	r2, #15
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	43db      	mvns	r3, r3
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	4013      	ands	r3, r2
 80038ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80038b6:	d02b      	beq.n	8003910 <HAL_GPIO_Init+0x210>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a52      	ldr	r2, [pc, #328]	@ (8003a04 <HAL_GPIO_Init+0x304>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d025      	beq.n	800390c <HAL_GPIO_Init+0x20c>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a51      	ldr	r2, [pc, #324]	@ (8003a08 <HAL_GPIO_Init+0x308>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d01f      	beq.n	8003908 <HAL_GPIO_Init+0x208>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a50      	ldr	r2, [pc, #320]	@ (8003a0c <HAL_GPIO_Init+0x30c>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d019      	beq.n	8003904 <HAL_GPIO_Init+0x204>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a4f      	ldr	r2, [pc, #316]	@ (8003a10 <HAL_GPIO_Init+0x310>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d013      	beq.n	8003900 <HAL_GPIO_Init+0x200>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a4e      	ldr	r2, [pc, #312]	@ (8003a14 <HAL_GPIO_Init+0x314>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d00d      	beq.n	80038fc <HAL_GPIO_Init+0x1fc>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a4d      	ldr	r2, [pc, #308]	@ (8003a18 <HAL_GPIO_Init+0x318>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d007      	beq.n	80038f8 <HAL_GPIO_Init+0x1f8>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a4c      	ldr	r2, [pc, #304]	@ (8003a1c <HAL_GPIO_Init+0x31c>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d101      	bne.n	80038f4 <HAL_GPIO_Init+0x1f4>
 80038f0:	2307      	movs	r3, #7
 80038f2:	e00e      	b.n	8003912 <HAL_GPIO_Init+0x212>
 80038f4:	2308      	movs	r3, #8
 80038f6:	e00c      	b.n	8003912 <HAL_GPIO_Init+0x212>
 80038f8:	2306      	movs	r3, #6
 80038fa:	e00a      	b.n	8003912 <HAL_GPIO_Init+0x212>
 80038fc:	2305      	movs	r3, #5
 80038fe:	e008      	b.n	8003912 <HAL_GPIO_Init+0x212>
 8003900:	2304      	movs	r3, #4
 8003902:	e006      	b.n	8003912 <HAL_GPIO_Init+0x212>
 8003904:	2303      	movs	r3, #3
 8003906:	e004      	b.n	8003912 <HAL_GPIO_Init+0x212>
 8003908:	2302      	movs	r3, #2
 800390a:	e002      	b.n	8003912 <HAL_GPIO_Init+0x212>
 800390c:	2301      	movs	r3, #1
 800390e:	e000      	b.n	8003912 <HAL_GPIO_Init+0x212>
 8003910:	2300      	movs	r3, #0
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	f002 0203 	and.w	r2, r2, #3
 8003918:	0092      	lsls	r2, r2, #2
 800391a:	4093      	lsls	r3, r2
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4313      	orrs	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003922:	4937      	ldr	r1, [pc, #220]	@ (8003a00 <HAL_GPIO_Init+0x300>)
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	089b      	lsrs	r3, r3, #2
 8003928:	3302      	adds	r3, #2
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003930:	4b3b      	ldr	r3, [pc, #236]	@ (8003a20 <HAL_GPIO_Init+0x320>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	43db      	mvns	r3, r3
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	4013      	ands	r3, r2
 800393e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	4313      	orrs	r3, r2
 8003952:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003954:	4a32      	ldr	r2, [pc, #200]	@ (8003a20 <HAL_GPIO_Init+0x320>)
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800395a:	4b31      	ldr	r3, [pc, #196]	@ (8003a20 <HAL_GPIO_Init+0x320>)
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	43db      	mvns	r3, r3
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	4013      	ands	r3, r2
 8003968:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	4313      	orrs	r3, r2
 800397c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800397e:	4a28      	ldr	r2, [pc, #160]	@ (8003a20 <HAL_GPIO_Init+0x320>)
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003984:	4b26      	ldr	r3, [pc, #152]	@ (8003a20 <HAL_GPIO_Init+0x320>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	43db      	mvns	r3, r3
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	4013      	ands	r3, r2
 8003992:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d003      	beq.n	80039a8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80039a8:	4a1d      	ldr	r2, [pc, #116]	@ (8003a20 <HAL_GPIO_Init+0x320>)
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80039ae:	4b1c      	ldr	r3, [pc, #112]	@ (8003a20 <HAL_GPIO_Init+0x320>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	43db      	mvns	r3, r3
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	4013      	ands	r3, r2
 80039bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d003      	beq.n	80039d2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80039d2:	4a13      	ldr	r2, [pc, #76]	@ (8003a20 <HAL_GPIO_Init+0x320>)
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	3301      	adds	r3, #1
 80039dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	fa22 f303 	lsr.w	r3, r2, r3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f47f ae91 	bne.w	8003710 <HAL_GPIO_Init+0x10>
  }
}
 80039ee:	bf00      	nop
 80039f0:	bf00      	nop
 80039f2:	371c      	adds	r7, #28
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	40021000 	.word	0x40021000
 8003a00:	40010000 	.word	0x40010000
 8003a04:	48000400 	.word	0x48000400
 8003a08:	48000800 	.word	0x48000800
 8003a0c:	48000c00 	.word	0x48000c00
 8003a10:	48001000 	.word	0x48001000
 8003a14:	48001400 	.word	0x48001400
 8003a18:	48001800 	.word	0x48001800
 8003a1c:	48001c00 	.word	0x48001c00
 8003a20:	40010400 	.word	0x40010400

08003a24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	807b      	strh	r3, [r7, #2]
 8003a30:	4613      	mov	r3, r2
 8003a32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a34:	787b      	ldrb	r3, [r7, #1]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d003      	beq.n	8003a42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a3a:	887a      	ldrh	r2, [r7, #2]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a40:	e002      	b.n	8003a48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a42:	887a      	ldrh	r2, [r7, #2]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003a58:	4b04      	ldr	r3, [pc, #16]	@ (8003a6c <HAL_PWREx_GetVoltageRange+0x18>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	40007000 	.word	0x40007000

08003a70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a7e:	d130      	bne.n	8003ae2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a80:	4b23      	ldr	r3, [pc, #140]	@ (8003b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003a88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a8c:	d038      	beq.n	8003b00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a8e:	4b20      	ldr	r3, [pc, #128]	@ (8003b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a96:	4a1e      	ldr	r2, [pc, #120]	@ (8003b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a98:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a9c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a9e:	4b1d      	ldr	r3, [pc, #116]	@ (8003b14 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2232      	movs	r2, #50	@ 0x32
 8003aa4:	fb02 f303 	mul.w	r3, r2, r3
 8003aa8:	4a1b      	ldr	r2, [pc, #108]	@ (8003b18 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003aae:	0c9b      	lsrs	r3, r3, #18
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ab4:	e002      	b.n	8003abc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003abc:	4b14      	ldr	r3, [pc, #80]	@ (8003b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ac4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ac8:	d102      	bne.n	8003ad0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1f2      	bne.n	8003ab6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8003b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ad8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003adc:	d110      	bne.n	8003b00 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e00f      	b.n	8003b02 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8003b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003aea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aee:	d007      	beq.n	8003b00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003af0:	4b07      	ldr	r3, [pc, #28]	@ (8003b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003af8:	4a05      	ldr	r2, [pc, #20]	@ (8003b10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003afa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003afe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3714      	adds	r7, #20
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	40007000 	.word	0x40007000
 8003b14:	20000000 	.word	0x20000000
 8003b18:	431bde83 	.word	0x431bde83

08003b1c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003b20:	4b05      	ldr	r3, [pc, #20]	@ (8003b38 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	4a04      	ldr	r2, [pc, #16]	@ (8003b38 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003b26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b2a:	6053      	str	r3, [r2, #4]
}
 8003b2c:	bf00      	nop
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	40007000 	.word	0x40007000

08003b3c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b088      	sub	sp, #32
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d102      	bne.n	8003b50 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	f000 bc08 	b.w	8004360 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b50:	4b96      	ldr	r3, [pc, #600]	@ (8003dac <HAL_RCC_OscConfig+0x270>)
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f003 030c 	and.w	r3, r3, #12
 8003b58:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b5a:	4b94      	ldr	r3, [pc, #592]	@ (8003dac <HAL_RCC_OscConfig+0x270>)
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0310 	and.w	r3, r3, #16
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 80e4 	beq.w	8003d3a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d007      	beq.n	8003b88 <HAL_RCC_OscConfig+0x4c>
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	2b0c      	cmp	r3, #12
 8003b7c:	f040 808b 	bne.w	8003c96 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	f040 8087 	bne.w	8003c96 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b88:	4b88      	ldr	r3, [pc, #544]	@ (8003dac <HAL_RCC_OscConfig+0x270>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d005      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x64>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d101      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e3df      	b.n	8004360 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a1a      	ldr	r2, [r3, #32]
 8003ba4:	4b81      	ldr	r3, [pc, #516]	@ (8003dac <HAL_RCC_OscConfig+0x270>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0308 	and.w	r3, r3, #8
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d004      	beq.n	8003bba <HAL_RCC_OscConfig+0x7e>
 8003bb0:	4b7e      	ldr	r3, [pc, #504]	@ (8003dac <HAL_RCC_OscConfig+0x270>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bb8:	e005      	b.n	8003bc6 <HAL_RCC_OscConfig+0x8a>
 8003bba:	4b7c      	ldr	r3, [pc, #496]	@ (8003dac <HAL_RCC_OscConfig+0x270>)
 8003bbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bc0:	091b      	lsrs	r3, r3, #4
 8003bc2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d223      	bcs.n	8003c12 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f000 fd92 	bl	80046f8 <RCC_SetFlashLatencyFromMSIRange>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e3c0      	b.n	8004360 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bde:	4b73      	ldr	r3, [pc, #460]	@ (8003dac <HAL_RCC_OscConfig+0x270>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a72      	ldr	r2, [pc, #456]	@ (8003dac <HAL_RCC_OscConfig+0x270>)
 8003be4:	f043 0308 	orr.w	r3, r3, #8
 8003be8:	6013      	str	r3, [r2, #0]
 8003bea:	4b70      	ldr	r3, [pc, #448]	@ (8003dac <HAL_RCC_OscConfig+0x270>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	496d      	ldr	r1, [pc, #436]	@ (8003dac <HAL_RCC_OscConfig+0x270>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bfc:	4b6b      	ldr	r3, [pc, #428]	@ (8003dac <HAL_RCC_OscConfig+0x270>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	69db      	ldr	r3, [r3, #28]
 8003c08:	021b      	lsls	r3, r3, #8
 8003c0a:	4968      	ldr	r1, [pc, #416]	@ (8003dac <HAL_RCC_OscConfig+0x270>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	604b      	str	r3, [r1, #4]
 8003c10:	e025      	b.n	8003c5e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c12:	4b66      	ldr	r3, [pc, #408]	@ (8003dac <HAL_RCC_OscConfig+0x270>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a65      	ldr	r2, [pc, #404]	@ (8003dac <HAL_RCC_OscConfig+0x270>)
 8003c18:	f043 0308 	orr.w	r3, r3, #8
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	4b63      	ldr	r3, [pc, #396]	@ (8003dac <HAL_RCC_OscConfig+0x270>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	4960      	ldr	r1, [pc, #384]	@ (8003dac <HAL_RCC_OscConfig+0x270>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c30:	4b5e      	ldr	r3, [pc, #376]	@ (8003dac <HAL_RCC_OscConfig+0x270>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	69db      	ldr	r3, [r3, #28]
 8003c3c:	021b      	lsls	r3, r3, #8
 8003c3e:	495b      	ldr	r1, [pc, #364]	@ (8003dac <HAL_RCC_OscConfig+0x270>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d109      	bne.n	8003c5e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 fd52 	bl	80046f8 <RCC_SetFlashLatencyFromMSIRange>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e380      	b.n	8004360 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c5e:	f000 fc87 	bl	8004570 <HAL_RCC_GetSysClockFreq>
 8003c62:	4602      	mov	r2, r0
 8003c64:	4b51      	ldr	r3, [pc, #324]	@ (8003dac <HAL_RCC_OscConfig+0x270>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	091b      	lsrs	r3, r3, #4
 8003c6a:	f003 030f 	and.w	r3, r3, #15
 8003c6e:	4950      	ldr	r1, [pc, #320]	@ (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003c70:	5ccb      	ldrb	r3, [r1, r3]
 8003c72:	f003 031f 	and.w	r3, r3, #31
 8003c76:	fa22 f303 	lsr.w	r3, r2, r3
 8003c7a:	4a4e      	ldr	r2, [pc, #312]	@ (8003db4 <HAL_RCC_OscConfig+0x278>)
 8003c7c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003c7e:	4b4e      	ldr	r3, [pc, #312]	@ (8003db8 <HAL_RCC_OscConfig+0x27c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7fd ffb4 	bl	8001bf0 <HAL_InitTick>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003c8c:	7bfb      	ldrb	r3, [r7, #15]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d052      	beq.n	8003d38 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003c92:	7bfb      	ldrb	r3, [r7, #15]
 8003c94:	e364      	b.n	8004360 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d032      	beq.n	8003d04 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003c9e:	4b43      	ldr	r3, [pc, #268]	@ (8003dac <HAL_RCC_OscConfig+0x270>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a42      	ldr	r2, [pc, #264]	@ (8003dac <HAL_RCC_OscConfig+0x270>)
 8003ca4:	f043 0301 	orr.w	r3, r3, #1
 8003ca8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003caa:	f7fd fff1 	bl	8001c90 <HAL_GetTick>
 8003cae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cb0:	e008      	b.n	8003cc4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cb2:	f7fd ffed 	bl	8001c90 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d901      	bls.n	8003cc4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e34d      	b.n	8004360 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cc4:	4b39      	ldr	r3, [pc, #228]	@ (8003dac <HAL_RCC_OscConfig+0x270>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d0f0      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cd0:	4b36      	ldr	r3, [pc, #216]	@ (8003dac <HAL_RCC_OscConfig+0x270>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a35      	ldr	r2, [pc, #212]	@ (8003dac <HAL_RCC_OscConfig+0x270>)
 8003cd6:	f043 0308 	orr.w	r3, r3, #8
 8003cda:	6013      	str	r3, [r2, #0]
 8003cdc:	4b33      	ldr	r3, [pc, #204]	@ (8003dac <HAL_RCC_OscConfig+0x270>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	4930      	ldr	r1, [pc, #192]	@ (8003dac <HAL_RCC_OscConfig+0x270>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cee:	4b2f      	ldr	r3, [pc, #188]	@ (8003dac <HAL_RCC_OscConfig+0x270>)
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	021b      	lsls	r3, r3, #8
 8003cfc:	492b      	ldr	r1, [pc, #172]	@ (8003dac <HAL_RCC_OscConfig+0x270>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	604b      	str	r3, [r1, #4]
 8003d02:	e01a      	b.n	8003d3a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d04:	4b29      	ldr	r3, [pc, #164]	@ (8003dac <HAL_RCC_OscConfig+0x270>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a28      	ldr	r2, [pc, #160]	@ (8003dac <HAL_RCC_OscConfig+0x270>)
 8003d0a:	f023 0301 	bic.w	r3, r3, #1
 8003d0e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d10:	f7fd ffbe 	bl	8001c90 <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d16:	e008      	b.n	8003d2a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d18:	f7fd ffba 	bl	8001c90 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e31a      	b.n	8004360 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d2a:	4b20      	ldr	r3, [pc, #128]	@ (8003dac <HAL_RCC_OscConfig+0x270>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1f0      	bne.n	8003d18 <HAL_RCC_OscConfig+0x1dc>
 8003d36:	e000      	b.n	8003d3a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d38:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d073      	beq.n	8003e2e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	2b08      	cmp	r3, #8
 8003d4a:	d005      	beq.n	8003d58 <HAL_RCC_OscConfig+0x21c>
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	2b0c      	cmp	r3, #12
 8003d50:	d10e      	bne.n	8003d70 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	2b03      	cmp	r3, #3
 8003d56:	d10b      	bne.n	8003d70 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d58:	4b14      	ldr	r3, [pc, #80]	@ (8003dac <HAL_RCC_OscConfig+0x270>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d063      	beq.n	8003e2c <HAL_RCC_OscConfig+0x2f0>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d15f      	bne.n	8003e2c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e2f7      	b.n	8004360 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d78:	d106      	bne.n	8003d88 <HAL_RCC_OscConfig+0x24c>
 8003d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8003dac <HAL_RCC_OscConfig+0x270>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a0b      	ldr	r2, [pc, #44]	@ (8003dac <HAL_RCC_OscConfig+0x270>)
 8003d80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d84:	6013      	str	r3, [r2, #0]
 8003d86:	e025      	b.n	8003dd4 <HAL_RCC_OscConfig+0x298>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d90:	d114      	bne.n	8003dbc <HAL_RCC_OscConfig+0x280>
 8003d92:	4b06      	ldr	r3, [pc, #24]	@ (8003dac <HAL_RCC_OscConfig+0x270>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a05      	ldr	r2, [pc, #20]	@ (8003dac <HAL_RCC_OscConfig+0x270>)
 8003d98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d9c:	6013      	str	r3, [r2, #0]
 8003d9e:	4b03      	ldr	r3, [pc, #12]	@ (8003dac <HAL_RCC_OscConfig+0x270>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a02      	ldr	r2, [pc, #8]	@ (8003dac <HAL_RCC_OscConfig+0x270>)
 8003da4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003da8:	6013      	str	r3, [r2, #0]
 8003daa:	e013      	b.n	8003dd4 <HAL_RCC_OscConfig+0x298>
 8003dac:	40021000 	.word	0x40021000
 8003db0:	0800a414 	.word	0x0800a414
 8003db4:	20000000 	.word	0x20000000
 8003db8:	20000004 	.word	0x20000004
 8003dbc:	4ba0      	ldr	r3, [pc, #640]	@ (8004040 <HAL_RCC_OscConfig+0x504>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a9f      	ldr	r2, [pc, #636]	@ (8004040 <HAL_RCC_OscConfig+0x504>)
 8003dc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dc6:	6013      	str	r3, [r2, #0]
 8003dc8:	4b9d      	ldr	r3, [pc, #628]	@ (8004040 <HAL_RCC_OscConfig+0x504>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a9c      	ldr	r2, [pc, #624]	@ (8004040 <HAL_RCC_OscConfig+0x504>)
 8003dce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d013      	beq.n	8003e04 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ddc:	f7fd ff58 	bl	8001c90 <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003de4:	f7fd ff54 	bl	8001c90 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b64      	cmp	r3, #100	@ 0x64
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e2b4      	b.n	8004360 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003df6:	4b92      	ldr	r3, [pc, #584]	@ (8004040 <HAL_RCC_OscConfig+0x504>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d0f0      	beq.n	8003de4 <HAL_RCC_OscConfig+0x2a8>
 8003e02:	e014      	b.n	8003e2e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e04:	f7fd ff44 	bl	8001c90 <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e0c:	f7fd ff40 	bl	8001c90 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b64      	cmp	r3, #100	@ 0x64
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e2a0      	b.n	8004360 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e1e:	4b88      	ldr	r3, [pc, #544]	@ (8004040 <HAL_RCC_OscConfig+0x504>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1f0      	bne.n	8003e0c <HAL_RCC_OscConfig+0x2d0>
 8003e2a:	e000      	b.n	8003e2e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d060      	beq.n	8003efc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	2b04      	cmp	r3, #4
 8003e3e:	d005      	beq.n	8003e4c <HAL_RCC_OscConfig+0x310>
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	2b0c      	cmp	r3, #12
 8003e44:	d119      	bne.n	8003e7a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d116      	bne.n	8003e7a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e4c:	4b7c      	ldr	r3, [pc, #496]	@ (8004040 <HAL_RCC_OscConfig+0x504>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d005      	beq.n	8003e64 <HAL_RCC_OscConfig+0x328>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e27d      	b.n	8004360 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e64:	4b76      	ldr	r3, [pc, #472]	@ (8004040 <HAL_RCC_OscConfig+0x504>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	061b      	lsls	r3, r3, #24
 8003e72:	4973      	ldr	r1, [pc, #460]	@ (8004040 <HAL_RCC_OscConfig+0x504>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e78:	e040      	b.n	8003efc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d023      	beq.n	8003eca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e82:	4b6f      	ldr	r3, [pc, #444]	@ (8004040 <HAL_RCC_OscConfig+0x504>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a6e      	ldr	r2, [pc, #440]	@ (8004040 <HAL_RCC_OscConfig+0x504>)
 8003e88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8e:	f7fd feff 	bl	8001c90 <HAL_GetTick>
 8003e92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e94:	e008      	b.n	8003ea8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e96:	f7fd fefb 	bl	8001c90 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e25b      	b.n	8004360 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ea8:	4b65      	ldr	r3, [pc, #404]	@ (8004040 <HAL_RCC_OscConfig+0x504>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d0f0      	beq.n	8003e96 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eb4:	4b62      	ldr	r3, [pc, #392]	@ (8004040 <HAL_RCC_OscConfig+0x504>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	061b      	lsls	r3, r3, #24
 8003ec2:	495f      	ldr	r1, [pc, #380]	@ (8004040 <HAL_RCC_OscConfig+0x504>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	604b      	str	r3, [r1, #4]
 8003ec8:	e018      	b.n	8003efc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eca:	4b5d      	ldr	r3, [pc, #372]	@ (8004040 <HAL_RCC_OscConfig+0x504>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a5c      	ldr	r2, [pc, #368]	@ (8004040 <HAL_RCC_OscConfig+0x504>)
 8003ed0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ed4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed6:	f7fd fedb 	bl	8001c90 <HAL_GetTick>
 8003eda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003edc:	e008      	b.n	8003ef0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ede:	f7fd fed7 	bl	8001c90 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e237      	b.n	8004360 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ef0:	4b53      	ldr	r3, [pc, #332]	@ (8004040 <HAL_RCC_OscConfig+0x504>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1f0      	bne.n	8003ede <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0308 	and.w	r3, r3, #8
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d03c      	beq.n	8003f82 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d01c      	beq.n	8003f4a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f10:	4b4b      	ldr	r3, [pc, #300]	@ (8004040 <HAL_RCC_OscConfig+0x504>)
 8003f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f16:	4a4a      	ldr	r2, [pc, #296]	@ (8004040 <HAL_RCC_OscConfig+0x504>)
 8003f18:	f043 0301 	orr.w	r3, r3, #1
 8003f1c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f20:	f7fd feb6 	bl	8001c90 <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f28:	f7fd feb2 	bl	8001c90 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e212      	b.n	8004360 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f3a:	4b41      	ldr	r3, [pc, #260]	@ (8004040 <HAL_RCC_OscConfig+0x504>)
 8003f3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d0ef      	beq.n	8003f28 <HAL_RCC_OscConfig+0x3ec>
 8003f48:	e01b      	b.n	8003f82 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f4a:	4b3d      	ldr	r3, [pc, #244]	@ (8004040 <HAL_RCC_OscConfig+0x504>)
 8003f4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f50:	4a3b      	ldr	r2, [pc, #236]	@ (8004040 <HAL_RCC_OscConfig+0x504>)
 8003f52:	f023 0301 	bic.w	r3, r3, #1
 8003f56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f5a:	f7fd fe99 	bl	8001c90 <HAL_GetTick>
 8003f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f60:	e008      	b.n	8003f74 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f62:	f7fd fe95 	bl	8001c90 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e1f5      	b.n	8004360 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f74:	4b32      	ldr	r3, [pc, #200]	@ (8004040 <HAL_RCC_OscConfig+0x504>)
 8003f76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1ef      	bne.n	8003f62 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0304 	and.w	r3, r3, #4
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f000 80a6 	beq.w	80040dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f90:	2300      	movs	r3, #0
 8003f92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003f94:	4b2a      	ldr	r3, [pc, #168]	@ (8004040 <HAL_RCC_OscConfig+0x504>)
 8003f96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10d      	bne.n	8003fbc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fa0:	4b27      	ldr	r3, [pc, #156]	@ (8004040 <HAL_RCC_OscConfig+0x504>)
 8003fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fa4:	4a26      	ldr	r2, [pc, #152]	@ (8004040 <HAL_RCC_OscConfig+0x504>)
 8003fa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003faa:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fac:	4b24      	ldr	r3, [pc, #144]	@ (8004040 <HAL_RCC_OscConfig+0x504>)
 8003fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fb4:	60bb      	str	r3, [r7, #8]
 8003fb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fbc:	4b21      	ldr	r3, [pc, #132]	@ (8004044 <HAL_RCC_OscConfig+0x508>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d118      	bne.n	8003ffa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fc8:	4b1e      	ldr	r3, [pc, #120]	@ (8004044 <HAL_RCC_OscConfig+0x508>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a1d      	ldr	r2, [pc, #116]	@ (8004044 <HAL_RCC_OscConfig+0x508>)
 8003fce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fd2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fd4:	f7fd fe5c 	bl	8001c90 <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fdc:	f7fd fe58 	bl	8001c90 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e1b8      	b.n	8004360 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fee:	4b15      	ldr	r3, [pc, #84]	@ (8004044 <HAL_RCC_OscConfig+0x508>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d0f0      	beq.n	8003fdc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d108      	bne.n	8004014 <HAL_RCC_OscConfig+0x4d8>
 8004002:	4b0f      	ldr	r3, [pc, #60]	@ (8004040 <HAL_RCC_OscConfig+0x504>)
 8004004:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004008:	4a0d      	ldr	r2, [pc, #52]	@ (8004040 <HAL_RCC_OscConfig+0x504>)
 800400a:	f043 0301 	orr.w	r3, r3, #1
 800400e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004012:	e029      	b.n	8004068 <HAL_RCC_OscConfig+0x52c>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	2b05      	cmp	r3, #5
 800401a:	d115      	bne.n	8004048 <HAL_RCC_OscConfig+0x50c>
 800401c:	4b08      	ldr	r3, [pc, #32]	@ (8004040 <HAL_RCC_OscConfig+0x504>)
 800401e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004022:	4a07      	ldr	r2, [pc, #28]	@ (8004040 <HAL_RCC_OscConfig+0x504>)
 8004024:	f043 0304 	orr.w	r3, r3, #4
 8004028:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800402c:	4b04      	ldr	r3, [pc, #16]	@ (8004040 <HAL_RCC_OscConfig+0x504>)
 800402e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004032:	4a03      	ldr	r2, [pc, #12]	@ (8004040 <HAL_RCC_OscConfig+0x504>)
 8004034:	f043 0301 	orr.w	r3, r3, #1
 8004038:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800403c:	e014      	b.n	8004068 <HAL_RCC_OscConfig+0x52c>
 800403e:	bf00      	nop
 8004040:	40021000 	.word	0x40021000
 8004044:	40007000 	.word	0x40007000
 8004048:	4b9d      	ldr	r3, [pc, #628]	@ (80042c0 <HAL_RCC_OscConfig+0x784>)
 800404a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800404e:	4a9c      	ldr	r2, [pc, #624]	@ (80042c0 <HAL_RCC_OscConfig+0x784>)
 8004050:	f023 0301 	bic.w	r3, r3, #1
 8004054:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004058:	4b99      	ldr	r3, [pc, #612]	@ (80042c0 <HAL_RCC_OscConfig+0x784>)
 800405a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800405e:	4a98      	ldr	r2, [pc, #608]	@ (80042c0 <HAL_RCC_OscConfig+0x784>)
 8004060:	f023 0304 	bic.w	r3, r3, #4
 8004064:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d016      	beq.n	800409e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004070:	f7fd fe0e 	bl	8001c90 <HAL_GetTick>
 8004074:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004076:	e00a      	b.n	800408e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004078:	f7fd fe0a 	bl	8001c90 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004086:	4293      	cmp	r3, r2
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e168      	b.n	8004360 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800408e:	4b8c      	ldr	r3, [pc, #560]	@ (80042c0 <HAL_RCC_OscConfig+0x784>)
 8004090:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d0ed      	beq.n	8004078 <HAL_RCC_OscConfig+0x53c>
 800409c:	e015      	b.n	80040ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800409e:	f7fd fdf7 	bl	8001c90 <HAL_GetTick>
 80040a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040a4:	e00a      	b.n	80040bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040a6:	f7fd fdf3 	bl	8001c90 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d901      	bls.n	80040bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e151      	b.n	8004360 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040bc:	4b80      	ldr	r3, [pc, #512]	@ (80042c0 <HAL_RCC_OscConfig+0x784>)
 80040be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1ed      	bne.n	80040a6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040ca:	7ffb      	ldrb	r3, [r7, #31]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d105      	bne.n	80040dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040d0:	4b7b      	ldr	r3, [pc, #492]	@ (80042c0 <HAL_RCC_OscConfig+0x784>)
 80040d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040d4:	4a7a      	ldr	r2, [pc, #488]	@ (80042c0 <HAL_RCC_OscConfig+0x784>)
 80040d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040da:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0320 	and.w	r3, r3, #32
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d03c      	beq.n	8004162 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d01c      	beq.n	800412a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80040f0:	4b73      	ldr	r3, [pc, #460]	@ (80042c0 <HAL_RCC_OscConfig+0x784>)
 80040f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040f6:	4a72      	ldr	r2, [pc, #456]	@ (80042c0 <HAL_RCC_OscConfig+0x784>)
 80040f8:	f043 0301 	orr.w	r3, r3, #1
 80040fc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004100:	f7fd fdc6 	bl	8001c90 <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004108:	f7fd fdc2 	bl	8001c90 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e122      	b.n	8004360 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800411a:	4b69      	ldr	r3, [pc, #420]	@ (80042c0 <HAL_RCC_OscConfig+0x784>)
 800411c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d0ef      	beq.n	8004108 <HAL_RCC_OscConfig+0x5cc>
 8004128:	e01b      	b.n	8004162 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800412a:	4b65      	ldr	r3, [pc, #404]	@ (80042c0 <HAL_RCC_OscConfig+0x784>)
 800412c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004130:	4a63      	ldr	r2, [pc, #396]	@ (80042c0 <HAL_RCC_OscConfig+0x784>)
 8004132:	f023 0301 	bic.w	r3, r3, #1
 8004136:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800413a:	f7fd fda9 	bl	8001c90 <HAL_GetTick>
 800413e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004140:	e008      	b.n	8004154 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004142:	f7fd fda5 	bl	8001c90 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d901      	bls.n	8004154 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e105      	b.n	8004360 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004154:	4b5a      	ldr	r3, [pc, #360]	@ (80042c0 <HAL_RCC_OscConfig+0x784>)
 8004156:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1ef      	bne.n	8004142 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004166:	2b00      	cmp	r3, #0
 8004168:	f000 80f9 	beq.w	800435e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004170:	2b02      	cmp	r3, #2
 8004172:	f040 80cf 	bne.w	8004314 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004176:	4b52      	ldr	r3, [pc, #328]	@ (80042c0 <HAL_RCC_OscConfig+0x784>)
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f003 0203 	and.w	r2, r3, #3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004186:	429a      	cmp	r2, r3
 8004188:	d12c      	bne.n	80041e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004194:	3b01      	subs	r3, #1
 8004196:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004198:	429a      	cmp	r2, r3
 800419a:	d123      	bne.n	80041e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041a6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d11b      	bne.n	80041e4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041b6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d113      	bne.n	80041e4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041c6:	085b      	lsrs	r3, r3, #1
 80041c8:	3b01      	subs	r3, #1
 80041ca:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d109      	bne.n	80041e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041da:	085b      	lsrs	r3, r3, #1
 80041dc:	3b01      	subs	r3, #1
 80041de:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d071      	beq.n	80042c8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	2b0c      	cmp	r3, #12
 80041e8:	d068      	beq.n	80042bc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80041ea:	4b35      	ldr	r3, [pc, #212]	@ (80042c0 <HAL_RCC_OscConfig+0x784>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d105      	bne.n	8004202 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80041f6:	4b32      	ldr	r3, [pc, #200]	@ (80042c0 <HAL_RCC_OscConfig+0x784>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e0ac      	b.n	8004360 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004206:	4b2e      	ldr	r3, [pc, #184]	@ (80042c0 <HAL_RCC_OscConfig+0x784>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a2d      	ldr	r2, [pc, #180]	@ (80042c0 <HAL_RCC_OscConfig+0x784>)
 800420c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004210:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004212:	f7fd fd3d 	bl	8001c90 <HAL_GetTick>
 8004216:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004218:	e008      	b.n	800422c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800421a:	f7fd fd39 	bl	8001c90 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d901      	bls.n	800422c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e099      	b.n	8004360 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800422c:	4b24      	ldr	r3, [pc, #144]	@ (80042c0 <HAL_RCC_OscConfig+0x784>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1f0      	bne.n	800421a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004238:	4b21      	ldr	r3, [pc, #132]	@ (80042c0 <HAL_RCC_OscConfig+0x784>)
 800423a:	68da      	ldr	r2, [r3, #12]
 800423c:	4b21      	ldr	r3, [pc, #132]	@ (80042c4 <HAL_RCC_OscConfig+0x788>)
 800423e:	4013      	ands	r3, r2
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004248:	3a01      	subs	r2, #1
 800424a:	0112      	lsls	r2, r2, #4
 800424c:	4311      	orrs	r1, r2
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004252:	0212      	lsls	r2, r2, #8
 8004254:	4311      	orrs	r1, r2
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800425a:	0852      	lsrs	r2, r2, #1
 800425c:	3a01      	subs	r2, #1
 800425e:	0552      	lsls	r2, r2, #21
 8004260:	4311      	orrs	r1, r2
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004266:	0852      	lsrs	r2, r2, #1
 8004268:	3a01      	subs	r2, #1
 800426a:	0652      	lsls	r2, r2, #25
 800426c:	4311      	orrs	r1, r2
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004272:	06d2      	lsls	r2, r2, #27
 8004274:	430a      	orrs	r2, r1
 8004276:	4912      	ldr	r1, [pc, #72]	@ (80042c0 <HAL_RCC_OscConfig+0x784>)
 8004278:	4313      	orrs	r3, r2
 800427a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800427c:	4b10      	ldr	r3, [pc, #64]	@ (80042c0 <HAL_RCC_OscConfig+0x784>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a0f      	ldr	r2, [pc, #60]	@ (80042c0 <HAL_RCC_OscConfig+0x784>)
 8004282:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004286:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004288:	4b0d      	ldr	r3, [pc, #52]	@ (80042c0 <HAL_RCC_OscConfig+0x784>)
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	4a0c      	ldr	r2, [pc, #48]	@ (80042c0 <HAL_RCC_OscConfig+0x784>)
 800428e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004292:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004294:	f7fd fcfc 	bl	8001c90 <HAL_GetTick>
 8004298:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800429c:	f7fd fcf8 	bl	8001c90 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e058      	b.n	8004360 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042ae:	4b04      	ldr	r3, [pc, #16]	@ (80042c0 <HAL_RCC_OscConfig+0x784>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d0f0      	beq.n	800429c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042ba:	e050      	b.n	800435e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e04f      	b.n	8004360 <HAL_RCC_OscConfig+0x824>
 80042c0:	40021000 	.word	0x40021000
 80042c4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042c8:	4b27      	ldr	r3, [pc, #156]	@ (8004368 <HAL_RCC_OscConfig+0x82c>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d144      	bne.n	800435e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80042d4:	4b24      	ldr	r3, [pc, #144]	@ (8004368 <HAL_RCC_OscConfig+0x82c>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a23      	ldr	r2, [pc, #140]	@ (8004368 <HAL_RCC_OscConfig+0x82c>)
 80042da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042e0:	4b21      	ldr	r3, [pc, #132]	@ (8004368 <HAL_RCC_OscConfig+0x82c>)
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	4a20      	ldr	r2, [pc, #128]	@ (8004368 <HAL_RCC_OscConfig+0x82c>)
 80042e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80042ec:	f7fd fcd0 	bl	8001c90 <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042f2:	e008      	b.n	8004306 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042f4:	f7fd fccc 	bl	8001c90 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e02c      	b.n	8004360 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004306:	4b18      	ldr	r3, [pc, #96]	@ (8004368 <HAL_RCC_OscConfig+0x82c>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d0f0      	beq.n	80042f4 <HAL_RCC_OscConfig+0x7b8>
 8004312:	e024      	b.n	800435e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	2b0c      	cmp	r3, #12
 8004318:	d01f      	beq.n	800435a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800431a:	4b13      	ldr	r3, [pc, #76]	@ (8004368 <HAL_RCC_OscConfig+0x82c>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a12      	ldr	r2, [pc, #72]	@ (8004368 <HAL_RCC_OscConfig+0x82c>)
 8004320:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004324:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004326:	f7fd fcb3 	bl	8001c90 <HAL_GetTick>
 800432a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800432c:	e008      	b.n	8004340 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800432e:	f7fd fcaf 	bl	8001c90 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	2b02      	cmp	r3, #2
 800433a:	d901      	bls.n	8004340 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e00f      	b.n	8004360 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004340:	4b09      	ldr	r3, [pc, #36]	@ (8004368 <HAL_RCC_OscConfig+0x82c>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1f0      	bne.n	800432e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800434c:	4b06      	ldr	r3, [pc, #24]	@ (8004368 <HAL_RCC_OscConfig+0x82c>)
 800434e:	68da      	ldr	r2, [r3, #12]
 8004350:	4905      	ldr	r1, [pc, #20]	@ (8004368 <HAL_RCC_OscConfig+0x82c>)
 8004352:	4b06      	ldr	r3, [pc, #24]	@ (800436c <HAL_RCC_OscConfig+0x830>)
 8004354:	4013      	ands	r3, r2
 8004356:	60cb      	str	r3, [r1, #12]
 8004358:	e001      	b.n	800435e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e000      	b.n	8004360 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3720      	adds	r7, #32
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	40021000 	.word	0x40021000
 800436c:	feeefffc 	.word	0xfeeefffc

08004370 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d101      	bne.n	8004384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e0e7      	b.n	8004554 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004384:	4b75      	ldr	r3, [pc, #468]	@ (800455c <HAL_RCC_ClockConfig+0x1ec>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0307 	and.w	r3, r3, #7
 800438c:	683a      	ldr	r2, [r7, #0]
 800438e:	429a      	cmp	r2, r3
 8004390:	d910      	bls.n	80043b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004392:	4b72      	ldr	r3, [pc, #456]	@ (800455c <HAL_RCC_ClockConfig+0x1ec>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f023 0207 	bic.w	r2, r3, #7
 800439a:	4970      	ldr	r1, [pc, #448]	@ (800455c <HAL_RCC_ClockConfig+0x1ec>)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	4313      	orrs	r3, r2
 80043a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043a2:	4b6e      	ldr	r3, [pc, #440]	@ (800455c <HAL_RCC_ClockConfig+0x1ec>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0307 	and.w	r3, r3, #7
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d001      	beq.n	80043b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e0cf      	b.n	8004554 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0302 	and.w	r3, r3, #2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d010      	beq.n	80043e2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689a      	ldr	r2, [r3, #8]
 80043c4:	4b66      	ldr	r3, [pc, #408]	@ (8004560 <HAL_RCC_ClockConfig+0x1f0>)
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d908      	bls.n	80043e2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043d0:	4b63      	ldr	r3, [pc, #396]	@ (8004560 <HAL_RCC_ClockConfig+0x1f0>)
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	4960      	ldr	r1, [pc, #384]	@ (8004560 <HAL_RCC_ClockConfig+0x1f0>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d04c      	beq.n	8004488 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2b03      	cmp	r3, #3
 80043f4:	d107      	bne.n	8004406 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043f6:	4b5a      	ldr	r3, [pc, #360]	@ (8004560 <HAL_RCC_ClockConfig+0x1f0>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d121      	bne.n	8004446 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e0a6      	b.n	8004554 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	2b02      	cmp	r3, #2
 800440c:	d107      	bne.n	800441e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800440e:	4b54      	ldr	r3, [pc, #336]	@ (8004560 <HAL_RCC_ClockConfig+0x1f0>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d115      	bne.n	8004446 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e09a      	b.n	8004554 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d107      	bne.n	8004436 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004426:	4b4e      	ldr	r3, [pc, #312]	@ (8004560 <HAL_RCC_ClockConfig+0x1f0>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d109      	bne.n	8004446 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e08e      	b.n	8004554 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004436:	4b4a      	ldr	r3, [pc, #296]	@ (8004560 <HAL_RCC_ClockConfig+0x1f0>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e086      	b.n	8004554 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004446:	4b46      	ldr	r3, [pc, #280]	@ (8004560 <HAL_RCC_ClockConfig+0x1f0>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f023 0203 	bic.w	r2, r3, #3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	4943      	ldr	r1, [pc, #268]	@ (8004560 <HAL_RCC_ClockConfig+0x1f0>)
 8004454:	4313      	orrs	r3, r2
 8004456:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004458:	f7fd fc1a 	bl	8001c90 <HAL_GetTick>
 800445c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800445e:	e00a      	b.n	8004476 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004460:	f7fd fc16 	bl	8001c90 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800446e:	4293      	cmp	r3, r2
 8004470:	d901      	bls.n	8004476 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e06e      	b.n	8004554 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004476:	4b3a      	ldr	r3, [pc, #232]	@ (8004560 <HAL_RCC_ClockConfig+0x1f0>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f003 020c 	and.w	r2, r3, #12
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	429a      	cmp	r2, r3
 8004486:	d1eb      	bne.n	8004460 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d010      	beq.n	80044b6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689a      	ldr	r2, [r3, #8]
 8004498:	4b31      	ldr	r3, [pc, #196]	@ (8004560 <HAL_RCC_ClockConfig+0x1f0>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d208      	bcs.n	80044b6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044a4:	4b2e      	ldr	r3, [pc, #184]	@ (8004560 <HAL_RCC_ClockConfig+0x1f0>)
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	492b      	ldr	r1, [pc, #172]	@ (8004560 <HAL_RCC_ClockConfig+0x1f0>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044b6:	4b29      	ldr	r3, [pc, #164]	@ (800455c <HAL_RCC_ClockConfig+0x1ec>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0307 	and.w	r3, r3, #7
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d210      	bcs.n	80044e6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044c4:	4b25      	ldr	r3, [pc, #148]	@ (800455c <HAL_RCC_ClockConfig+0x1ec>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f023 0207 	bic.w	r2, r3, #7
 80044cc:	4923      	ldr	r1, [pc, #140]	@ (800455c <HAL_RCC_ClockConfig+0x1ec>)
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044d4:	4b21      	ldr	r3, [pc, #132]	@ (800455c <HAL_RCC_ClockConfig+0x1ec>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0307 	and.w	r3, r3, #7
 80044dc:	683a      	ldr	r2, [r7, #0]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d001      	beq.n	80044e6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e036      	b.n	8004554 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0304 	and.w	r3, r3, #4
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d008      	beq.n	8004504 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044f2:	4b1b      	ldr	r3, [pc, #108]	@ (8004560 <HAL_RCC_ClockConfig+0x1f0>)
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	4918      	ldr	r1, [pc, #96]	@ (8004560 <HAL_RCC_ClockConfig+0x1f0>)
 8004500:	4313      	orrs	r3, r2
 8004502:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0308 	and.w	r3, r3, #8
 800450c:	2b00      	cmp	r3, #0
 800450e:	d009      	beq.n	8004524 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004510:	4b13      	ldr	r3, [pc, #76]	@ (8004560 <HAL_RCC_ClockConfig+0x1f0>)
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	00db      	lsls	r3, r3, #3
 800451e:	4910      	ldr	r1, [pc, #64]	@ (8004560 <HAL_RCC_ClockConfig+0x1f0>)
 8004520:	4313      	orrs	r3, r2
 8004522:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004524:	f000 f824 	bl	8004570 <HAL_RCC_GetSysClockFreq>
 8004528:	4602      	mov	r2, r0
 800452a:	4b0d      	ldr	r3, [pc, #52]	@ (8004560 <HAL_RCC_ClockConfig+0x1f0>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	091b      	lsrs	r3, r3, #4
 8004530:	f003 030f 	and.w	r3, r3, #15
 8004534:	490b      	ldr	r1, [pc, #44]	@ (8004564 <HAL_RCC_ClockConfig+0x1f4>)
 8004536:	5ccb      	ldrb	r3, [r1, r3]
 8004538:	f003 031f 	and.w	r3, r3, #31
 800453c:	fa22 f303 	lsr.w	r3, r2, r3
 8004540:	4a09      	ldr	r2, [pc, #36]	@ (8004568 <HAL_RCC_ClockConfig+0x1f8>)
 8004542:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004544:	4b09      	ldr	r3, [pc, #36]	@ (800456c <HAL_RCC_ClockConfig+0x1fc>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4618      	mov	r0, r3
 800454a:	f7fd fb51 	bl	8001bf0 <HAL_InitTick>
 800454e:	4603      	mov	r3, r0
 8004550:	72fb      	strb	r3, [r7, #11]

  return status;
 8004552:	7afb      	ldrb	r3, [r7, #11]
}
 8004554:	4618      	mov	r0, r3
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	40022000 	.word	0x40022000
 8004560:	40021000 	.word	0x40021000
 8004564:	0800a414 	.word	0x0800a414
 8004568:	20000000 	.word	0x20000000
 800456c:	20000004 	.word	0x20000004

08004570 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004570:	b480      	push	{r7}
 8004572:	b089      	sub	sp, #36	@ 0x24
 8004574:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004576:	2300      	movs	r3, #0
 8004578:	61fb      	str	r3, [r7, #28]
 800457a:	2300      	movs	r3, #0
 800457c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800457e:	4b3e      	ldr	r3, [pc, #248]	@ (8004678 <HAL_RCC_GetSysClockFreq+0x108>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f003 030c 	and.w	r3, r3, #12
 8004586:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004588:	4b3b      	ldr	r3, [pc, #236]	@ (8004678 <HAL_RCC_GetSysClockFreq+0x108>)
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	f003 0303 	and.w	r3, r3, #3
 8004590:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d005      	beq.n	80045a4 <HAL_RCC_GetSysClockFreq+0x34>
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	2b0c      	cmp	r3, #12
 800459c:	d121      	bne.n	80045e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d11e      	bne.n	80045e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80045a4:	4b34      	ldr	r3, [pc, #208]	@ (8004678 <HAL_RCC_GetSysClockFreq+0x108>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0308 	and.w	r3, r3, #8
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d107      	bne.n	80045c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80045b0:	4b31      	ldr	r3, [pc, #196]	@ (8004678 <HAL_RCC_GetSysClockFreq+0x108>)
 80045b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045b6:	0a1b      	lsrs	r3, r3, #8
 80045b8:	f003 030f 	and.w	r3, r3, #15
 80045bc:	61fb      	str	r3, [r7, #28]
 80045be:	e005      	b.n	80045cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80045c0:	4b2d      	ldr	r3, [pc, #180]	@ (8004678 <HAL_RCC_GetSysClockFreq+0x108>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	091b      	lsrs	r3, r3, #4
 80045c6:	f003 030f 	and.w	r3, r3, #15
 80045ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80045cc:	4a2b      	ldr	r2, [pc, #172]	@ (800467c <HAL_RCC_GetSysClockFreq+0x10c>)
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d10d      	bne.n	80045f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045e0:	e00a      	b.n	80045f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	2b04      	cmp	r3, #4
 80045e6:	d102      	bne.n	80045ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80045e8:	4b25      	ldr	r3, [pc, #148]	@ (8004680 <HAL_RCC_GetSysClockFreq+0x110>)
 80045ea:	61bb      	str	r3, [r7, #24]
 80045ec:	e004      	b.n	80045f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	2b08      	cmp	r3, #8
 80045f2:	d101      	bne.n	80045f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80045f4:	4b23      	ldr	r3, [pc, #140]	@ (8004684 <HAL_RCC_GetSysClockFreq+0x114>)
 80045f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	2b0c      	cmp	r3, #12
 80045fc:	d134      	bne.n	8004668 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80045fe:	4b1e      	ldr	r3, [pc, #120]	@ (8004678 <HAL_RCC_GetSysClockFreq+0x108>)
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	f003 0303 	and.w	r3, r3, #3
 8004606:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	2b02      	cmp	r3, #2
 800460c:	d003      	beq.n	8004616 <HAL_RCC_GetSysClockFreq+0xa6>
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	2b03      	cmp	r3, #3
 8004612:	d003      	beq.n	800461c <HAL_RCC_GetSysClockFreq+0xac>
 8004614:	e005      	b.n	8004622 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004616:	4b1a      	ldr	r3, [pc, #104]	@ (8004680 <HAL_RCC_GetSysClockFreq+0x110>)
 8004618:	617b      	str	r3, [r7, #20]
      break;
 800461a:	e005      	b.n	8004628 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800461c:	4b19      	ldr	r3, [pc, #100]	@ (8004684 <HAL_RCC_GetSysClockFreq+0x114>)
 800461e:	617b      	str	r3, [r7, #20]
      break;
 8004620:	e002      	b.n	8004628 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	617b      	str	r3, [r7, #20]
      break;
 8004626:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004628:	4b13      	ldr	r3, [pc, #76]	@ (8004678 <HAL_RCC_GetSysClockFreq+0x108>)
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	091b      	lsrs	r3, r3, #4
 800462e:	f003 0307 	and.w	r3, r3, #7
 8004632:	3301      	adds	r3, #1
 8004634:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004636:	4b10      	ldr	r3, [pc, #64]	@ (8004678 <HAL_RCC_GetSysClockFreq+0x108>)
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	0a1b      	lsrs	r3, r3, #8
 800463c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	fb03 f202 	mul.w	r2, r3, r2
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	fbb2 f3f3 	udiv	r3, r2, r3
 800464c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800464e:	4b0a      	ldr	r3, [pc, #40]	@ (8004678 <HAL_RCC_GetSysClockFreq+0x108>)
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	0e5b      	lsrs	r3, r3, #25
 8004654:	f003 0303 	and.w	r3, r3, #3
 8004658:	3301      	adds	r3, #1
 800465a:	005b      	lsls	r3, r3, #1
 800465c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	fbb2 f3f3 	udiv	r3, r2, r3
 8004666:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004668:	69bb      	ldr	r3, [r7, #24]
}
 800466a:	4618      	mov	r0, r3
 800466c:	3724      	adds	r7, #36	@ 0x24
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	40021000 	.word	0x40021000
 800467c:	0800a42c 	.word	0x0800a42c
 8004680:	00f42400 	.word	0x00f42400
 8004684:	007a1200 	.word	0x007a1200

08004688 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004688:	b480      	push	{r7}
 800468a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800468c:	4b03      	ldr	r3, [pc, #12]	@ (800469c <HAL_RCC_GetHCLKFreq+0x14>)
 800468e:	681b      	ldr	r3, [r3, #0]
}
 8004690:	4618      	mov	r0, r3
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	20000000 	.word	0x20000000

080046a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80046a4:	f7ff fff0 	bl	8004688 <HAL_RCC_GetHCLKFreq>
 80046a8:	4602      	mov	r2, r0
 80046aa:	4b06      	ldr	r3, [pc, #24]	@ (80046c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	0a1b      	lsrs	r3, r3, #8
 80046b0:	f003 0307 	and.w	r3, r3, #7
 80046b4:	4904      	ldr	r1, [pc, #16]	@ (80046c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80046b6:	5ccb      	ldrb	r3, [r1, r3]
 80046b8:	f003 031f 	and.w	r3, r3, #31
 80046bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	40021000 	.word	0x40021000
 80046c8:	0800a424 	.word	0x0800a424

080046cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80046d0:	f7ff ffda 	bl	8004688 <HAL_RCC_GetHCLKFreq>
 80046d4:	4602      	mov	r2, r0
 80046d6:	4b06      	ldr	r3, [pc, #24]	@ (80046f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	0adb      	lsrs	r3, r3, #11
 80046dc:	f003 0307 	and.w	r3, r3, #7
 80046e0:	4904      	ldr	r1, [pc, #16]	@ (80046f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80046e2:	5ccb      	ldrb	r3, [r1, r3]
 80046e4:	f003 031f 	and.w	r3, r3, #31
 80046e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	40021000 	.word	0x40021000
 80046f4:	0800a424 	.word	0x0800a424

080046f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004700:	2300      	movs	r3, #0
 8004702:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004704:	4b2a      	ldr	r3, [pc, #168]	@ (80047b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004708:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d003      	beq.n	8004718 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004710:	f7ff f9a0 	bl	8003a54 <HAL_PWREx_GetVoltageRange>
 8004714:	6178      	str	r0, [r7, #20]
 8004716:	e014      	b.n	8004742 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004718:	4b25      	ldr	r3, [pc, #148]	@ (80047b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800471a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800471c:	4a24      	ldr	r2, [pc, #144]	@ (80047b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800471e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004722:	6593      	str	r3, [r2, #88]	@ 0x58
 8004724:	4b22      	ldr	r3, [pc, #136]	@ (80047b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004728:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800472c:	60fb      	str	r3, [r7, #12]
 800472e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004730:	f7ff f990 	bl	8003a54 <HAL_PWREx_GetVoltageRange>
 8004734:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004736:	4b1e      	ldr	r3, [pc, #120]	@ (80047b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800473a:	4a1d      	ldr	r2, [pc, #116]	@ (80047b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800473c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004740:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004748:	d10b      	bne.n	8004762 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b80      	cmp	r3, #128	@ 0x80
 800474e:	d919      	bls.n	8004784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2ba0      	cmp	r3, #160	@ 0xa0
 8004754:	d902      	bls.n	800475c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004756:	2302      	movs	r3, #2
 8004758:	613b      	str	r3, [r7, #16]
 800475a:	e013      	b.n	8004784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800475c:	2301      	movs	r3, #1
 800475e:	613b      	str	r3, [r7, #16]
 8004760:	e010      	b.n	8004784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b80      	cmp	r3, #128	@ 0x80
 8004766:	d902      	bls.n	800476e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004768:	2303      	movs	r3, #3
 800476a:	613b      	str	r3, [r7, #16]
 800476c:	e00a      	b.n	8004784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2b80      	cmp	r3, #128	@ 0x80
 8004772:	d102      	bne.n	800477a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004774:	2302      	movs	r3, #2
 8004776:	613b      	str	r3, [r7, #16]
 8004778:	e004      	b.n	8004784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b70      	cmp	r3, #112	@ 0x70
 800477e:	d101      	bne.n	8004784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004780:	2301      	movs	r3, #1
 8004782:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004784:	4b0b      	ldr	r3, [pc, #44]	@ (80047b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f023 0207 	bic.w	r2, r3, #7
 800478c:	4909      	ldr	r1, [pc, #36]	@ (80047b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	4313      	orrs	r3, r2
 8004792:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004794:	4b07      	ldr	r3, [pc, #28]	@ (80047b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0307 	and.w	r3, r3, #7
 800479c:	693a      	ldr	r2, [r7, #16]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d001      	beq.n	80047a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e000      	b.n	80047a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3718      	adds	r7, #24
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	40021000 	.word	0x40021000
 80047b4:	40022000 	.word	0x40022000

080047b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047c0:	2300      	movs	r3, #0
 80047c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047c4:	2300      	movs	r3, #0
 80047c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d041      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047d8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80047dc:	d02a      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80047de:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80047e2:	d824      	bhi.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80047e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80047e8:	d008      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80047ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80047ee:	d81e      	bhi.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00a      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x52>
 80047f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047f8:	d010      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80047fa:	e018      	b.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80047fc:	4b86      	ldr	r3, [pc, #536]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	4a85      	ldr	r2, [pc, #532]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004802:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004806:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004808:	e015      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	3304      	adds	r3, #4
 800480e:	2100      	movs	r1, #0
 8004810:	4618      	mov	r0, r3
 8004812:	f000 facd 	bl	8004db0 <RCCEx_PLLSAI1_Config>
 8004816:	4603      	mov	r3, r0
 8004818:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800481a:	e00c      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	3320      	adds	r3, #32
 8004820:	2100      	movs	r1, #0
 8004822:	4618      	mov	r0, r3
 8004824:	f000 fbb6 	bl	8004f94 <RCCEx_PLLSAI2_Config>
 8004828:	4603      	mov	r3, r0
 800482a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800482c:	e003      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	74fb      	strb	r3, [r7, #19]
      break;
 8004832:	e000      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004834:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004836:	7cfb      	ldrb	r3, [r7, #19]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10b      	bne.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800483c:	4b76      	ldr	r3, [pc, #472]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800483e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004842:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800484a:	4973      	ldr	r1, [pc, #460]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800484c:	4313      	orrs	r3, r2
 800484e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004852:	e001      	b.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004854:	7cfb      	ldrb	r3, [r7, #19]
 8004856:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d041      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004868:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800486c:	d02a      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800486e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004872:	d824      	bhi.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004874:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004878:	d008      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800487a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800487e:	d81e      	bhi.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00a      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004884:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004888:	d010      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800488a:	e018      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800488c:	4b62      	ldr	r3, [pc, #392]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	4a61      	ldr	r2, [pc, #388]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004892:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004896:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004898:	e015      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	3304      	adds	r3, #4
 800489e:	2100      	movs	r1, #0
 80048a0:	4618      	mov	r0, r3
 80048a2:	f000 fa85 	bl	8004db0 <RCCEx_PLLSAI1_Config>
 80048a6:	4603      	mov	r3, r0
 80048a8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048aa:	e00c      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	3320      	adds	r3, #32
 80048b0:	2100      	movs	r1, #0
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 fb6e 	bl	8004f94 <RCCEx_PLLSAI2_Config>
 80048b8:	4603      	mov	r3, r0
 80048ba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048bc:	e003      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	74fb      	strb	r3, [r7, #19]
      break;
 80048c2:	e000      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80048c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048c6:	7cfb      	ldrb	r3, [r7, #19]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d10b      	bne.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80048cc:	4b52      	ldr	r3, [pc, #328]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048d2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048da:	494f      	ldr	r1, [pc, #316]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80048e2:	e001      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e4:	7cfb      	ldrb	r3, [r7, #19]
 80048e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f000 80a0 	beq.w	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048f6:	2300      	movs	r3, #0
 80048f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80048fa:	4b47      	ldr	r3, [pc, #284]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004906:	2301      	movs	r3, #1
 8004908:	e000      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800490a:	2300      	movs	r3, #0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00d      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004910:	4b41      	ldr	r3, [pc, #260]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004912:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004914:	4a40      	ldr	r2, [pc, #256]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004916:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800491a:	6593      	str	r3, [r2, #88]	@ 0x58
 800491c:	4b3e      	ldr	r3, [pc, #248]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800491e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004920:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004924:	60bb      	str	r3, [r7, #8]
 8004926:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004928:	2301      	movs	r3, #1
 800492a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800492c:	4b3b      	ldr	r3, [pc, #236]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a3a      	ldr	r2, [pc, #232]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004932:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004936:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004938:	f7fd f9aa 	bl	8001c90 <HAL_GetTick>
 800493c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800493e:	e009      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004940:	f7fd f9a6 	bl	8001c90 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b02      	cmp	r3, #2
 800494c:	d902      	bls.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	74fb      	strb	r3, [r7, #19]
        break;
 8004952:	e005      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004954:	4b31      	ldr	r3, [pc, #196]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800495c:	2b00      	cmp	r3, #0
 800495e:	d0ef      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004960:	7cfb      	ldrb	r3, [r7, #19]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d15c      	bne.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004966:	4b2c      	ldr	r3, [pc, #176]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004968:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800496c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004970:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d01f      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	429a      	cmp	r2, r3
 8004982:	d019      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004984:	4b24      	ldr	r3, [pc, #144]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800498a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800498e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004990:	4b21      	ldr	r3, [pc, #132]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004996:	4a20      	ldr	r2, [pc, #128]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004998:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800499c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049a6:	4a1c      	ldr	r2, [pc, #112]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049b0:	4a19      	ldr	r2, [pc, #100]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d016      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c2:	f7fd f965 	bl	8001c90 <HAL_GetTick>
 80049c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049c8:	e00b      	b.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049ca:	f7fd f961 	bl	8001c90 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049d8:	4293      	cmp	r3, r2
 80049da:	d902      	bls.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	74fb      	strb	r3, [r7, #19]
            break;
 80049e0:	e006      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049e8:	f003 0302 	and.w	r3, r3, #2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d0ec      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80049f0:	7cfb      	ldrb	r3, [r7, #19]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10c      	bne.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049f6:	4b08      	ldr	r3, [pc, #32]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a06:	4904      	ldr	r1, [pc, #16]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004a0e:	e009      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a10:	7cfb      	ldrb	r3, [r7, #19]
 8004a12:	74bb      	strb	r3, [r7, #18]
 8004a14:	e006      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004a16:	bf00      	nop
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a20:	7cfb      	ldrb	r3, [r7, #19]
 8004a22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a24:	7c7b      	ldrb	r3, [r7, #17]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d105      	bne.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a2a:	4ba6      	ldr	r3, [pc, #664]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a2e:	4aa5      	ldr	r2, [pc, #660]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a34:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00a      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a42:	4ba0      	ldr	r3, [pc, #640]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a48:	f023 0203 	bic.w	r2, r3, #3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a50:	499c      	ldr	r1, [pc, #624]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00a      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a64:	4b97      	ldr	r3, [pc, #604]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a6a:	f023 020c 	bic.w	r2, r3, #12
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a72:	4994      	ldr	r1, [pc, #592]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0304 	and.w	r3, r3, #4
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00a      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a86:	4b8f      	ldr	r3, [pc, #572]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a8c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a94:	498b      	ldr	r1, [pc, #556]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0308 	and.w	r3, r3, #8
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00a      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004aa8:	4b86      	ldr	r3, [pc, #536]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ab6:	4983      	ldr	r1, [pc, #524]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0310 	and.w	r3, r3, #16
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00a      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004aca:	4b7e      	ldr	r3, [pc, #504]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ad0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ad8:	497a      	ldr	r1, [pc, #488]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0320 	and.w	r3, r3, #32
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00a      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004aec:	4b75      	ldr	r3, [pc, #468]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004af2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004afa:	4972      	ldr	r1, [pc, #456]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00a      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b0e:	4b6d      	ldr	r3, [pc, #436]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b14:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b1c:	4969      	ldr	r1, [pc, #420]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00a      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b30:	4b64      	ldr	r3, [pc, #400]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b36:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b3e:	4961      	ldr	r1, [pc, #388]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00a      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b52:	4b5c      	ldr	r3, [pc, #368]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b58:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b60:	4958      	ldr	r1, [pc, #352]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00a      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b74:	4b53      	ldr	r3, [pc, #332]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b7a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b82:	4950      	ldr	r1, [pc, #320]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00a      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b96:	4b4b      	ldr	r3, [pc, #300]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b9c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ba4:	4947      	ldr	r1, [pc, #284]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00a      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004bb8:	4b42      	ldr	r3, [pc, #264]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004bba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004bbe:	f023 0203 	bic.w	r2, r3, #3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bc6:	493f      	ldr	r1, [pc, #252]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d028      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bda:	4b3a      	ldr	r3, [pc, #232]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004be0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004be8:	4936      	ldr	r1, [pc, #216]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bf4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bf8:	d106      	bne.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bfa:	4b32      	ldr	r3, [pc, #200]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	4a31      	ldr	r2, [pc, #196]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004c00:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c04:	60d3      	str	r3, [r2, #12]
 8004c06:	e011      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c0c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c10:	d10c      	bne.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	3304      	adds	r3, #4
 8004c16:	2101      	movs	r1, #1
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f000 f8c9 	bl	8004db0 <RCCEx_PLLSAI1_Config>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004c22:	7cfb      	ldrb	r3, [r7, #19]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d001      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8004c28:	7cfb      	ldrb	r3, [r7, #19]
 8004c2a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d028      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c38:	4b22      	ldr	r3, [pc, #136]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c3e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c46:	491f      	ldr	r1, [pc, #124]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c56:	d106      	bne.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c58:	4b1a      	ldr	r3, [pc, #104]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	4a19      	ldr	r2, [pc, #100]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004c5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c62:	60d3      	str	r3, [r2, #12]
 8004c64:	e011      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c6a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c6e:	d10c      	bne.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	3304      	adds	r3, #4
 8004c74:	2101      	movs	r1, #1
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 f89a 	bl	8004db0 <RCCEx_PLLSAI1_Config>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c80:	7cfb      	ldrb	r3, [r7, #19]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8004c86:	7cfb      	ldrb	r3, [r7, #19]
 8004c88:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d02a      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c96:	4b0b      	ldr	r3, [pc, #44]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c9c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ca4:	4907      	ldr	r1, [pc, #28]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004cb0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004cb4:	d108      	bne.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cb6:	4b03      	ldr	r3, [pc, #12]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	4a02      	ldr	r2, [pc, #8]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004cbc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004cc0:	60d3      	str	r3, [r2, #12]
 8004cc2:	e013      	b.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x534>
 8004cc4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ccc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004cd0:	d10c      	bne.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	3304      	adds	r3, #4
 8004cd6:	2101      	movs	r1, #1
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f000 f869 	bl	8004db0 <RCCEx_PLLSAI1_Config>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ce2:	7cfb      	ldrb	r3, [r7, #19]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d001      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8004ce8:	7cfb      	ldrb	r3, [r7, #19]
 8004cea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d02f      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004cf8:	4b2c      	ldr	r3, [pc, #176]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cfe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d06:	4929      	ldr	r1, [pc, #164]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d16:	d10d      	bne.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	3304      	adds	r3, #4
 8004d1c:	2102      	movs	r1, #2
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f000 f846 	bl	8004db0 <RCCEx_PLLSAI1_Config>
 8004d24:	4603      	mov	r3, r0
 8004d26:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d28:	7cfb      	ldrb	r3, [r7, #19]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d014      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8004d2e:	7cfb      	ldrb	r3, [r7, #19]
 8004d30:	74bb      	strb	r3, [r7, #18]
 8004d32:	e011      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d3c:	d10c      	bne.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	3320      	adds	r3, #32
 8004d42:	2102      	movs	r1, #2
 8004d44:	4618      	mov	r0, r3
 8004d46:	f000 f925 	bl	8004f94 <RCCEx_PLLSAI2_Config>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d4e:	7cfb      	ldrb	r3, [r7, #19]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d001      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8004d54:	7cfb      	ldrb	r3, [r7, #19]
 8004d56:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00b      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d64:	4b11      	ldr	r3, [pc, #68]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d6a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d74:	490d      	ldr	r1, [pc, #52]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00b      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d88:	4b08      	ldr	r3, [pc, #32]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d8e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d98:	4904      	ldr	r1, [pc, #16]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004da0:	7cbb      	ldrb	r3, [r7, #18]
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3718      	adds	r7, #24
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	40021000 	.word	0x40021000

08004db0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004dbe:	4b74      	ldr	r3, [pc, #464]	@ (8004f90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	f003 0303 	and.w	r3, r3, #3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d018      	beq.n	8004dfc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004dca:	4b71      	ldr	r3, [pc, #452]	@ (8004f90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	f003 0203 	and.w	r2, r3, #3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d10d      	bne.n	8004df6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
       ||
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d009      	beq.n	8004df6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004de2:	4b6b      	ldr	r3, [pc, #428]	@ (8004f90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	091b      	lsrs	r3, r3, #4
 8004de8:	f003 0307 	and.w	r3, r3, #7
 8004dec:	1c5a      	adds	r2, r3, #1
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
       ||
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d047      	beq.n	8004e86 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	73fb      	strb	r3, [r7, #15]
 8004dfa:	e044      	b.n	8004e86 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b03      	cmp	r3, #3
 8004e02:	d018      	beq.n	8004e36 <RCCEx_PLLSAI1_Config+0x86>
 8004e04:	2b03      	cmp	r3, #3
 8004e06:	d825      	bhi.n	8004e54 <RCCEx_PLLSAI1_Config+0xa4>
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d002      	beq.n	8004e12 <RCCEx_PLLSAI1_Config+0x62>
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d009      	beq.n	8004e24 <RCCEx_PLLSAI1_Config+0x74>
 8004e10:	e020      	b.n	8004e54 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e12:	4b5f      	ldr	r3, [pc, #380]	@ (8004f90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0302 	and.w	r3, r3, #2
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d11d      	bne.n	8004e5a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e22:	e01a      	b.n	8004e5a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e24:	4b5a      	ldr	r3, [pc, #360]	@ (8004f90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d116      	bne.n	8004e5e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e34:	e013      	b.n	8004e5e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e36:	4b56      	ldr	r3, [pc, #344]	@ (8004f90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10f      	bne.n	8004e62 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e42:	4b53      	ldr	r3, [pc, #332]	@ (8004f90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d109      	bne.n	8004e62 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e52:	e006      	b.n	8004e62 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	73fb      	strb	r3, [r7, #15]
      break;
 8004e58:	e004      	b.n	8004e64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e5a:	bf00      	nop
 8004e5c:	e002      	b.n	8004e64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e5e:	bf00      	nop
 8004e60:	e000      	b.n	8004e64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e62:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e64:	7bfb      	ldrb	r3, [r7, #15]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10d      	bne.n	8004e86 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e6a:	4b49      	ldr	r3, [pc, #292]	@ (8004f90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6819      	ldr	r1, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	011b      	lsls	r3, r3, #4
 8004e7e:	430b      	orrs	r3, r1
 8004e80:	4943      	ldr	r1, [pc, #268]	@ (8004f90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e86:	7bfb      	ldrb	r3, [r7, #15]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d17c      	bne.n	8004f86 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004e8c:	4b40      	ldr	r3, [pc, #256]	@ (8004f90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a3f      	ldr	r2, [pc, #252]	@ (8004f90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e92:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e98:	f7fc fefa 	bl	8001c90 <HAL_GetTick>
 8004e9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e9e:	e009      	b.n	8004eb4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ea0:	f7fc fef6 	bl	8001c90 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d902      	bls.n	8004eb4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	73fb      	strb	r3, [r7, #15]
        break;
 8004eb2:	e005      	b.n	8004ec0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004eb4:	4b36      	ldr	r3, [pc, #216]	@ (8004f90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1ef      	bne.n	8004ea0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ec0:	7bfb      	ldrb	r3, [r7, #15]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d15f      	bne.n	8004f86 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d110      	bne.n	8004eee <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ecc:	4b30      	ldr	r3, [pc, #192]	@ (8004f90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004ed4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	6892      	ldr	r2, [r2, #8]
 8004edc:	0211      	lsls	r1, r2, #8
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	68d2      	ldr	r2, [r2, #12]
 8004ee2:	06d2      	lsls	r2, r2, #27
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	492a      	ldr	r1, [pc, #168]	@ (8004f90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	610b      	str	r3, [r1, #16]
 8004eec:	e027      	b.n	8004f3e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d112      	bne.n	8004f1a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ef4:	4b26      	ldr	r3, [pc, #152]	@ (8004f90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004efc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	6892      	ldr	r2, [r2, #8]
 8004f04:	0211      	lsls	r1, r2, #8
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	6912      	ldr	r2, [r2, #16]
 8004f0a:	0852      	lsrs	r2, r2, #1
 8004f0c:	3a01      	subs	r2, #1
 8004f0e:	0552      	lsls	r2, r2, #21
 8004f10:	430a      	orrs	r2, r1
 8004f12:	491f      	ldr	r1, [pc, #124]	@ (8004f90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	610b      	str	r3, [r1, #16]
 8004f18:	e011      	b.n	8004f3e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f1a:	4b1d      	ldr	r3, [pc, #116]	@ (8004f90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004f22:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	6892      	ldr	r2, [r2, #8]
 8004f2a:	0211      	lsls	r1, r2, #8
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	6952      	ldr	r2, [r2, #20]
 8004f30:	0852      	lsrs	r2, r2, #1
 8004f32:	3a01      	subs	r2, #1
 8004f34:	0652      	lsls	r2, r2, #25
 8004f36:	430a      	orrs	r2, r1
 8004f38:	4915      	ldr	r1, [pc, #84]	@ (8004f90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004f3e:	4b14      	ldr	r3, [pc, #80]	@ (8004f90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a13      	ldr	r2, [pc, #76]	@ (8004f90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f44:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004f48:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f4a:	f7fc fea1 	bl	8001c90 <HAL_GetTick>
 8004f4e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f50:	e009      	b.n	8004f66 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f52:	f7fc fe9d 	bl	8001c90 <HAL_GetTick>
 8004f56:	4602      	mov	r2, r0
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d902      	bls.n	8004f66 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	73fb      	strb	r3, [r7, #15]
          break;
 8004f64:	e005      	b.n	8004f72 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f66:	4b0a      	ldr	r3, [pc, #40]	@ (8004f90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d0ef      	beq.n	8004f52 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004f72:	7bfb      	ldrb	r3, [r7, #15]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d106      	bne.n	8004f86 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004f78:	4b05      	ldr	r3, [pc, #20]	@ (8004f90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f7a:	691a      	ldr	r2, [r3, #16]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	4903      	ldr	r1, [pc, #12]	@ (8004f90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3710      	adds	r7, #16
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	40021000 	.word	0x40021000

08004f94 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004fa2:	4b69      	ldr	r3, [pc, #420]	@ (8005148 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	f003 0303 	and.w	r3, r3, #3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d018      	beq.n	8004fe0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004fae:	4b66      	ldr	r3, [pc, #408]	@ (8005148 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	f003 0203 	and.w	r2, r3, #3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d10d      	bne.n	8004fda <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
       ||
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d009      	beq.n	8004fda <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004fc6:	4b60      	ldr	r3, [pc, #384]	@ (8005148 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	091b      	lsrs	r3, r3, #4
 8004fcc:	f003 0307 	and.w	r3, r3, #7
 8004fd0:	1c5a      	adds	r2, r3, #1
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
       ||
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d047      	beq.n	800506a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	73fb      	strb	r3, [r7, #15]
 8004fde:	e044      	b.n	800506a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2b03      	cmp	r3, #3
 8004fe6:	d018      	beq.n	800501a <RCCEx_PLLSAI2_Config+0x86>
 8004fe8:	2b03      	cmp	r3, #3
 8004fea:	d825      	bhi.n	8005038 <RCCEx_PLLSAI2_Config+0xa4>
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d002      	beq.n	8004ff6 <RCCEx_PLLSAI2_Config+0x62>
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d009      	beq.n	8005008 <RCCEx_PLLSAI2_Config+0x74>
 8004ff4:	e020      	b.n	8005038 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ff6:	4b54      	ldr	r3, [pc, #336]	@ (8005148 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d11d      	bne.n	800503e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005006:	e01a      	b.n	800503e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005008:	4b4f      	ldr	r3, [pc, #316]	@ (8005148 <RCCEx_PLLSAI2_Config+0x1b4>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005010:	2b00      	cmp	r3, #0
 8005012:	d116      	bne.n	8005042 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005018:	e013      	b.n	8005042 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800501a:	4b4b      	ldr	r3, [pc, #300]	@ (8005148 <RCCEx_PLLSAI2_Config+0x1b4>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d10f      	bne.n	8005046 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005026:	4b48      	ldr	r3, [pc, #288]	@ (8005148 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d109      	bne.n	8005046 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005036:	e006      	b.n	8005046 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	73fb      	strb	r3, [r7, #15]
      break;
 800503c:	e004      	b.n	8005048 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800503e:	bf00      	nop
 8005040:	e002      	b.n	8005048 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005042:	bf00      	nop
 8005044:	e000      	b.n	8005048 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005046:	bf00      	nop
    }

    if(status == HAL_OK)
 8005048:	7bfb      	ldrb	r3, [r7, #15]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10d      	bne.n	800506a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800504e:	4b3e      	ldr	r3, [pc, #248]	@ (8005148 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6819      	ldr	r1, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	3b01      	subs	r3, #1
 8005060:	011b      	lsls	r3, r3, #4
 8005062:	430b      	orrs	r3, r1
 8005064:	4938      	ldr	r1, [pc, #224]	@ (8005148 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005066:	4313      	orrs	r3, r2
 8005068:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800506a:	7bfb      	ldrb	r3, [r7, #15]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d166      	bne.n	800513e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005070:	4b35      	ldr	r3, [pc, #212]	@ (8005148 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a34      	ldr	r2, [pc, #208]	@ (8005148 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005076:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800507a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800507c:	f7fc fe08 	bl	8001c90 <HAL_GetTick>
 8005080:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005082:	e009      	b.n	8005098 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005084:	f7fc fe04 	bl	8001c90 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	2b02      	cmp	r3, #2
 8005090:	d902      	bls.n	8005098 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	73fb      	strb	r3, [r7, #15]
        break;
 8005096:	e005      	b.n	80050a4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005098:	4b2b      	ldr	r3, [pc, #172]	@ (8005148 <RCCEx_PLLSAI2_Config+0x1b4>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1ef      	bne.n	8005084 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80050a4:	7bfb      	ldrb	r3, [r7, #15]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d149      	bne.n	800513e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d110      	bne.n	80050d2 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050b0:	4b25      	ldr	r3, [pc, #148]	@ (8005148 <RCCEx_PLLSAI2_Config+0x1b4>)
 80050b2:	695b      	ldr	r3, [r3, #20]
 80050b4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80050b8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	6892      	ldr	r2, [r2, #8]
 80050c0:	0211      	lsls	r1, r2, #8
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	68d2      	ldr	r2, [r2, #12]
 80050c6:	06d2      	lsls	r2, r2, #27
 80050c8:	430a      	orrs	r2, r1
 80050ca:	491f      	ldr	r1, [pc, #124]	@ (8005148 <RCCEx_PLLSAI2_Config+0x1b4>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	614b      	str	r3, [r1, #20]
 80050d0:	e011      	b.n	80050f6 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050d2:	4b1d      	ldr	r3, [pc, #116]	@ (8005148 <RCCEx_PLLSAI2_Config+0x1b4>)
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80050da:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	6892      	ldr	r2, [r2, #8]
 80050e2:	0211      	lsls	r1, r2, #8
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	6912      	ldr	r2, [r2, #16]
 80050e8:	0852      	lsrs	r2, r2, #1
 80050ea:	3a01      	subs	r2, #1
 80050ec:	0652      	lsls	r2, r2, #25
 80050ee:	430a      	orrs	r2, r1
 80050f0:	4915      	ldr	r1, [pc, #84]	@ (8005148 <RCCEx_PLLSAI2_Config+0x1b4>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80050f6:	4b14      	ldr	r3, [pc, #80]	@ (8005148 <RCCEx_PLLSAI2_Config+0x1b4>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a13      	ldr	r2, [pc, #76]	@ (8005148 <RCCEx_PLLSAI2_Config+0x1b4>)
 80050fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005100:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005102:	f7fc fdc5 	bl	8001c90 <HAL_GetTick>
 8005106:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005108:	e009      	b.n	800511e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800510a:	f7fc fdc1 	bl	8001c90 <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	2b02      	cmp	r3, #2
 8005116:	d902      	bls.n	800511e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	73fb      	strb	r3, [r7, #15]
          break;
 800511c:	e005      	b.n	800512a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800511e:	4b0a      	ldr	r3, [pc, #40]	@ (8005148 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d0ef      	beq.n	800510a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800512a:	7bfb      	ldrb	r3, [r7, #15]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d106      	bne.n	800513e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005130:	4b05      	ldr	r3, [pc, #20]	@ (8005148 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005132:	695a      	ldr	r2, [r3, #20]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	695b      	ldr	r3, [r3, #20]
 8005138:	4903      	ldr	r1, [pc, #12]	@ (8005148 <RCCEx_PLLSAI2_Config+0x1b4>)
 800513a:	4313      	orrs	r3, r2
 800513c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800513e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005140:	4618      	mov	r0, r3
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	40021000 	.word	0x40021000

0800514c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e040      	b.n	80051e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005162:	2b00      	cmp	r3, #0
 8005164:	d106      	bne.n	8005174 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f7fc fb8a 	bl	8001888 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2224      	movs	r2, #36	@ 0x24
 8005178:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 0201 	bic.w	r2, r2, #1
 8005188:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800518e:	2b00      	cmp	r3, #0
 8005190:	d002      	beq.n	8005198 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 fb6a 	bl	800586c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 f8af 	bl	80052fc <UART_SetConfig>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d101      	bne.n	80051a8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e01b      	b.n	80051e0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	689a      	ldr	r2, [r3, #8]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80051c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f042 0201 	orr.w	r2, r2, #1
 80051d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 fbe9 	bl	80059b0 <UART_CheckIdleState>
 80051de:	4603      	mov	r3, r0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3708      	adds	r7, #8
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b08a      	sub	sp, #40	@ 0x28
 80051ec:	af02      	add	r7, sp, #8
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	603b      	str	r3, [r7, #0]
 80051f4:	4613      	mov	r3, r2
 80051f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051fc:	2b20      	cmp	r3, #32
 80051fe:	d177      	bne.n	80052f0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d002      	beq.n	800520c <HAL_UART_Transmit+0x24>
 8005206:	88fb      	ldrh	r3, [r7, #6]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d101      	bne.n	8005210 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e070      	b.n	80052f2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2200      	movs	r2, #0
 8005214:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2221      	movs	r2, #33	@ 0x21
 800521c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800521e:	f7fc fd37 	bl	8001c90 <HAL_GetTick>
 8005222:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	88fa      	ldrh	r2, [r7, #6]
 8005228:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	88fa      	ldrh	r2, [r7, #6]
 8005230:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800523c:	d108      	bne.n	8005250 <HAL_UART_Transmit+0x68>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d104      	bne.n	8005250 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005246:	2300      	movs	r3, #0
 8005248:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	61bb      	str	r3, [r7, #24]
 800524e:	e003      	b.n	8005258 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005254:	2300      	movs	r3, #0
 8005256:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005258:	e02f      	b.n	80052ba <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	9300      	str	r3, [sp, #0]
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	2200      	movs	r2, #0
 8005262:	2180      	movs	r1, #128	@ 0x80
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f000 fc4b 	bl	8005b00 <UART_WaitOnFlagUntilTimeout>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d004      	beq.n	800527a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2220      	movs	r2, #32
 8005274:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e03b      	b.n	80052f2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d10b      	bne.n	8005298 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	881a      	ldrh	r2, [r3, #0]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800528c:	b292      	uxth	r2, r2
 800528e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	3302      	adds	r3, #2
 8005294:	61bb      	str	r3, [r7, #24]
 8005296:	e007      	b.n	80052a8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	781a      	ldrb	r2, [r3, #0]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	3301      	adds	r3, #1
 80052a6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	3b01      	subs	r3, #1
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1c9      	bne.n	800525a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	9300      	str	r3, [sp, #0]
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	2200      	movs	r2, #0
 80052ce:	2140      	movs	r1, #64	@ 0x40
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f000 fc15 	bl	8005b00 <UART_WaitOnFlagUntilTimeout>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d004      	beq.n	80052e6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2220      	movs	r2, #32
 80052e0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e005      	b.n	80052f2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2220      	movs	r2, #32
 80052ea:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80052ec:	2300      	movs	r3, #0
 80052ee:	e000      	b.n	80052f2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80052f0:	2302      	movs	r3, #2
  }
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3720      	adds	r7, #32
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
	...

080052fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005300:	b08a      	sub	sp, #40	@ 0x28
 8005302:	af00      	add	r7, sp, #0
 8005304:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005306:	2300      	movs	r3, #0
 8005308:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	689a      	ldr	r2, [r3, #8]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	431a      	orrs	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	431a      	orrs	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	69db      	ldr	r3, [r3, #28]
 8005320:	4313      	orrs	r3, r2
 8005322:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	4ba4      	ldr	r3, [pc, #656]	@ (80055bc <UART_SetConfig+0x2c0>)
 800532c:	4013      	ands	r3, r2
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	6812      	ldr	r2, [r2, #0]
 8005332:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005334:	430b      	orrs	r3, r1
 8005336:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	68da      	ldr	r2, [r3, #12]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	430a      	orrs	r2, r1
 800534c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a99      	ldr	r2, [pc, #612]	@ (80055c0 <UART_SetConfig+0x2c4>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d004      	beq.n	8005368 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6a1b      	ldr	r3, [r3, #32]
 8005362:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005364:	4313      	orrs	r3, r2
 8005366:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005378:	430a      	orrs	r2, r1
 800537a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a90      	ldr	r2, [pc, #576]	@ (80055c4 <UART_SetConfig+0x2c8>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d126      	bne.n	80053d4 <UART_SetConfig+0xd8>
 8005386:	4b90      	ldr	r3, [pc, #576]	@ (80055c8 <UART_SetConfig+0x2cc>)
 8005388:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800538c:	f003 0303 	and.w	r3, r3, #3
 8005390:	2b03      	cmp	r3, #3
 8005392:	d81b      	bhi.n	80053cc <UART_SetConfig+0xd0>
 8005394:	a201      	add	r2, pc, #4	@ (adr r2, 800539c <UART_SetConfig+0xa0>)
 8005396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800539a:	bf00      	nop
 800539c:	080053ad 	.word	0x080053ad
 80053a0:	080053bd 	.word	0x080053bd
 80053a4:	080053b5 	.word	0x080053b5
 80053a8:	080053c5 	.word	0x080053c5
 80053ac:	2301      	movs	r3, #1
 80053ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053b2:	e116      	b.n	80055e2 <UART_SetConfig+0x2e6>
 80053b4:	2302      	movs	r3, #2
 80053b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053ba:	e112      	b.n	80055e2 <UART_SetConfig+0x2e6>
 80053bc:	2304      	movs	r3, #4
 80053be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053c2:	e10e      	b.n	80055e2 <UART_SetConfig+0x2e6>
 80053c4:	2308      	movs	r3, #8
 80053c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053ca:	e10a      	b.n	80055e2 <UART_SetConfig+0x2e6>
 80053cc:	2310      	movs	r3, #16
 80053ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053d2:	e106      	b.n	80055e2 <UART_SetConfig+0x2e6>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a7c      	ldr	r2, [pc, #496]	@ (80055cc <UART_SetConfig+0x2d0>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d138      	bne.n	8005450 <UART_SetConfig+0x154>
 80053de:	4b7a      	ldr	r3, [pc, #488]	@ (80055c8 <UART_SetConfig+0x2cc>)
 80053e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053e4:	f003 030c 	and.w	r3, r3, #12
 80053e8:	2b0c      	cmp	r3, #12
 80053ea:	d82d      	bhi.n	8005448 <UART_SetConfig+0x14c>
 80053ec:	a201      	add	r2, pc, #4	@ (adr r2, 80053f4 <UART_SetConfig+0xf8>)
 80053ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f2:	bf00      	nop
 80053f4:	08005429 	.word	0x08005429
 80053f8:	08005449 	.word	0x08005449
 80053fc:	08005449 	.word	0x08005449
 8005400:	08005449 	.word	0x08005449
 8005404:	08005439 	.word	0x08005439
 8005408:	08005449 	.word	0x08005449
 800540c:	08005449 	.word	0x08005449
 8005410:	08005449 	.word	0x08005449
 8005414:	08005431 	.word	0x08005431
 8005418:	08005449 	.word	0x08005449
 800541c:	08005449 	.word	0x08005449
 8005420:	08005449 	.word	0x08005449
 8005424:	08005441 	.word	0x08005441
 8005428:	2300      	movs	r3, #0
 800542a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800542e:	e0d8      	b.n	80055e2 <UART_SetConfig+0x2e6>
 8005430:	2302      	movs	r3, #2
 8005432:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005436:	e0d4      	b.n	80055e2 <UART_SetConfig+0x2e6>
 8005438:	2304      	movs	r3, #4
 800543a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800543e:	e0d0      	b.n	80055e2 <UART_SetConfig+0x2e6>
 8005440:	2308      	movs	r3, #8
 8005442:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005446:	e0cc      	b.n	80055e2 <UART_SetConfig+0x2e6>
 8005448:	2310      	movs	r3, #16
 800544a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800544e:	e0c8      	b.n	80055e2 <UART_SetConfig+0x2e6>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a5e      	ldr	r2, [pc, #376]	@ (80055d0 <UART_SetConfig+0x2d4>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d125      	bne.n	80054a6 <UART_SetConfig+0x1aa>
 800545a:	4b5b      	ldr	r3, [pc, #364]	@ (80055c8 <UART_SetConfig+0x2cc>)
 800545c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005460:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005464:	2b30      	cmp	r3, #48	@ 0x30
 8005466:	d016      	beq.n	8005496 <UART_SetConfig+0x19a>
 8005468:	2b30      	cmp	r3, #48	@ 0x30
 800546a:	d818      	bhi.n	800549e <UART_SetConfig+0x1a2>
 800546c:	2b20      	cmp	r3, #32
 800546e:	d00a      	beq.n	8005486 <UART_SetConfig+0x18a>
 8005470:	2b20      	cmp	r3, #32
 8005472:	d814      	bhi.n	800549e <UART_SetConfig+0x1a2>
 8005474:	2b00      	cmp	r3, #0
 8005476:	d002      	beq.n	800547e <UART_SetConfig+0x182>
 8005478:	2b10      	cmp	r3, #16
 800547a:	d008      	beq.n	800548e <UART_SetConfig+0x192>
 800547c:	e00f      	b.n	800549e <UART_SetConfig+0x1a2>
 800547e:	2300      	movs	r3, #0
 8005480:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005484:	e0ad      	b.n	80055e2 <UART_SetConfig+0x2e6>
 8005486:	2302      	movs	r3, #2
 8005488:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800548c:	e0a9      	b.n	80055e2 <UART_SetConfig+0x2e6>
 800548e:	2304      	movs	r3, #4
 8005490:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005494:	e0a5      	b.n	80055e2 <UART_SetConfig+0x2e6>
 8005496:	2308      	movs	r3, #8
 8005498:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800549c:	e0a1      	b.n	80055e2 <UART_SetConfig+0x2e6>
 800549e:	2310      	movs	r3, #16
 80054a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054a4:	e09d      	b.n	80055e2 <UART_SetConfig+0x2e6>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a4a      	ldr	r2, [pc, #296]	@ (80055d4 <UART_SetConfig+0x2d8>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d125      	bne.n	80054fc <UART_SetConfig+0x200>
 80054b0:	4b45      	ldr	r3, [pc, #276]	@ (80055c8 <UART_SetConfig+0x2cc>)
 80054b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054b6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80054ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80054bc:	d016      	beq.n	80054ec <UART_SetConfig+0x1f0>
 80054be:	2bc0      	cmp	r3, #192	@ 0xc0
 80054c0:	d818      	bhi.n	80054f4 <UART_SetConfig+0x1f8>
 80054c2:	2b80      	cmp	r3, #128	@ 0x80
 80054c4:	d00a      	beq.n	80054dc <UART_SetConfig+0x1e0>
 80054c6:	2b80      	cmp	r3, #128	@ 0x80
 80054c8:	d814      	bhi.n	80054f4 <UART_SetConfig+0x1f8>
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d002      	beq.n	80054d4 <UART_SetConfig+0x1d8>
 80054ce:	2b40      	cmp	r3, #64	@ 0x40
 80054d0:	d008      	beq.n	80054e4 <UART_SetConfig+0x1e8>
 80054d2:	e00f      	b.n	80054f4 <UART_SetConfig+0x1f8>
 80054d4:	2300      	movs	r3, #0
 80054d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054da:	e082      	b.n	80055e2 <UART_SetConfig+0x2e6>
 80054dc:	2302      	movs	r3, #2
 80054de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054e2:	e07e      	b.n	80055e2 <UART_SetConfig+0x2e6>
 80054e4:	2304      	movs	r3, #4
 80054e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054ea:	e07a      	b.n	80055e2 <UART_SetConfig+0x2e6>
 80054ec:	2308      	movs	r3, #8
 80054ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054f2:	e076      	b.n	80055e2 <UART_SetConfig+0x2e6>
 80054f4:	2310      	movs	r3, #16
 80054f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054fa:	e072      	b.n	80055e2 <UART_SetConfig+0x2e6>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a35      	ldr	r2, [pc, #212]	@ (80055d8 <UART_SetConfig+0x2dc>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d12a      	bne.n	800555c <UART_SetConfig+0x260>
 8005506:	4b30      	ldr	r3, [pc, #192]	@ (80055c8 <UART_SetConfig+0x2cc>)
 8005508:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800550c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005510:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005514:	d01a      	beq.n	800554c <UART_SetConfig+0x250>
 8005516:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800551a:	d81b      	bhi.n	8005554 <UART_SetConfig+0x258>
 800551c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005520:	d00c      	beq.n	800553c <UART_SetConfig+0x240>
 8005522:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005526:	d815      	bhi.n	8005554 <UART_SetConfig+0x258>
 8005528:	2b00      	cmp	r3, #0
 800552a:	d003      	beq.n	8005534 <UART_SetConfig+0x238>
 800552c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005530:	d008      	beq.n	8005544 <UART_SetConfig+0x248>
 8005532:	e00f      	b.n	8005554 <UART_SetConfig+0x258>
 8005534:	2300      	movs	r3, #0
 8005536:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800553a:	e052      	b.n	80055e2 <UART_SetConfig+0x2e6>
 800553c:	2302      	movs	r3, #2
 800553e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005542:	e04e      	b.n	80055e2 <UART_SetConfig+0x2e6>
 8005544:	2304      	movs	r3, #4
 8005546:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800554a:	e04a      	b.n	80055e2 <UART_SetConfig+0x2e6>
 800554c:	2308      	movs	r3, #8
 800554e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005552:	e046      	b.n	80055e2 <UART_SetConfig+0x2e6>
 8005554:	2310      	movs	r3, #16
 8005556:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800555a:	e042      	b.n	80055e2 <UART_SetConfig+0x2e6>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a17      	ldr	r2, [pc, #92]	@ (80055c0 <UART_SetConfig+0x2c4>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d13a      	bne.n	80055dc <UART_SetConfig+0x2e0>
 8005566:	4b18      	ldr	r3, [pc, #96]	@ (80055c8 <UART_SetConfig+0x2cc>)
 8005568:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800556c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005570:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005574:	d01a      	beq.n	80055ac <UART_SetConfig+0x2b0>
 8005576:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800557a:	d81b      	bhi.n	80055b4 <UART_SetConfig+0x2b8>
 800557c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005580:	d00c      	beq.n	800559c <UART_SetConfig+0x2a0>
 8005582:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005586:	d815      	bhi.n	80055b4 <UART_SetConfig+0x2b8>
 8005588:	2b00      	cmp	r3, #0
 800558a:	d003      	beq.n	8005594 <UART_SetConfig+0x298>
 800558c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005590:	d008      	beq.n	80055a4 <UART_SetConfig+0x2a8>
 8005592:	e00f      	b.n	80055b4 <UART_SetConfig+0x2b8>
 8005594:	2300      	movs	r3, #0
 8005596:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800559a:	e022      	b.n	80055e2 <UART_SetConfig+0x2e6>
 800559c:	2302      	movs	r3, #2
 800559e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055a2:	e01e      	b.n	80055e2 <UART_SetConfig+0x2e6>
 80055a4:	2304      	movs	r3, #4
 80055a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055aa:	e01a      	b.n	80055e2 <UART_SetConfig+0x2e6>
 80055ac:	2308      	movs	r3, #8
 80055ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055b2:	e016      	b.n	80055e2 <UART_SetConfig+0x2e6>
 80055b4:	2310      	movs	r3, #16
 80055b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055ba:	e012      	b.n	80055e2 <UART_SetConfig+0x2e6>
 80055bc:	efff69f3 	.word	0xefff69f3
 80055c0:	40008000 	.word	0x40008000
 80055c4:	40013800 	.word	0x40013800
 80055c8:	40021000 	.word	0x40021000
 80055cc:	40004400 	.word	0x40004400
 80055d0:	40004800 	.word	0x40004800
 80055d4:	40004c00 	.word	0x40004c00
 80055d8:	40005000 	.word	0x40005000
 80055dc:	2310      	movs	r3, #16
 80055de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a9f      	ldr	r2, [pc, #636]	@ (8005864 <UART_SetConfig+0x568>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d17a      	bne.n	80056e2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80055ec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80055f0:	2b08      	cmp	r3, #8
 80055f2:	d824      	bhi.n	800563e <UART_SetConfig+0x342>
 80055f4:	a201      	add	r2, pc, #4	@ (adr r2, 80055fc <UART_SetConfig+0x300>)
 80055f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055fa:	bf00      	nop
 80055fc:	08005621 	.word	0x08005621
 8005600:	0800563f 	.word	0x0800563f
 8005604:	08005629 	.word	0x08005629
 8005608:	0800563f 	.word	0x0800563f
 800560c:	0800562f 	.word	0x0800562f
 8005610:	0800563f 	.word	0x0800563f
 8005614:	0800563f 	.word	0x0800563f
 8005618:	0800563f 	.word	0x0800563f
 800561c:	08005637 	.word	0x08005637
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005620:	f7ff f83e 	bl	80046a0 <HAL_RCC_GetPCLK1Freq>
 8005624:	61f8      	str	r0, [r7, #28]
        break;
 8005626:	e010      	b.n	800564a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005628:	4b8f      	ldr	r3, [pc, #572]	@ (8005868 <UART_SetConfig+0x56c>)
 800562a:	61fb      	str	r3, [r7, #28]
        break;
 800562c:	e00d      	b.n	800564a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800562e:	f7fe ff9f 	bl	8004570 <HAL_RCC_GetSysClockFreq>
 8005632:	61f8      	str	r0, [r7, #28]
        break;
 8005634:	e009      	b.n	800564a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005636:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800563a:	61fb      	str	r3, [r7, #28]
        break;
 800563c:	e005      	b.n	800564a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800563e:	2300      	movs	r3, #0
 8005640:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005648:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	2b00      	cmp	r3, #0
 800564e:	f000 80fb 	beq.w	8005848 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	685a      	ldr	r2, [r3, #4]
 8005656:	4613      	mov	r3, r2
 8005658:	005b      	lsls	r3, r3, #1
 800565a:	4413      	add	r3, r2
 800565c:	69fa      	ldr	r2, [r7, #28]
 800565e:	429a      	cmp	r2, r3
 8005660:	d305      	bcc.n	800566e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005668:	69fa      	ldr	r2, [r7, #28]
 800566a:	429a      	cmp	r2, r3
 800566c:	d903      	bls.n	8005676 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005674:	e0e8      	b.n	8005848 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	2200      	movs	r2, #0
 800567a:	461c      	mov	r4, r3
 800567c:	4615      	mov	r5, r2
 800567e:	f04f 0200 	mov.w	r2, #0
 8005682:	f04f 0300 	mov.w	r3, #0
 8005686:	022b      	lsls	r3, r5, #8
 8005688:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800568c:	0222      	lsls	r2, r4, #8
 800568e:	68f9      	ldr	r1, [r7, #12]
 8005690:	6849      	ldr	r1, [r1, #4]
 8005692:	0849      	lsrs	r1, r1, #1
 8005694:	2000      	movs	r0, #0
 8005696:	4688      	mov	r8, r1
 8005698:	4681      	mov	r9, r0
 800569a:	eb12 0a08 	adds.w	sl, r2, r8
 800569e:	eb43 0b09 	adc.w	fp, r3, r9
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	603b      	str	r3, [r7, #0]
 80056aa:	607a      	str	r2, [r7, #4]
 80056ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056b0:	4650      	mov	r0, sl
 80056b2:	4659      	mov	r1, fp
 80056b4:	f7fb fc06 	bl	8000ec4 <__aeabi_uldivmod>
 80056b8:	4602      	mov	r2, r0
 80056ba:	460b      	mov	r3, r1
 80056bc:	4613      	mov	r3, r2
 80056be:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056c6:	d308      	bcc.n	80056da <UART_SetConfig+0x3de>
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056ce:	d204      	bcs.n	80056da <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	60da      	str	r2, [r3, #12]
 80056d8:	e0b6      	b.n	8005848 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80056e0:	e0b2      	b.n	8005848 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	69db      	ldr	r3, [r3, #28]
 80056e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056ea:	d15e      	bne.n	80057aa <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80056ec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80056f0:	2b08      	cmp	r3, #8
 80056f2:	d828      	bhi.n	8005746 <UART_SetConfig+0x44a>
 80056f4:	a201      	add	r2, pc, #4	@ (adr r2, 80056fc <UART_SetConfig+0x400>)
 80056f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056fa:	bf00      	nop
 80056fc:	08005721 	.word	0x08005721
 8005700:	08005729 	.word	0x08005729
 8005704:	08005731 	.word	0x08005731
 8005708:	08005747 	.word	0x08005747
 800570c:	08005737 	.word	0x08005737
 8005710:	08005747 	.word	0x08005747
 8005714:	08005747 	.word	0x08005747
 8005718:	08005747 	.word	0x08005747
 800571c:	0800573f 	.word	0x0800573f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005720:	f7fe ffbe 	bl	80046a0 <HAL_RCC_GetPCLK1Freq>
 8005724:	61f8      	str	r0, [r7, #28]
        break;
 8005726:	e014      	b.n	8005752 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005728:	f7fe ffd0 	bl	80046cc <HAL_RCC_GetPCLK2Freq>
 800572c:	61f8      	str	r0, [r7, #28]
        break;
 800572e:	e010      	b.n	8005752 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005730:	4b4d      	ldr	r3, [pc, #308]	@ (8005868 <UART_SetConfig+0x56c>)
 8005732:	61fb      	str	r3, [r7, #28]
        break;
 8005734:	e00d      	b.n	8005752 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005736:	f7fe ff1b 	bl	8004570 <HAL_RCC_GetSysClockFreq>
 800573a:	61f8      	str	r0, [r7, #28]
        break;
 800573c:	e009      	b.n	8005752 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800573e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005742:	61fb      	str	r3, [r7, #28]
        break;
 8005744:	e005      	b.n	8005752 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005746:	2300      	movs	r3, #0
 8005748:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005750:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d077      	beq.n	8005848 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	005a      	lsls	r2, r3, #1
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	085b      	lsrs	r3, r3, #1
 8005762:	441a      	add	r2, r3
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	fbb2 f3f3 	udiv	r3, r2, r3
 800576c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	2b0f      	cmp	r3, #15
 8005772:	d916      	bls.n	80057a2 <UART_SetConfig+0x4a6>
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800577a:	d212      	bcs.n	80057a2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	b29b      	uxth	r3, r3
 8005780:	f023 030f 	bic.w	r3, r3, #15
 8005784:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	085b      	lsrs	r3, r3, #1
 800578a:	b29b      	uxth	r3, r3
 800578c:	f003 0307 	and.w	r3, r3, #7
 8005790:	b29a      	uxth	r2, r3
 8005792:	8afb      	ldrh	r3, [r7, #22]
 8005794:	4313      	orrs	r3, r2
 8005796:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	8afa      	ldrh	r2, [r7, #22]
 800579e:	60da      	str	r2, [r3, #12]
 80057a0:	e052      	b.n	8005848 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80057a8:	e04e      	b.n	8005848 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057aa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80057ae:	2b08      	cmp	r3, #8
 80057b0:	d827      	bhi.n	8005802 <UART_SetConfig+0x506>
 80057b2:	a201      	add	r2, pc, #4	@ (adr r2, 80057b8 <UART_SetConfig+0x4bc>)
 80057b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b8:	080057dd 	.word	0x080057dd
 80057bc:	080057e5 	.word	0x080057e5
 80057c0:	080057ed 	.word	0x080057ed
 80057c4:	08005803 	.word	0x08005803
 80057c8:	080057f3 	.word	0x080057f3
 80057cc:	08005803 	.word	0x08005803
 80057d0:	08005803 	.word	0x08005803
 80057d4:	08005803 	.word	0x08005803
 80057d8:	080057fb 	.word	0x080057fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057dc:	f7fe ff60 	bl	80046a0 <HAL_RCC_GetPCLK1Freq>
 80057e0:	61f8      	str	r0, [r7, #28]
        break;
 80057e2:	e014      	b.n	800580e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057e4:	f7fe ff72 	bl	80046cc <HAL_RCC_GetPCLK2Freq>
 80057e8:	61f8      	str	r0, [r7, #28]
        break;
 80057ea:	e010      	b.n	800580e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057ec:	4b1e      	ldr	r3, [pc, #120]	@ (8005868 <UART_SetConfig+0x56c>)
 80057ee:	61fb      	str	r3, [r7, #28]
        break;
 80057f0:	e00d      	b.n	800580e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057f2:	f7fe febd 	bl	8004570 <HAL_RCC_GetSysClockFreq>
 80057f6:	61f8      	str	r0, [r7, #28]
        break;
 80057f8:	e009      	b.n	800580e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057fe:	61fb      	str	r3, [r7, #28]
        break;
 8005800:	e005      	b.n	800580e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005802:	2300      	movs	r3, #0
 8005804:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800580c:	bf00      	nop
    }

    if (pclk != 0U)
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d019      	beq.n	8005848 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	085a      	lsrs	r2, r3, #1
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	441a      	add	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	fbb2 f3f3 	udiv	r3, r2, r3
 8005826:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	2b0f      	cmp	r3, #15
 800582c:	d909      	bls.n	8005842 <UART_SetConfig+0x546>
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005834:	d205      	bcs.n	8005842 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	b29a      	uxth	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	60da      	str	r2, [r3, #12]
 8005840:	e002      	b.n	8005848 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005854:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005858:	4618      	mov	r0, r3
 800585a:	3728      	adds	r7, #40	@ 0x28
 800585c:	46bd      	mov	sp, r7
 800585e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005862:	bf00      	nop
 8005864:	40008000 	.word	0x40008000
 8005868:	00f42400 	.word	0x00f42400

0800586c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005878:	f003 0308 	and.w	r3, r3, #8
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00a      	beq.n	8005896 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	430a      	orrs	r2, r1
 8005894:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800589a:	f003 0301 	and.w	r3, r3, #1
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00a      	beq.n	80058b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	430a      	orrs	r2, r1
 80058b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058bc:	f003 0302 	and.w	r3, r3, #2
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00a      	beq.n	80058da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	430a      	orrs	r2, r1
 80058d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058de:	f003 0304 	and.w	r3, r3, #4
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00a      	beq.n	80058fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	430a      	orrs	r2, r1
 80058fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005900:	f003 0310 	and.w	r3, r3, #16
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00a      	beq.n	800591e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	430a      	orrs	r2, r1
 800591c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005922:	f003 0320 	and.w	r3, r3, #32
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00a      	beq.n	8005940 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	430a      	orrs	r2, r1
 800593e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005948:	2b00      	cmp	r3, #0
 800594a:	d01a      	beq.n	8005982 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	430a      	orrs	r2, r1
 8005960:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005966:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800596a:	d10a      	bne.n	8005982 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	430a      	orrs	r2, r1
 8005980:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005986:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00a      	beq.n	80059a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	430a      	orrs	r2, r1
 80059a2:	605a      	str	r2, [r3, #4]
  }
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b098      	sub	sp, #96	@ 0x60
 80059b4:	af02      	add	r7, sp, #8
 80059b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059c0:	f7fc f966 	bl	8001c90 <HAL_GetTick>
 80059c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0308 	and.w	r3, r3, #8
 80059d0:	2b08      	cmp	r3, #8
 80059d2:	d12e      	bne.n	8005a32 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80059d8:	9300      	str	r3, [sp, #0]
 80059da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059dc:	2200      	movs	r2, #0
 80059de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f88c 	bl	8005b00 <UART_WaitOnFlagUntilTimeout>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d021      	beq.n	8005a32 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059f6:	e853 3f00 	ldrex	r3, [r3]
 80059fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80059fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a02:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	461a      	mov	r2, r3
 8005a0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a0e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a14:	e841 2300 	strex	r3, r2, [r1]
 8005a18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1e6      	bne.n	80059ee <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2220      	movs	r2, #32
 8005a24:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e062      	b.n	8005af8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0304 	and.w	r3, r3, #4
 8005a3c:	2b04      	cmp	r3, #4
 8005a3e:	d149      	bne.n	8005ad4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a40:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a44:	9300      	str	r3, [sp, #0]
 8005a46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 f856 	bl	8005b00 <UART_WaitOnFlagUntilTimeout>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d03c      	beq.n	8005ad4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a62:	e853 3f00 	ldrex	r3, [r3]
 8005a66:	623b      	str	r3, [r7, #32]
   return(result);
 8005a68:	6a3b      	ldr	r3, [r7, #32]
 8005a6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	461a      	mov	r2, r3
 8005a76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a78:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a7c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a80:	e841 2300 	strex	r3, r2, [r1]
 8005a84:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1e6      	bne.n	8005a5a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	3308      	adds	r3, #8
 8005a92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	e853 3f00 	ldrex	r3, [r3]
 8005a9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f023 0301 	bic.w	r3, r3, #1
 8005aa2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	3308      	adds	r3, #8
 8005aaa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005aac:	61fa      	str	r2, [r7, #28]
 8005aae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab0:	69b9      	ldr	r1, [r7, #24]
 8005ab2:	69fa      	ldr	r2, [r7, #28]
 8005ab4:	e841 2300 	strex	r3, r2, [r1]
 8005ab8:	617b      	str	r3, [r7, #20]
   return(result);
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d1e5      	bne.n	8005a8c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2220      	movs	r2, #32
 8005ac4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e011      	b.n	8005af8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2220      	movs	r2, #32
 8005ad8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2220      	movs	r2, #32
 8005ade:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3758      	adds	r7, #88	@ 0x58
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	603b      	str	r3, [r7, #0]
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b10:	e04f      	b.n	8005bb2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b18:	d04b      	beq.n	8005bb2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b1a:	f7fc f8b9 	bl	8001c90 <HAL_GetTick>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	69ba      	ldr	r2, [r7, #24]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d302      	bcc.n	8005b30 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d101      	bne.n	8005b34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e04e      	b.n	8005bd2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0304 	and.w	r3, r3, #4
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d037      	beq.n	8005bb2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	2b80      	cmp	r3, #128	@ 0x80
 8005b46:	d034      	beq.n	8005bb2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	2b40      	cmp	r3, #64	@ 0x40
 8005b4c:	d031      	beq.n	8005bb2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	69db      	ldr	r3, [r3, #28]
 8005b54:	f003 0308 	and.w	r3, r3, #8
 8005b58:	2b08      	cmp	r3, #8
 8005b5a:	d110      	bne.n	8005b7e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2208      	movs	r2, #8
 8005b62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f000 f838 	bl	8005bda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2208      	movs	r2, #8
 8005b6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e029      	b.n	8005bd2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	69db      	ldr	r3, [r3, #28]
 8005b84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b8c:	d111      	bne.n	8005bb2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f000 f81e 	bl	8005bda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2220      	movs	r2, #32
 8005ba2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e00f      	b.n	8005bd2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	69da      	ldr	r2, [r3, #28]
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	4013      	ands	r3, r2
 8005bbc:	68ba      	ldr	r2, [r7, #8]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	bf0c      	ite	eq
 8005bc2:	2301      	moveq	r3, #1
 8005bc4:	2300      	movne	r3, #0
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	461a      	mov	r2, r3
 8005bca:	79fb      	ldrb	r3, [r7, #7]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d0a0      	beq.n	8005b12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b095      	sub	sp, #84	@ 0x54
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bea:	e853 3f00 	ldrex	r3, [r3]
 8005bee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c00:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c02:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c04:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c08:	e841 2300 	strex	r3, r2, [r1]
 8005c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d1e6      	bne.n	8005be2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	3308      	adds	r3, #8
 8005c1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c1c:	6a3b      	ldr	r3, [r7, #32]
 8005c1e:	e853 3f00 	ldrex	r3, [r3]
 8005c22:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	f023 0301 	bic.w	r3, r3, #1
 8005c2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	3308      	adds	r3, #8
 8005c32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c34:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c3c:	e841 2300 	strex	r3, r2, [r1]
 8005c40:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1e5      	bne.n	8005c14 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d118      	bne.n	8005c82 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	e853 3f00 	ldrex	r3, [r3]
 8005c5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	f023 0310 	bic.w	r3, r3, #16
 8005c64:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c6e:	61bb      	str	r3, [r7, #24]
 8005c70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c72:	6979      	ldr	r1, [r7, #20]
 8005c74:	69ba      	ldr	r2, [r7, #24]
 8005c76:	e841 2300 	strex	r3, r2, [r1]
 8005c7a:	613b      	str	r3, [r7, #16]
   return(result);
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d1e6      	bne.n	8005c50 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2220      	movs	r2, #32
 8005c86:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005c96:	bf00      	nop
 8005c98:	3754      	adds	r7, #84	@ 0x54
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr

08005ca2 <__cvt>:
 8005ca2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ca6:	ec57 6b10 	vmov	r6, r7, d0
 8005caa:	2f00      	cmp	r7, #0
 8005cac:	460c      	mov	r4, r1
 8005cae:	4619      	mov	r1, r3
 8005cb0:	463b      	mov	r3, r7
 8005cb2:	bfbb      	ittet	lt
 8005cb4:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005cb8:	461f      	movlt	r7, r3
 8005cba:	2300      	movge	r3, #0
 8005cbc:	232d      	movlt	r3, #45	@ 0x2d
 8005cbe:	700b      	strb	r3, [r1, #0]
 8005cc0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005cc2:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005cc6:	4691      	mov	r9, r2
 8005cc8:	f023 0820 	bic.w	r8, r3, #32
 8005ccc:	bfbc      	itt	lt
 8005cce:	4632      	movlt	r2, r6
 8005cd0:	4616      	movlt	r6, r2
 8005cd2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005cd6:	d005      	beq.n	8005ce4 <__cvt+0x42>
 8005cd8:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005cdc:	d100      	bne.n	8005ce0 <__cvt+0x3e>
 8005cde:	3401      	adds	r4, #1
 8005ce0:	2102      	movs	r1, #2
 8005ce2:	e000      	b.n	8005ce6 <__cvt+0x44>
 8005ce4:	2103      	movs	r1, #3
 8005ce6:	ab03      	add	r3, sp, #12
 8005ce8:	9301      	str	r3, [sp, #4]
 8005cea:	ab02      	add	r3, sp, #8
 8005cec:	9300      	str	r3, [sp, #0]
 8005cee:	ec47 6b10 	vmov	d0, r6, r7
 8005cf2:	4653      	mov	r3, sl
 8005cf4:	4622      	mov	r2, r4
 8005cf6:	f001 f873 	bl	8006de0 <_dtoa_r>
 8005cfa:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005cfe:	4605      	mov	r5, r0
 8005d00:	d119      	bne.n	8005d36 <__cvt+0x94>
 8005d02:	f019 0f01 	tst.w	r9, #1
 8005d06:	d00e      	beq.n	8005d26 <__cvt+0x84>
 8005d08:	eb00 0904 	add.w	r9, r0, r4
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	2300      	movs	r3, #0
 8005d10:	4630      	mov	r0, r6
 8005d12:	4639      	mov	r1, r7
 8005d14:	f7fa fee8 	bl	8000ae8 <__aeabi_dcmpeq>
 8005d18:	b108      	cbz	r0, 8005d1e <__cvt+0x7c>
 8005d1a:	f8cd 900c 	str.w	r9, [sp, #12]
 8005d1e:	2230      	movs	r2, #48	@ 0x30
 8005d20:	9b03      	ldr	r3, [sp, #12]
 8005d22:	454b      	cmp	r3, r9
 8005d24:	d31e      	bcc.n	8005d64 <__cvt+0xc2>
 8005d26:	9b03      	ldr	r3, [sp, #12]
 8005d28:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005d2a:	1b5b      	subs	r3, r3, r5
 8005d2c:	4628      	mov	r0, r5
 8005d2e:	6013      	str	r3, [r2, #0]
 8005d30:	b004      	add	sp, #16
 8005d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d36:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005d3a:	eb00 0904 	add.w	r9, r0, r4
 8005d3e:	d1e5      	bne.n	8005d0c <__cvt+0x6a>
 8005d40:	7803      	ldrb	r3, [r0, #0]
 8005d42:	2b30      	cmp	r3, #48	@ 0x30
 8005d44:	d10a      	bne.n	8005d5c <__cvt+0xba>
 8005d46:	2200      	movs	r2, #0
 8005d48:	2300      	movs	r3, #0
 8005d4a:	4630      	mov	r0, r6
 8005d4c:	4639      	mov	r1, r7
 8005d4e:	f7fa fecb 	bl	8000ae8 <__aeabi_dcmpeq>
 8005d52:	b918      	cbnz	r0, 8005d5c <__cvt+0xba>
 8005d54:	f1c4 0401 	rsb	r4, r4, #1
 8005d58:	f8ca 4000 	str.w	r4, [sl]
 8005d5c:	f8da 3000 	ldr.w	r3, [sl]
 8005d60:	4499      	add	r9, r3
 8005d62:	e7d3      	b.n	8005d0c <__cvt+0x6a>
 8005d64:	1c59      	adds	r1, r3, #1
 8005d66:	9103      	str	r1, [sp, #12]
 8005d68:	701a      	strb	r2, [r3, #0]
 8005d6a:	e7d9      	b.n	8005d20 <__cvt+0x7e>

08005d6c <__exponent>:
 8005d6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d6e:	2900      	cmp	r1, #0
 8005d70:	bfba      	itte	lt
 8005d72:	4249      	neglt	r1, r1
 8005d74:	232d      	movlt	r3, #45	@ 0x2d
 8005d76:	232b      	movge	r3, #43	@ 0x2b
 8005d78:	2909      	cmp	r1, #9
 8005d7a:	7002      	strb	r2, [r0, #0]
 8005d7c:	7043      	strb	r3, [r0, #1]
 8005d7e:	dd29      	ble.n	8005dd4 <__exponent+0x68>
 8005d80:	f10d 0307 	add.w	r3, sp, #7
 8005d84:	461d      	mov	r5, r3
 8005d86:	270a      	movs	r7, #10
 8005d88:	461a      	mov	r2, r3
 8005d8a:	fbb1 f6f7 	udiv	r6, r1, r7
 8005d8e:	fb07 1416 	mls	r4, r7, r6, r1
 8005d92:	3430      	adds	r4, #48	@ 0x30
 8005d94:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005d98:	460c      	mov	r4, r1
 8005d9a:	2c63      	cmp	r4, #99	@ 0x63
 8005d9c:	f103 33ff 	add.w	r3, r3, #4294967295
 8005da0:	4631      	mov	r1, r6
 8005da2:	dcf1      	bgt.n	8005d88 <__exponent+0x1c>
 8005da4:	3130      	adds	r1, #48	@ 0x30
 8005da6:	1e94      	subs	r4, r2, #2
 8005da8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005dac:	1c41      	adds	r1, r0, #1
 8005dae:	4623      	mov	r3, r4
 8005db0:	42ab      	cmp	r3, r5
 8005db2:	d30a      	bcc.n	8005dca <__exponent+0x5e>
 8005db4:	f10d 0309 	add.w	r3, sp, #9
 8005db8:	1a9b      	subs	r3, r3, r2
 8005dba:	42ac      	cmp	r4, r5
 8005dbc:	bf88      	it	hi
 8005dbe:	2300      	movhi	r3, #0
 8005dc0:	3302      	adds	r3, #2
 8005dc2:	4403      	add	r3, r0
 8005dc4:	1a18      	subs	r0, r3, r0
 8005dc6:	b003      	add	sp, #12
 8005dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dca:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005dce:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005dd2:	e7ed      	b.n	8005db0 <__exponent+0x44>
 8005dd4:	2330      	movs	r3, #48	@ 0x30
 8005dd6:	3130      	adds	r1, #48	@ 0x30
 8005dd8:	7083      	strb	r3, [r0, #2]
 8005dda:	70c1      	strb	r1, [r0, #3]
 8005ddc:	1d03      	adds	r3, r0, #4
 8005dde:	e7f1      	b.n	8005dc4 <__exponent+0x58>

08005de0 <_printf_float>:
 8005de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005de4:	b08d      	sub	sp, #52	@ 0x34
 8005de6:	460c      	mov	r4, r1
 8005de8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005dec:	4616      	mov	r6, r2
 8005dee:	461f      	mov	r7, r3
 8005df0:	4605      	mov	r5, r0
 8005df2:	f000 feef 	bl	8006bd4 <_localeconv_r>
 8005df6:	6803      	ldr	r3, [r0, #0]
 8005df8:	9304      	str	r3, [sp, #16]
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f7fa fa48 	bl	8000290 <strlen>
 8005e00:	2300      	movs	r3, #0
 8005e02:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e04:	f8d8 3000 	ldr.w	r3, [r8]
 8005e08:	9005      	str	r0, [sp, #20]
 8005e0a:	3307      	adds	r3, #7
 8005e0c:	f023 0307 	bic.w	r3, r3, #7
 8005e10:	f103 0208 	add.w	r2, r3, #8
 8005e14:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005e18:	f8d4 b000 	ldr.w	fp, [r4]
 8005e1c:	f8c8 2000 	str.w	r2, [r8]
 8005e20:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e24:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005e28:	9307      	str	r3, [sp, #28]
 8005e2a:	f8cd 8018 	str.w	r8, [sp, #24]
 8005e2e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005e32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e36:	4b9c      	ldr	r3, [pc, #624]	@ (80060a8 <_printf_float+0x2c8>)
 8005e38:	f04f 32ff 	mov.w	r2, #4294967295
 8005e3c:	f7fa fe86 	bl	8000b4c <__aeabi_dcmpun>
 8005e40:	bb70      	cbnz	r0, 8005ea0 <_printf_float+0xc0>
 8005e42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e46:	4b98      	ldr	r3, [pc, #608]	@ (80060a8 <_printf_float+0x2c8>)
 8005e48:	f04f 32ff 	mov.w	r2, #4294967295
 8005e4c:	f7fa fe60 	bl	8000b10 <__aeabi_dcmple>
 8005e50:	bb30      	cbnz	r0, 8005ea0 <_printf_float+0xc0>
 8005e52:	2200      	movs	r2, #0
 8005e54:	2300      	movs	r3, #0
 8005e56:	4640      	mov	r0, r8
 8005e58:	4649      	mov	r1, r9
 8005e5a:	f7fa fe4f 	bl	8000afc <__aeabi_dcmplt>
 8005e5e:	b110      	cbz	r0, 8005e66 <_printf_float+0x86>
 8005e60:	232d      	movs	r3, #45	@ 0x2d
 8005e62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e66:	4a91      	ldr	r2, [pc, #580]	@ (80060ac <_printf_float+0x2cc>)
 8005e68:	4b91      	ldr	r3, [pc, #580]	@ (80060b0 <_printf_float+0x2d0>)
 8005e6a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005e6e:	bf94      	ite	ls
 8005e70:	4690      	movls	r8, r2
 8005e72:	4698      	movhi	r8, r3
 8005e74:	2303      	movs	r3, #3
 8005e76:	6123      	str	r3, [r4, #16]
 8005e78:	f02b 0304 	bic.w	r3, fp, #4
 8005e7c:	6023      	str	r3, [r4, #0]
 8005e7e:	f04f 0900 	mov.w	r9, #0
 8005e82:	9700      	str	r7, [sp, #0]
 8005e84:	4633      	mov	r3, r6
 8005e86:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005e88:	4621      	mov	r1, r4
 8005e8a:	4628      	mov	r0, r5
 8005e8c:	f000 f9d2 	bl	8006234 <_printf_common>
 8005e90:	3001      	adds	r0, #1
 8005e92:	f040 808d 	bne.w	8005fb0 <_printf_float+0x1d0>
 8005e96:	f04f 30ff 	mov.w	r0, #4294967295
 8005e9a:	b00d      	add	sp, #52	@ 0x34
 8005e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ea0:	4642      	mov	r2, r8
 8005ea2:	464b      	mov	r3, r9
 8005ea4:	4640      	mov	r0, r8
 8005ea6:	4649      	mov	r1, r9
 8005ea8:	f7fa fe50 	bl	8000b4c <__aeabi_dcmpun>
 8005eac:	b140      	cbz	r0, 8005ec0 <_printf_float+0xe0>
 8005eae:	464b      	mov	r3, r9
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	bfbc      	itt	lt
 8005eb4:	232d      	movlt	r3, #45	@ 0x2d
 8005eb6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005eba:	4a7e      	ldr	r2, [pc, #504]	@ (80060b4 <_printf_float+0x2d4>)
 8005ebc:	4b7e      	ldr	r3, [pc, #504]	@ (80060b8 <_printf_float+0x2d8>)
 8005ebe:	e7d4      	b.n	8005e6a <_printf_float+0x8a>
 8005ec0:	6863      	ldr	r3, [r4, #4]
 8005ec2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005ec6:	9206      	str	r2, [sp, #24]
 8005ec8:	1c5a      	adds	r2, r3, #1
 8005eca:	d13b      	bne.n	8005f44 <_printf_float+0x164>
 8005ecc:	2306      	movs	r3, #6
 8005ece:	6063      	str	r3, [r4, #4]
 8005ed0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	6022      	str	r2, [r4, #0]
 8005ed8:	9303      	str	r3, [sp, #12]
 8005eda:	ab0a      	add	r3, sp, #40	@ 0x28
 8005edc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005ee0:	ab09      	add	r3, sp, #36	@ 0x24
 8005ee2:	9300      	str	r3, [sp, #0]
 8005ee4:	6861      	ldr	r1, [r4, #4]
 8005ee6:	ec49 8b10 	vmov	d0, r8, r9
 8005eea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005eee:	4628      	mov	r0, r5
 8005ef0:	f7ff fed7 	bl	8005ca2 <__cvt>
 8005ef4:	9b06      	ldr	r3, [sp, #24]
 8005ef6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005ef8:	2b47      	cmp	r3, #71	@ 0x47
 8005efa:	4680      	mov	r8, r0
 8005efc:	d129      	bne.n	8005f52 <_printf_float+0x172>
 8005efe:	1cc8      	adds	r0, r1, #3
 8005f00:	db02      	blt.n	8005f08 <_printf_float+0x128>
 8005f02:	6863      	ldr	r3, [r4, #4]
 8005f04:	4299      	cmp	r1, r3
 8005f06:	dd41      	ble.n	8005f8c <_printf_float+0x1ac>
 8005f08:	f1aa 0a02 	sub.w	sl, sl, #2
 8005f0c:	fa5f fa8a 	uxtb.w	sl, sl
 8005f10:	3901      	subs	r1, #1
 8005f12:	4652      	mov	r2, sl
 8005f14:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005f18:	9109      	str	r1, [sp, #36]	@ 0x24
 8005f1a:	f7ff ff27 	bl	8005d6c <__exponent>
 8005f1e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f20:	1813      	adds	r3, r2, r0
 8005f22:	2a01      	cmp	r2, #1
 8005f24:	4681      	mov	r9, r0
 8005f26:	6123      	str	r3, [r4, #16]
 8005f28:	dc02      	bgt.n	8005f30 <_printf_float+0x150>
 8005f2a:	6822      	ldr	r2, [r4, #0]
 8005f2c:	07d2      	lsls	r2, r2, #31
 8005f2e:	d501      	bpl.n	8005f34 <_printf_float+0x154>
 8005f30:	3301      	adds	r3, #1
 8005f32:	6123      	str	r3, [r4, #16]
 8005f34:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d0a2      	beq.n	8005e82 <_printf_float+0xa2>
 8005f3c:	232d      	movs	r3, #45	@ 0x2d
 8005f3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f42:	e79e      	b.n	8005e82 <_printf_float+0xa2>
 8005f44:	9a06      	ldr	r2, [sp, #24]
 8005f46:	2a47      	cmp	r2, #71	@ 0x47
 8005f48:	d1c2      	bne.n	8005ed0 <_printf_float+0xf0>
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d1c0      	bne.n	8005ed0 <_printf_float+0xf0>
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e7bd      	b.n	8005ece <_printf_float+0xee>
 8005f52:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005f56:	d9db      	bls.n	8005f10 <_printf_float+0x130>
 8005f58:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005f5c:	d118      	bne.n	8005f90 <_printf_float+0x1b0>
 8005f5e:	2900      	cmp	r1, #0
 8005f60:	6863      	ldr	r3, [r4, #4]
 8005f62:	dd0b      	ble.n	8005f7c <_printf_float+0x19c>
 8005f64:	6121      	str	r1, [r4, #16]
 8005f66:	b913      	cbnz	r3, 8005f6e <_printf_float+0x18e>
 8005f68:	6822      	ldr	r2, [r4, #0]
 8005f6a:	07d0      	lsls	r0, r2, #31
 8005f6c:	d502      	bpl.n	8005f74 <_printf_float+0x194>
 8005f6e:	3301      	adds	r3, #1
 8005f70:	440b      	add	r3, r1
 8005f72:	6123      	str	r3, [r4, #16]
 8005f74:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005f76:	f04f 0900 	mov.w	r9, #0
 8005f7a:	e7db      	b.n	8005f34 <_printf_float+0x154>
 8005f7c:	b913      	cbnz	r3, 8005f84 <_printf_float+0x1a4>
 8005f7e:	6822      	ldr	r2, [r4, #0]
 8005f80:	07d2      	lsls	r2, r2, #31
 8005f82:	d501      	bpl.n	8005f88 <_printf_float+0x1a8>
 8005f84:	3302      	adds	r3, #2
 8005f86:	e7f4      	b.n	8005f72 <_printf_float+0x192>
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e7f2      	b.n	8005f72 <_printf_float+0x192>
 8005f8c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005f90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f92:	4299      	cmp	r1, r3
 8005f94:	db05      	blt.n	8005fa2 <_printf_float+0x1c2>
 8005f96:	6823      	ldr	r3, [r4, #0]
 8005f98:	6121      	str	r1, [r4, #16]
 8005f9a:	07d8      	lsls	r0, r3, #31
 8005f9c:	d5ea      	bpl.n	8005f74 <_printf_float+0x194>
 8005f9e:	1c4b      	adds	r3, r1, #1
 8005fa0:	e7e7      	b.n	8005f72 <_printf_float+0x192>
 8005fa2:	2900      	cmp	r1, #0
 8005fa4:	bfd4      	ite	le
 8005fa6:	f1c1 0202 	rsble	r2, r1, #2
 8005faa:	2201      	movgt	r2, #1
 8005fac:	4413      	add	r3, r2
 8005fae:	e7e0      	b.n	8005f72 <_printf_float+0x192>
 8005fb0:	6823      	ldr	r3, [r4, #0]
 8005fb2:	055a      	lsls	r2, r3, #21
 8005fb4:	d407      	bmi.n	8005fc6 <_printf_float+0x1e6>
 8005fb6:	6923      	ldr	r3, [r4, #16]
 8005fb8:	4642      	mov	r2, r8
 8005fba:	4631      	mov	r1, r6
 8005fbc:	4628      	mov	r0, r5
 8005fbe:	47b8      	blx	r7
 8005fc0:	3001      	adds	r0, #1
 8005fc2:	d12b      	bne.n	800601c <_printf_float+0x23c>
 8005fc4:	e767      	b.n	8005e96 <_printf_float+0xb6>
 8005fc6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005fca:	f240 80dd 	bls.w	8006188 <_printf_float+0x3a8>
 8005fce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	f7fa fd87 	bl	8000ae8 <__aeabi_dcmpeq>
 8005fda:	2800      	cmp	r0, #0
 8005fdc:	d033      	beq.n	8006046 <_printf_float+0x266>
 8005fde:	4a37      	ldr	r2, [pc, #220]	@ (80060bc <_printf_float+0x2dc>)
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	4631      	mov	r1, r6
 8005fe4:	4628      	mov	r0, r5
 8005fe6:	47b8      	blx	r7
 8005fe8:	3001      	adds	r0, #1
 8005fea:	f43f af54 	beq.w	8005e96 <_printf_float+0xb6>
 8005fee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005ff2:	4543      	cmp	r3, r8
 8005ff4:	db02      	blt.n	8005ffc <_printf_float+0x21c>
 8005ff6:	6823      	ldr	r3, [r4, #0]
 8005ff8:	07d8      	lsls	r0, r3, #31
 8005ffa:	d50f      	bpl.n	800601c <_printf_float+0x23c>
 8005ffc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006000:	4631      	mov	r1, r6
 8006002:	4628      	mov	r0, r5
 8006004:	47b8      	blx	r7
 8006006:	3001      	adds	r0, #1
 8006008:	f43f af45 	beq.w	8005e96 <_printf_float+0xb6>
 800600c:	f04f 0900 	mov.w	r9, #0
 8006010:	f108 38ff 	add.w	r8, r8, #4294967295
 8006014:	f104 0a1a 	add.w	sl, r4, #26
 8006018:	45c8      	cmp	r8, r9
 800601a:	dc09      	bgt.n	8006030 <_printf_float+0x250>
 800601c:	6823      	ldr	r3, [r4, #0]
 800601e:	079b      	lsls	r3, r3, #30
 8006020:	f100 8103 	bmi.w	800622a <_printf_float+0x44a>
 8006024:	68e0      	ldr	r0, [r4, #12]
 8006026:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006028:	4298      	cmp	r0, r3
 800602a:	bfb8      	it	lt
 800602c:	4618      	movlt	r0, r3
 800602e:	e734      	b.n	8005e9a <_printf_float+0xba>
 8006030:	2301      	movs	r3, #1
 8006032:	4652      	mov	r2, sl
 8006034:	4631      	mov	r1, r6
 8006036:	4628      	mov	r0, r5
 8006038:	47b8      	blx	r7
 800603a:	3001      	adds	r0, #1
 800603c:	f43f af2b 	beq.w	8005e96 <_printf_float+0xb6>
 8006040:	f109 0901 	add.w	r9, r9, #1
 8006044:	e7e8      	b.n	8006018 <_printf_float+0x238>
 8006046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006048:	2b00      	cmp	r3, #0
 800604a:	dc39      	bgt.n	80060c0 <_printf_float+0x2e0>
 800604c:	4a1b      	ldr	r2, [pc, #108]	@ (80060bc <_printf_float+0x2dc>)
 800604e:	2301      	movs	r3, #1
 8006050:	4631      	mov	r1, r6
 8006052:	4628      	mov	r0, r5
 8006054:	47b8      	blx	r7
 8006056:	3001      	adds	r0, #1
 8006058:	f43f af1d 	beq.w	8005e96 <_printf_float+0xb6>
 800605c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006060:	ea59 0303 	orrs.w	r3, r9, r3
 8006064:	d102      	bne.n	800606c <_printf_float+0x28c>
 8006066:	6823      	ldr	r3, [r4, #0]
 8006068:	07d9      	lsls	r1, r3, #31
 800606a:	d5d7      	bpl.n	800601c <_printf_float+0x23c>
 800606c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006070:	4631      	mov	r1, r6
 8006072:	4628      	mov	r0, r5
 8006074:	47b8      	blx	r7
 8006076:	3001      	adds	r0, #1
 8006078:	f43f af0d 	beq.w	8005e96 <_printf_float+0xb6>
 800607c:	f04f 0a00 	mov.w	sl, #0
 8006080:	f104 0b1a 	add.w	fp, r4, #26
 8006084:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006086:	425b      	negs	r3, r3
 8006088:	4553      	cmp	r3, sl
 800608a:	dc01      	bgt.n	8006090 <_printf_float+0x2b0>
 800608c:	464b      	mov	r3, r9
 800608e:	e793      	b.n	8005fb8 <_printf_float+0x1d8>
 8006090:	2301      	movs	r3, #1
 8006092:	465a      	mov	r2, fp
 8006094:	4631      	mov	r1, r6
 8006096:	4628      	mov	r0, r5
 8006098:	47b8      	blx	r7
 800609a:	3001      	adds	r0, #1
 800609c:	f43f aefb 	beq.w	8005e96 <_printf_float+0xb6>
 80060a0:	f10a 0a01 	add.w	sl, sl, #1
 80060a4:	e7ee      	b.n	8006084 <_printf_float+0x2a4>
 80060a6:	bf00      	nop
 80060a8:	7fefffff 	.word	0x7fefffff
 80060ac:	0800a45c 	.word	0x0800a45c
 80060b0:	0800a460 	.word	0x0800a460
 80060b4:	0800a464 	.word	0x0800a464
 80060b8:	0800a468 	.word	0x0800a468
 80060bc:	0800a46c 	.word	0x0800a46c
 80060c0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80060c2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80060c6:	4553      	cmp	r3, sl
 80060c8:	bfa8      	it	ge
 80060ca:	4653      	movge	r3, sl
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	4699      	mov	r9, r3
 80060d0:	dc36      	bgt.n	8006140 <_printf_float+0x360>
 80060d2:	f04f 0b00 	mov.w	fp, #0
 80060d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060da:	f104 021a 	add.w	r2, r4, #26
 80060de:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80060e0:	9306      	str	r3, [sp, #24]
 80060e2:	eba3 0309 	sub.w	r3, r3, r9
 80060e6:	455b      	cmp	r3, fp
 80060e8:	dc31      	bgt.n	800614e <_printf_float+0x36e>
 80060ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060ec:	459a      	cmp	sl, r3
 80060ee:	dc3a      	bgt.n	8006166 <_printf_float+0x386>
 80060f0:	6823      	ldr	r3, [r4, #0]
 80060f2:	07da      	lsls	r2, r3, #31
 80060f4:	d437      	bmi.n	8006166 <_printf_float+0x386>
 80060f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060f8:	ebaa 0903 	sub.w	r9, sl, r3
 80060fc:	9b06      	ldr	r3, [sp, #24]
 80060fe:	ebaa 0303 	sub.w	r3, sl, r3
 8006102:	4599      	cmp	r9, r3
 8006104:	bfa8      	it	ge
 8006106:	4699      	movge	r9, r3
 8006108:	f1b9 0f00 	cmp.w	r9, #0
 800610c:	dc33      	bgt.n	8006176 <_printf_float+0x396>
 800610e:	f04f 0800 	mov.w	r8, #0
 8006112:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006116:	f104 0b1a 	add.w	fp, r4, #26
 800611a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800611c:	ebaa 0303 	sub.w	r3, sl, r3
 8006120:	eba3 0309 	sub.w	r3, r3, r9
 8006124:	4543      	cmp	r3, r8
 8006126:	f77f af79 	ble.w	800601c <_printf_float+0x23c>
 800612a:	2301      	movs	r3, #1
 800612c:	465a      	mov	r2, fp
 800612e:	4631      	mov	r1, r6
 8006130:	4628      	mov	r0, r5
 8006132:	47b8      	blx	r7
 8006134:	3001      	adds	r0, #1
 8006136:	f43f aeae 	beq.w	8005e96 <_printf_float+0xb6>
 800613a:	f108 0801 	add.w	r8, r8, #1
 800613e:	e7ec      	b.n	800611a <_printf_float+0x33a>
 8006140:	4642      	mov	r2, r8
 8006142:	4631      	mov	r1, r6
 8006144:	4628      	mov	r0, r5
 8006146:	47b8      	blx	r7
 8006148:	3001      	adds	r0, #1
 800614a:	d1c2      	bne.n	80060d2 <_printf_float+0x2f2>
 800614c:	e6a3      	b.n	8005e96 <_printf_float+0xb6>
 800614e:	2301      	movs	r3, #1
 8006150:	4631      	mov	r1, r6
 8006152:	4628      	mov	r0, r5
 8006154:	9206      	str	r2, [sp, #24]
 8006156:	47b8      	blx	r7
 8006158:	3001      	adds	r0, #1
 800615a:	f43f ae9c 	beq.w	8005e96 <_printf_float+0xb6>
 800615e:	9a06      	ldr	r2, [sp, #24]
 8006160:	f10b 0b01 	add.w	fp, fp, #1
 8006164:	e7bb      	b.n	80060de <_printf_float+0x2fe>
 8006166:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800616a:	4631      	mov	r1, r6
 800616c:	4628      	mov	r0, r5
 800616e:	47b8      	blx	r7
 8006170:	3001      	adds	r0, #1
 8006172:	d1c0      	bne.n	80060f6 <_printf_float+0x316>
 8006174:	e68f      	b.n	8005e96 <_printf_float+0xb6>
 8006176:	9a06      	ldr	r2, [sp, #24]
 8006178:	464b      	mov	r3, r9
 800617a:	4442      	add	r2, r8
 800617c:	4631      	mov	r1, r6
 800617e:	4628      	mov	r0, r5
 8006180:	47b8      	blx	r7
 8006182:	3001      	adds	r0, #1
 8006184:	d1c3      	bne.n	800610e <_printf_float+0x32e>
 8006186:	e686      	b.n	8005e96 <_printf_float+0xb6>
 8006188:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800618c:	f1ba 0f01 	cmp.w	sl, #1
 8006190:	dc01      	bgt.n	8006196 <_printf_float+0x3b6>
 8006192:	07db      	lsls	r3, r3, #31
 8006194:	d536      	bpl.n	8006204 <_printf_float+0x424>
 8006196:	2301      	movs	r3, #1
 8006198:	4642      	mov	r2, r8
 800619a:	4631      	mov	r1, r6
 800619c:	4628      	mov	r0, r5
 800619e:	47b8      	blx	r7
 80061a0:	3001      	adds	r0, #1
 80061a2:	f43f ae78 	beq.w	8005e96 <_printf_float+0xb6>
 80061a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061aa:	4631      	mov	r1, r6
 80061ac:	4628      	mov	r0, r5
 80061ae:	47b8      	blx	r7
 80061b0:	3001      	adds	r0, #1
 80061b2:	f43f ae70 	beq.w	8005e96 <_printf_float+0xb6>
 80061b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80061ba:	2200      	movs	r2, #0
 80061bc:	2300      	movs	r3, #0
 80061be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80061c2:	f7fa fc91 	bl	8000ae8 <__aeabi_dcmpeq>
 80061c6:	b9c0      	cbnz	r0, 80061fa <_printf_float+0x41a>
 80061c8:	4653      	mov	r3, sl
 80061ca:	f108 0201 	add.w	r2, r8, #1
 80061ce:	4631      	mov	r1, r6
 80061d0:	4628      	mov	r0, r5
 80061d2:	47b8      	blx	r7
 80061d4:	3001      	adds	r0, #1
 80061d6:	d10c      	bne.n	80061f2 <_printf_float+0x412>
 80061d8:	e65d      	b.n	8005e96 <_printf_float+0xb6>
 80061da:	2301      	movs	r3, #1
 80061dc:	465a      	mov	r2, fp
 80061de:	4631      	mov	r1, r6
 80061e0:	4628      	mov	r0, r5
 80061e2:	47b8      	blx	r7
 80061e4:	3001      	adds	r0, #1
 80061e6:	f43f ae56 	beq.w	8005e96 <_printf_float+0xb6>
 80061ea:	f108 0801 	add.w	r8, r8, #1
 80061ee:	45d0      	cmp	r8, sl
 80061f0:	dbf3      	blt.n	80061da <_printf_float+0x3fa>
 80061f2:	464b      	mov	r3, r9
 80061f4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80061f8:	e6df      	b.n	8005fba <_printf_float+0x1da>
 80061fa:	f04f 0800 	mov.w	r8, #0
 80061fe:	f104 0b1a 	add.w	fp, r4, #26
 8006202:	e7f4      	b.n	80061ee <_printf_float+0x40e>
 8006204:	2301      	movs	r3, #1
 8006206:	4642      	mov	r2, r8
 8006208:	e7e1      	b.n	80061ce <_printf_float+0x3ee>
 800620a:	2301      	movs	r3, #1
 800620c:	464a      	mov	r2, r9
 800620e:	4631      	mov	r1, r6
 8006210:	4628      	mov	r0, r5
 8006212:	47b8      	blx	r7
 8006214:	3001      	adds	r0, #1
 8006216:	f43f ae3e 	beq.w	8005e96 <_printf_float+0xb6>
 800621a:	f108 0801 	add.w	r8, r8, #1
 800621e:	68e3      	ldr	r3, [r4, #12]
 8006220:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006222:	1a5b      	subs	r3, r3, r1
 8006224:	4543      	cmp	r3, r8
 8006226:	dcf0      	bgt.n	800620a <_printf_float+0x42a>
 8006228:	e6fc      	b.n	8006024 <_printf_float+0x244>
 800622a:	f04f 0800 	mov.w	r8, #0
 800622e:	f104 0919 	add.w	r9, r4, #25
 8006232:	e7f4      	b.n	800621e <_printf_float+0x43e>

08006234 <_printf_common>:
 8006234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006238:	4616      	mov	r6, r2
 800623a:	4698      	mov	r8, r3
 800623c:	688a      	ldr	r2, [r1, #8]
 800623e:	690b      	ldr	r3, [r1, #16]
 8006240:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006244:	4293      	cmp	r3, r2
 8006246:	bfb8      	it	lt
 8006248:	4613      	movlt	r3, r2
 800624a:	6033      	str	r3, [r6, #0]
 800624c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006250:	4607      	mov	r7, r0
 8006252:	460c      	mov	r4, r1
 8006254:	b10a      	cbz	r2, 800625a <_printf_common+0x26>
 8006256:	3301      	adds	r3, #1
 8006258:	6033      	str	r3, [r6, #0]
 800625a:	6823      	ldr	r3, [r4, #0]
 800625c:	0699      	lsls	r1, r3, #26
 800625e:	bf42      	ittt	mi
 8006260:	6833      	ldrmi	r3, [r6, #0]
 8006262:	3302      	addmi	r3, #2
 8006264:	6033      	strmi	r3, [r6, #0]
 8006266:	6825      	ldr	r5, [r4, #0]
 8006268:	f015 0506 	ands.w	r5, r5, #6
 800626c:	d106      	bne.n	800627c <_printf_common+0x48>
 800626e:	f104 0a19 	add.w	sl, r4, #25
 8006272:	68e3      	ldr	r3, [r4, #12]
 8006274:	6832      	ldr	r2, [r6, #0]
 8006276:	1a9b      	subs	r3, r3, r2
 8006278:	42ab      	cmp	r3, r5
 800627a:	dc26      	bgt.n	80062ca <_printf_common+0x96>
 800627c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006280:	6822      	ldr	r2, [r4, #0]
 8006282:	3b00      	subs	r3, #0
 8006284:	bf18      	it	ne
 8006286:	2301      	movne	r3, #1
 8006288:	0692      	lsls	r2, r2, #26
 800628a:	d42b      	bmi.n	80062e4 <_printf_common+0xb0>
 800628c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006290:	4641      	mov	r1, r8
 8006292:	4638      	mov	r0, r7
 8006294:	47c8      	blx	r9
 8006296:	3001      	adds	r0, #1
 8006298:	d01e      	beq.n	80062d8 <_printf_common+0xa4>
 800629a:	6823      	ldr	r3, [r4, #0]
 800629c:	6922      	ldr	r2, [r4, #16]
 800629e:	f003 0306 	and.w	r3, r3, #6
 80062a2:	2b04      	cmp	r3, #4
 80062a4:	bf02      	ittt	eq
 80062a6:	68e5      	ldreq	r5, [r4, #12]
 80062a8:	6833      	ldreq	r3, [r6, #0]
 80062aa:	1aed      	subeq	r5, r5, r3
 80062ac:	68a3      	ldr	r3, [r4, #8]
 80062ae:	bf0c      	ite	eq
 80062b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062b4:	2500      	movne	r5, #0
 80062b6:	4293      	cmp	r3, r2
 80062b8:	bfc4      	itt	gt
 80062ba:	1a9b      	subgt	r3, r3, r2
 80062bc:	18ed      	addgt	r5, r5, r3
 80062be:	2600      	movs	r6, #0
 80062c0:	341a      	adds	r4, #26
 80062c2:	42b5      	cmp	r5, r6
 80062c4:	d11a      	bne.n	80062fc <_printf_common+0xc8>
 80062c6:	2000      	movs	r0, #0
 80062c8:	e008      	b.n	80062dc <_printf_common+0xa8>
 80062ca:	2301      	movs	r3, #1
 80062cc:	4652      	mov	r2, sl
 80062ce:	4641      	mov	r1, r8
 80062d0:	4638      	mov	r0, r7
 80062d2:	47c8      	blx	r9
 80062d4:	3001      	adds	r0, #1
 80062d6:	d103      	bne.n	80062e0 <_printf_common+0xac>
 80062d8:	f04f 30ff 	mov.w	r0, #4294967295
 80062dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062e0:	3501      	adds	r5, #1
 80062e2:	e7c6      	b.n	8006272 <_printf_common+0x3e>
 80062e4:	18e1      	adds	r1, r4, r3
 80062e6:	1c5a      	adds	r2, r3, #1
 80062e8:	2030      	movs	r0, #48	@ 0x30
 80062ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80062ee:	4422      	add	r2, r4
 80062f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80062f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80062f8:	3302      	adds	r3, #2
 80062fa:	e7c7      	b.n	800628c <_printf_common+0x58>
 80062fc:	2301      	movs	r3, #1
 80062fe:	4622      	mov	r2, r4
 8006300:	4641      	mov	r1, r8
 8006302:	4638      	mov	r0, r7
 8006304:	47c8      	blx	r9
 8006306:	3001      	adds	r0, #1
 8006308:	d0e6      	beq.n	80062d8 <_printf_common+0xa4>
 800630a:	3601      	adds	r6, #1
 800630c:	e7d9      	b.n	80062c2 <_printf_common+0x8e>
	...

08006310 <_printf_i>:
 8006310:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006314:	7e0f      	ldrb	r7, [r1, #24]
 8006316:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006318:	2f78      	cmp	r7, #120	@ 0x78
 800631a:	4691      	mov	r9, r2
 800631c:	4680      	mov	r8, r0
 800631e:	460c      	mov	r4, r1
 8006320:	469a      	mov	sl, r3
 8006322:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006326:	d807      	bhi.n	8006338 <_printf_i+0x28>
 8006328:	2f62      	cmp	r7, #98	@ 0x62
 800632a:	d80a      	bhi.n	8006342 <_printf_i+0x32>
 800632c:	2f00      	cmp	r7, #0
 800632e:	f000 80d2 	beq.w	80064d6 <_printf_i+0x1c6>
 8006332:	2f58      	cmp	r7, #88	@ 0x58
 8006334:	f000 80b9 	beq.w	80064aa <_printf_i+0x19a>
 8006338:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800633c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006340:	e03a      	b.n	80063b8 <_printf_i+0xa8>
 8006342:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006346:	2b15      	cmp	r3, #21
 8006348:	d8f6      	bhi.n	8006338 <_printf_i+0x28>
 800634a:	a101      	add	r1, pc, #4	@ (adr r1, 8006350 <_printf_i+0x40>)
 800634c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006350:	080063a9 	.word	0x080063a9
 8006354:	080063bd 	.word	0x080063bd
 8006358:	08006339 	.word	0x08006339
 800635c:	08006339 	.word	0x08006339
 8006360:	08006339 	.word	0x08006339
 8006364:	08006339 	.word	0x08006339
 8006368:	080063bd 	.word	0x080063bd
 800636c:	08006339 	.word	0x08006339
 8006370:	08006339 	.word	0x08006339
 8006374:	08006339 	.word	0x08006339
 8006378:	08006339 	.word	0x08006339
 800637c:	080064bd 	.word	0x080064bd
 8006380:	080063e7 	.word	0x080063e7
 8006384:	08006477 	.word	0x08006477
 8006388:	08006339 	.word	0x08006339
 800638c:	08006339 	.word	0x08006339
 8006390:	080064df 	.word	0x080064df
 8006394:	08006339 	.word	0x08006339
 8006398:	080063e7 	.word	0x080063e7
 800639c:	08006339 	.word	0x08006339
 80063a0:	08006339 	.word	0x08006339
 80063a4:	0800647f 	.word	0x0800647f
 80063a8:	6833      	ldr	r3, [r6, #0]
 80063aa:	1d1a      	adds	r2, r3, #4
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	6032      	str	r2, [r6, #0]
 80063b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80063b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80063b8:	2301      	movs	r3, #1
 80063ba:	e09d      	b.n	80064f8 <_printf_i+0x1e8>
 80063bc:	6833      	ldr	r3, [r6, #0]
 80063be:	6820      	ldr	r0, [r4, #0]
 80063c0:	1d19      	adds	r1, r3, #4
 80063c2:	6031      	str	r1, [r6, #0]
 80063c4:	0606      	lsls	r6, r0, #24
 80063c6:	d501      	bpl.n	80063cc <_printf_i+0xbc>
 80063c8:	681d      	ldr	r5, [r3, #0]
 80063ca:	e003      	b.n	80063d4 <_printf_i+0xc4>
 80063cc:	0645      	lsls	r5, r0, #25
 80063ce:	d5fb      	bpl.n	80063c8 <_printf_i+0xb8>
 80063d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80063d4:	2d00      	cmp	r5, #0
 80063d6:	da03      	bge.n	80063e0 <_printf_i+0xd0>
 80063d8:	232d      	movs	r3, #45	@ 0x2d
 80063da:	426d      	negs	r5, r5
 80063dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063e0:	4859      	ldr	r0, [pc, #356]	@ (8006548 <_printf_i+0x238>)
 80063e2:	230a      	movs	r3, #10
 80063e4:	e011      	b.n	800640a <_printf_i+0xfa>
 80063e6:	6821      	ldr	r1, [r4, #0]
 80063e8:	6833      	ldr	r3, [r6, #0]
 80063ea:	0608      	lsls	r0, r1, #24
 80063ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80063f0:	d402      	bmi.n	80063f8 <_printf_i+0xe8>
 80063f2:	0649      	lsls	r1, r1, #25
 80063f4:	bf48      	it	mi
 80063f6:	b2ad      	uxthmi	r5, r5
 80063f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80063fa:	4853      	ldr	r0, [pc, #332]	@ (8006548 <_printf_i+0x238>)
 80063fc:	6033      	str	r3, [r6, #0]
 80063fe:	bf14      	ite	ne
 8006400:	230a      	movne	r3, #10
 8006402:	2308      	moveq	r3, #8
 8006404:	2100      	movs	r1, #0
 8006406:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800640a:	6866      	ldr	r6, [r4, #4]
 800640c:	60a6      	str	r6, [r4, #8]
 800640e:	2e00      	cmp	r6, #0
 8006410:	bfa2      	ittt	ge
 8006412:	6821      	ldrge	r1, [r4, #0]
 8006414:	f021 0104 	bicge.w	r1, r1, #4
 8006418:	6021      	strge	r1, [r4, #0]
 800641a:	b90d      	cbnz	r5, 8006420 <_printf_i+0x110>
 800641c:	2e00      	cmp	r6, #0
 800641e:	d04b      	beq.n	80064b8 <_printf_i+0x1a8>
 8006420:	4616      	mov	r6, r2
 8006422:	fbb5 f1f3 	udiv	r1, r5, r3
 8006426:	fb03 5711 	mls	r7, r3, r1, r5
 800642a:	5dc7      	ldrb	r7, [r0, r7]
 800642c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006430:	462f      	mov	r7, r5
 8006432:	42bb      	cmp	r3, r7
 8006434:	460d      	mov	r5, r1
 8006436:	d9f4      	bls.n	8006422 <_printf_i+0x112>
 8006438:	2b08      	cmp	r3, #8
 800643a:	d10b      	bne.n	8006454 <_printf_i+0x144>
 800643c:	6823      	ldr	r3, [r4, #0]
 800643e:	07df      	lsls	r7, r3, #31
 8006440:	d508      	bpl.n	8006454 <_printf_i+0x144>
 8006442:	6923      	ldr	r3, [r4, #16]
 8006444:	6861      	ldr	r1, [r4, #4]
 8006446:	4299      	cmp	r1, r3
 8006448:	bfde      	ittt	le
 800644a:	2330      	movle	r3, #48	@ 0x30
 800644c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006450:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006454:	1b92      	subs	r2, r2, r6
 8006456:	6122      	str	r2, [r4, #16]
 8006458:	f8cd a000 	str.w	sl, [sp]
 800645c:	464b      	mov	r3, r9
 800645e:	aa03      	add	r2, sp, #12
 8006460:	4621      	mov	r1, r4
 8006462:	4640      	mov	r0, r8
 8006464:	f7ff fee6 	bl	8006234 <_printf_common>
 8006468:	3001      	adds	r0, #1
 800646a:	d14a      	bne.n	8006502 <_printf_i+0x1f2>
 800646c:	f04f 30ff 	mov.w	r0, #4294967295
 8006470:	b004      	add	sp, #16
 8006472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006476:	6823      	ldr	r3, [r4, #0]
 8006478:	f043 0320 	orr.w	r3, r3, #32
 800647c:	6023      	str	r3, [r4, #0]
 800647e:	4833      	ldr	r0, [pc, #204]	@ (800654c <_printf_i+0x23c>)
 8006480:	2778      	movs	r7, #120	@ 0x78
 8006482:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006486:	6823      	ldr	r3, [r4, #0]
 8006488:	6831      	ldr	r1, [r6, #0]
 800648a:	061f      	lsls	r7, r3, #24
 800648c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006490:	d402      	bmi.n	8006498 <_printf_i+0x188>
 8006492:	065f      	lsls	r7, r3, #25
 8006494:	bf48      	it	mi
 8006496:	b2ad      	uxthmi	r5, r5
 8006498:	6031      	str	r1, [r6, #0]
 800649a:	07d9      	lsls	r1, r3, #31
 800649c:	bf44      	itt	mi
 800649e:	f043 0320 	orrmi.w	r3, r3, #32
 80064a2:	6023      	strmi	r3, [r4, #0]
 80064a4:	b11d      	cbz	r5, 80064ae <_printf_i+0x19e>
 80064a6:	2310      	movs	r3, #16
 80064a8:	e7ac      	b.n	8006404 <_printf_i+0xf4>
 80064aa:	4827      	ldr	r0, [pc, #156]	@ (8006548 <_printf_i+0x238>)
 80064ac:	e7e9      	b.n	8006482 <_printf_i+0x172>
 80064ae:	6823      	ldr	r3, [r4, #0]
 80064b0:	f023 0320 	bic.w	r3, r3, #32
 80064b4:	6023      	str	r3, [r4, #0]
 80064b6:	e7f6      	b.n	80064a6 <_printf_i+0x196>
 80064b8:	4616      	mov	r6, r2
 80064ba:	e7bd      	b.n	8006438 <_printf_i+0x128>
 80064bc:	6833      	ldr	r3, [r6, #0]
 80064be:	6825      	ldr	r5, [r4, #0]
 80064c0:	6961      	ldr	r1, [r4, #20]
 80064c2:	1d18      	adds	r0, r3, #4
 80064c4:	6030      	str	r0, [r6, #0]
 80064c6:	062e      	lsls	r6, r5, #24
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	d501      	bpl.n	80064d0 <_printf_i+0x1c0>
 80064cc:	6019      	str	r1, [r3, #0]
 80064ce:	e002      	b.n	80064d6 <_printf_i+0x1c6>
 80064d0:	0668      	lsls	r0, r5, #25
 80064d2:	d5fb      	bpl.n	80064cc <_printf_i+0x1bc>
 80064d4:	8019      	strh	r1, [r3, #0]
 80064d6:	2300      	movs	r3, #0
 80064d8:	6123      	str	r3, [r4, #16]
 80064da:	4616      	mov	r6, r2
 80064dc:	e7bc      	b.n	8006458 <_printf_i+0x148>
 80064de:	6833      	ldr	r3, [r6, #0]
 80064e0:	1d1a      	adds	r2, r3, #4
 80064e2:	6032      	str	r2, [r6, #0]
 80064e4:	681e      	ldr	r6, [r3, #0]
 80064e6:	6862      	ldr	r2, [r4, #4]
 80064e8:	2100      	movs	r1, #0
 80064ea:	4630      	mov	r0, r6
 80064ec:	f7f9 fe80 	bl	80001f0 <memchr>
 80064f0:	b108      	cbz	r0, 80064f6 <_printf_i+0x1e6>
 80064f2:	1b80      	subs	r0, r0, r6
 80064f4:	6060      	str	r0, [r4, #4]
 80064f6:	6863      	ldr	r3, [r4, #4]
 80064f8:	6123      	str	r3, [r4, #16]
 80064fa:	2300      	movs	r3, #0
 80064fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006500:	e7aa      	b.n	8006458 <_printf_i+0x148>
 8006502:	6923      	ldr	r3, [r4, #16]
 8006504:	4632      	mov	r2, r6
 8006506:	4649      	mov	r1, r9
 8006508:	4640      	mov	r0, r8
 800650a:	47d0      	blx	sl
 800650c:	3001      	adds	r0, #1
 800650e:	d0ad      	beq.n	800646c <_printf_i+0x15c>
 8006510:	6823      	ldr	r3, [r4, #0]
 8006512:	079b      	lsls	r3, r3, #30
 8006514:	d413      	bmi.n	800653e <_printf_i+0x22e>
 8006516:	68e0      	ldr	r0, [r4, #12]
 8006518:	9b03      	ldr	r3, [sp, #12]
 800651a:	4298      	cmp	r0, r3
 800651c:	bfb8      	it	lt
 800651e:	4618      	movlt	r0, r3
 8006520:	e7a6      	b.n	8006470 <_printf_i+0x160>
 8006522:	2301      	movs	r3, #1
 8006524:	4632      	mov	r2, r6
 8006526:	4649      	mov	r1, r9
 8006528:	4640      	mov	r0, r8
 800652a:	47d0      	blx	sl
 800652c:	3001      	adds	r0, #1
 800652e:	d09d      	beq.n	800646c <_printf_i+0x15c>
 8006530:	3501      	adds	r5, #1
 8006532:	68e3      	ldr	r3, [r4, #12]
 8006534:	9903      	ldr	r1, [sp, #12]
 8006536:	1a5b      	subs	r3, r3, r1
 8006538:	42ab      	cmp	r3, r5
 800653a:	dcf2      	bgt.n	8006522 <_printf_i+0x212>
 800653c:	e7eb      	b.n	8006516 <_printf_i+0x206>
 800653e:	2500      	movs	r5, #0
 8006540:	f104 0619 	add.w	r6, r4, #25
 8006544:	e7f5      	b.n	8006532 <_printf_i+0x222>
 8006546:	bf00      	nop
 8006548:	0800a46e 	.word	0x0800a46e
 800654c:	0800a47f 	.word	0x0800a47f

08006550 <_scanf_float>:
 8006550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006554:	b087      	sub	sp, #28
 8006556:	4617      	mov	r7, r2
 8006558:	9303      	str	r3, [sp, #12]
 800655a:	688b      	ldr	r3, [r1, #8]
 800655c:	1e5a      	subs	r2, r3, #1
 800655e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006562:	bf81      	itttt	hi
 8006564:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006568:	eb03 0b05 	addhi.w	fp, r3, r5
 800656c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006570:	608b      	strhi	r3, [r1, #8]
 8006572:	680b      	ldr	r3, [r1, #0]
 8006574:	460a      	mov	r2, r1
 8006576:	f04f 0500 	mov.w	r5, #0
 800657a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800657e:	f842 3b1c 	str.w	r3, [r2], #28
 8006582:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006586:	4680      	mov	r8, r0
 8006588:	460c      	mov	r4, r1
 800658a:	bf98      	it	ls
 800658c:	f04f 0b00 	movls.w	fp, #0
 8006590:	9201      	str	r2, [sp, #4]
 8006592:	4616      	mov	r6, r2
 8006594:	46aa      	mov	sl, r5
 8006596:	46a9      	mov	r9, r5
 8006598:	9502      	str	r5, [sp, #8]
 800659a:	68a2      	ldr	r2, [r4, #8]
 800659c:	b152      	cbz	r2, 80065b4 <_scanf_float+0x64>
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	2b4e      	cmp	r3, #78	@ 0x4e
 80065a4:	d864      	bhi.n	8006670 <_scanf_float+0x120>
 80065a6:	2b40      	cmp	r3, #64	@ 0x40
 80065a8:	d83c      	bhi.n	8006624 <_scanf_float+0xd4>
 80065aa:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80065ae:	b2c8      	uxtb	r0, r1
 80065b0:	280e      	cmp	r0, #14
 80065b2:	d93a      	bls.n	800662a <_scanf_float+0xda>
 80065b4:	f1b9 0f00 	cmp.w	r9, #0
 80065b8:	d003      	beq.n	80065c2 <_scanf_float+0x72>
 80065ba:	6823      	ldr	r3, [r4, #0]
 80065bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065c0:	6023      	str	r3, [r4, #0]
 80065c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80065c6:	f1ba 0f01 	cmp.w	sl, #1
 80065ca:	f200 8117 	bhi.w	80067fc <_scanf_float+0x2ac>
 80065ce:	9b01      	ldr	r3, [sp, #4]
 80065d0:	429e      	cmp	r6, r3
 80065d2:	f200 8108 	bhi.w	80067e6 <_scanf_float+0x296>
 80065d6:	2001      	movs	r0, #1
 80065d8:	b007      	add	sp, #28
 80065da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065de:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80065e2:	2a0d      	cmp	r2, #13
 80065e4:	d8e6      	bhi.n	80065b4 <_scanf_float+0x64>
 80065e6:	a101      	add	r1, pc, #4	@ (adr r1, 80065ec <_scanf_float+0x9c>)
 80065e8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80065ec:	08006733 	.word	0x08006733
 80065f0:	080065b5 	.word	0x080065b5
 80065f4:	080065b5 	.word	0x080065b5
 80065f8:	080065b5 	.word	0x080065b5
 80065fc:	08006793 	.word	0x08006793
 8006600:	0800676b 	.word	0x0800676b
 8006604:	080065b5 	.word	0x080065b5
 8006608:	080065b5 	.word	0x080065b5
 800660c:	08006741 	.word	0x08006741
 8006610:	080065b5 	.word	0x080065b5
 8006614:	080065b5 	.word	0x080065b5
 8006618:	080065b5 	.word	0x080065b5
 800661c:	080065b5 	.word	0x080065b5
 8006620:	080066f9 	.word	0x080066f9
 8006624:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006628:	e7db      	b.n	80065e2 <_scanf_float+0x92>
 800662a:	290e      	cmp	r1, #14
 800662c:	d8c2      	bhi.n	80065b4 <_scanf_float+0x64>
 800662e:	a001      	add	r0, pc, #4	@ (adr r0, 8006634 <_scanf_float+0xe4>)
 8006630:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006634:	080066e9 	.word	0x080066e9
 8006638:	080065b5 	.word	0x080065b5
 800663c:	080066e9 	.word	0x080066e9
 8006640:	0800677f 	.word	0x0800677f
 8006644:	080065b5 	.word	0x080065b5
 8006648:	08006691 	.word	0x08006691
 800664c:	080066cf 	.word	0x080066cf
 8006650:	080066cf 	.word	0x080066cf
 8006654:	080066cf 	.word	0x080066cf
 8006658:	080066cf 	.word	0x080066cf
 800665c:	080066cf 	.word	0x080066cf
 8006660:	080066cf 	.word	0x080066cf
 8006664:	080066cf 	.word	0x080066cf
 8006668:	080066cf 	.word	0x080066cf
 800666c:	080066cf 	.word	0x080066cf
 8006670:	2b6e      	cmp	r3, #110	@ 0x6e
 8006672:	d809      	bhi.n	8006688 <_scanf_float+0x138>
 8006674:	2b60      	cmp	r3, #96	@ 0x60
 8006676:	d8b2      	bhi.n	80065de <_scanf_float+0x8e>
 8006678:	2b54      	cmp	r3, #84	@ 0x54
 800667a:	d07b      	beq.n	8006774 <_scanf_float+0x224>
 800667c:	2b59      	cmp	r3, #89	@ 0x59
 800667e:	d199      	bne.n	80065b4 <_scanf_float+0x64>
 8006680:	2d07      	cmp	r5, #7
 8006682:	d197      	bne.n	80065b4 <_scanf_float+0x64>
 8006684:	2508      	movs	r5, #8
 8006686:	e02c      	b.n	80066e2 <_scanf_float+0x192>
 8006688:	2b74      	cmp	r3, #116	@ 0x74
 800668a:	d073      	beq.n	8006774 <_scanf_float+0x224>
 800668c:	2b79      	cmp	r3, #121	@ 0x79
 800668e:	e7f6      	b.n	800667e <_scanf_float+0x12e>
 8006690:	6821      	ldr	r1, [r4, #0]
 8006692:	05c8      	lsls	r0, r1, #23
 8006694:	d51b      	bpl.n	80066ce <_scanf_float+0x17e>
 8006696:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800669a:	6021      	str	r1, [r4, #0]
 800669c:	f109 0901 	add.w	r9, r9, #1
 80066a0:	f1bb 0f00 	cmp.w	fp, #0
 80066a4:	d003      	beq.n	80066ae <_scanf_float+0x15e>
 80066a6:	3201      	adds	r2, #1
 80066a8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80066ac:	60a2      	str	r2, [r4, #8]
 80066ae:	68a3      	ldr	r3, [r4, #8]
 80066b0:	3b01      	subs	r3, #1
 80066b2:	60a3      	str	r3, [r4, #8]
 80066b4:	6923      	ldr	r3, [r4, #16]
 80066b6:	3301      	adds	r3, #1
 80066b8:	6123      	str	r3, [r4, #16]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	3b01      	subs	r3, #1
 80066be:	2b00      	cmp	r3, #0
 80066c0:	607b      	str	r3, [r7, #4]
 80066c2:	f340 8087 	ble.w	80067d4 <_scanf_float+0x284>
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	3301      	adds	r3, #1
 80066ca:	603b      	str	r3, [r7, #0]
 80066cc:	e765      	b.n	800659a <_scanf_float+0x4a>
 80066ce:	eb1a 0105 	adds.w	r1, sl, r5
 80066d2:	f47f af6f 	bne.w	80065b4 <_scanf_float+0x64>
 80066d6:	6822      	ldr	r2, [r4, #0]
 80066d8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80066dc:	6022      	str	r2, [r4, #0]
 80066de:	460d      	mov	r5, r1
 80066e0:	468a      	mov	sl, r1
 80066e2:	f806 3b01 	strb.w	r3, [r6], #1
 80066e6:	e7e2      	b.n	80066ae <_scanf_float+0x15e>
 80066e8:	6822      	ldr	r2, [r4, #0]
 80066ea:	0610      	lsls	r0, r2, #24
 80066ec:	f57f af62 	bpl.w	80065b4 <_scanf_float+0x64>
 80066f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80066f4:	6022      	str	r2, [r4, #0]
 80066f6:	e7f4      	b.n	80066e2 <_scanf_float+0x192>
 80066f8:	f1ba 0f00 	cmp.w	sl, #0
 80066fc:	d10e      	bne.n	800671c <_scanf_float+0x1cc>
 80066fe:	f1b9 0f00 	cmp.w	r9, #0
 8006702:	d10e      	bne.n	8006722 <_scanf_float+0x1d2>
 8006704:	6822      	ldr	r2, [r4, #0]
 8006706:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800670a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800670e:	d108      	bne.n	8006722 <_scanf_float+0x1d2>
 8006710:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006714:	6022      	str	r2, [r4, #0]
 8006716:	f04f 0a01 	mov.w	sl, #1
 800671a:	e7e2      	b.n	80066e2 <_scanf_float+0x192>
 800671c:	f1ba 0f02 	cmp.w	sl, #2
 8006720:	d055      	beq.n	80067ce <_scanf_float+0x27e>
 8006722:	2d01      	cmp	r5, #1
 8006724:	d002      	beq.n	800672c <_scanf_float+0x1dc>
 8006726:	2d04      	cmp	r5, #4
 8006728:	f47f af44 	bne.w	80065b4 <_scanf_float+0x64>
 800672c:	3501      	adds	r5, #1
 800672e:	b2ed      	uxtb	r5, r5
 8006730:	e7d7      	b.n	80066e2 <_scanf_float+0x192>
 8006732:	f1ba 0f01 	cmp.w	sl, #1
 8006736:	f47f af3d 	bne.w	80065b4 <_scanf_float+0x64>
 800673a:	f04f 0a02 	mov.w	sl, #2
 800673e:	e7d0      	b.n	80066e2 <_scanf_float+0x192>
 8006740:	b97d      	cbnz	r5, 8006762 <_scanf_float+0x212>
 8006742:	f1b9 0f00 	cmp.w	r9, #0
 8006746:	f47f af38 	bne.w	80065ba <_scanf_float+0x6a>
 800674a:	6822      	ldr	r2, [r4, #0]
 800674c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006750:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006754:	f040 8108 	bne.w	8006968 <_scanf_float+0x418>
 8006758:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800675c:	6022      	str	r2, [r4, #0]
 800675e:	2501      	movs	r5, #1
 8006760:	e7bf      	b.n	80066e2 <_scanf_float+0x192>
 8006762:	2d03      	cmp	r5, #3
 8006764:	d0e2      	beq.n	800672c <_scanf_float+0x1dc>
 8006766:	2d05      	cmp	r5, #5
 8006768:	e7de      	b.n	8006728 <_scanf_float+0x1d8>
 800676a:	2d02      	cmp	r5, #2
 800676c:	f47f af22 	bne.w	80065b4 <_scanf_float+0x64>
 8006770:	2503      	movs	r5, #3
 8006772:	e7b6      	b.n	80066e2 <_scanf_float+0x192>
 8006774:	2d06      	cmp	r5, #6
 8006776:	f47f af1d 	bne.w	80065b4 <_scanf_float+0x64>
 800677a:	2507      	movs	r5, #7
 800677c:	e7b1      	b.n	80066e2 <_scanf_float+0x192>
 800677e:	6822      	ldr	r2, [r4, #0]
 8006780:	0591      	lsls	r1, r2, #22
 8006782:	f57f af17 	bpl.w	80065b4 <_scanf_float+0x64>
 8006786:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800678a:	6022      	str	r2, [r4, #0]
 800678c:	f8cd 9008 	str.w	r9, [sp, #8]
 8006790:	e7a7      	b.n	80066e2 <_scanf_float+0x192>
 8006792:	6822      	ldr	r2, [r4, #0]
 8006794:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006798:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800679c:	d006      	beq.n	80067ac <_scanf_float+0x25c>
 800679e:	0550      	lsls	r0, r2, #21
 80067a0:	f57f af08 	bpl.w	80065b4 <_scanf_float+0x64>
 80067a4:	f1b9 0f00 	cmp.w	r9, #0
 80067a8:	f000 80de 	beq.w	8006968 <_scanf_float+0x418>
 80067ac:	0591      	lsls	r1, r2, #22
 80067ae:	bf58      	it	pl
 80067b0:	9902      	ldrpl	r1, [sp, #8]
 80067b2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80067b6:	bf58      	it	pl
 80067b8:	eba9 0101 	subpl.w	r1, r9, r1
 80067bc:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80067c0:	bf58      	it	pl
 80067c2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80067c6:	6022      	str	r2, [r4, #0]
 80067c8:	f04f 0900 	mov.w	r9, #0
 80067cc:	e789      	b.n	80066e2 <_scanf_float+0x192>
 80067ce:	f04f 0a03 	mov.w	sl, #3
 80067d2:	e786      	b.n	80066e2 <_scanf_float+0x192>
 80067d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80067d8:	4639      	mov	r1, r7
 80067da:	4640      	mov	r0, r8
 80067dc:	4798      	blx	r3
 80067de:	2800      	cmp	r0, #0
 80067e0:	f43f aedb 	beq.w	800659a <_scanf_float+0x4a>
 80067e4:	e6e6      	b.n	80065b4 <_scanf_float+0x64>
 80067e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80067ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80067ee:	463a      	mov	r2, r7
 80067f0:	4640      	mov	r0, r8
 80067f2:	4798      	blx	r3
 80067f4:	6923      	ldr	r3, [r4, #16]
 80067f6:	3b01      	subs	r3, #1
 80067f8:	6123      	str	r3, [r4, #16]
 80067fa:	e6e8      	b.n	80065ce <_scanf_float+0x7e>
 80067fc:	1e6b      	subs	r3, r5, #1
 80067fe:	2b06      	cmp	r3, #6
 8006800:	d824      	bhi.n	800684c <_scanf_float+0x2fc>
 8006802:	2d02      	cmp	r5, #2
 8006804:	d836      	bhi.n	8006874 <_scanf_float+0x324>
 8006806:	9b01      	ldr	r3, [sp, #4]
 8006808:	429e      	cmp	r6, r3
 800680a:	f67f aee4 	bls.w	80065d6 <_scanf_float+0x86>
 800680e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006812:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006816:	463a      	mov	r2, r7
 8006818:	4640      	mov	r0, r8
 800681a:	4798      	blx	r3
 800681c:	6923      	ldr	r3, [r4, #16]
 800681e:	3b01      	subs	r3, #1
 8006820:	6123      	str	r3, [r4, #16]
 8006822:	e7f0      	b.n	8006806 <_scanf_float+0x2b6>
 8006824:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006828:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800682c:	463a      	mov	r2, r7
 800682e:	4640      	mov	r0, r8
 8006830:	4798      	blx	r3
 8006832:	6923      	ldr	r3, [r4, #16]
 8006834:	3b01      	subs	r3, #1
 8006836:	6123      	str	r3, [r4, #16]
 8006838:	f10a 3aff 	add.w	sl, sl, #4294967295
 800683c:	fa5f fa8a 	uxtb.w	sl, sl
 8006840:	f1ba 0f02 	cmp.w	sl, #2
 8006844:	d1ee      	bne.n	8006824 <_scanf_float+0x2d4>
 8006846:	3d03      	subs	r5, #3
 8006848:	b2ed      	uxtb	r5, r5
 800684a:	1b76      	subs	r6, r6, r5
 800684c:	6823      	ldr	r3, [r4, #0]
 800684e:	05da      	lsls	r2, r3, #23
 8006850:	d530      	bpl.n	80068b4 <_scanf_float+0x364>
 8006852:	055b      	lsls	r3, r3, #21
 8006854:	d511      	bpl.n	800687a <_scanf_float+0x32a>
 8006856:	9b01      	ldr	r3, [sp, #4]
 8006858:	429e      	cmp	r6, r3
 800685a:	f67f aebc 	bls.w	80065d6 <_scanf_float+0x86>
 800685e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006862:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006866:	463a      	mov	r2, r7
 8006868:	4640      	mov	r0, r8
 800686a:	4798      	blx	r3
 800686c:	6923      	ldr	r3, [r4, #16]
 800686e:	3b01      	subs	r3, #1
 8006870:	6123      	str	r3, [r4, #16]
 8006872:	e7f0      	b.n	8006856 <_scanf_float+0x306>
 8006874:	46aa      	mov	sl, r5
 8006876:	46b3      	mov	fp, r6
 8006878:	e7de      	b.n	8006838 <_scanf_float+0x2e8>
 800687a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800687e:	6923      	ldr	r3, [r4, #16]
 8006880:	2965      	cmp	r1, #101	@ 0x65
 8006882:	f103 33ff 	add.w	r3, r3, #4294967295
 8006886:	f106 35ff 	add.w	r5, r6, #4294967295
 800688a:	6123      	str	r3, [r4, #16]
 800688c:	d00c      	beq.n	80068a8 <_scanf_float+0x358>
 800688e:	2945      	cmp	r1, #69	@ 0x45
 8006890:	d00a      	beq.n	80068a8 <_scanf_float+0x358>
 8006892:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006896:	463a      	mov	r2, r7
 8006898:	4640      	mov	r0, r8
 800689a:	4798      	blx	r3
 800689c:	6923      	ldr	r3, [r4, #16]
 800689e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80068a2:	3b01      	subs	r3, #1
 80068a4:	1eb5      	subs	r5, r6, #2
 80068a6:	6123      	str	r3, [r4, #16]
 80068a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80068ac:	463a      	mov	r2, r7
 80068ae:	4640      	mov	r0, r8
 80068b0:	4798      	blx	r3
 80068b2:	462e      	mov	r6, r5
 80068b4:	6822      	ldr	r2, [r4, #0]
 80068b6:	f012 0210 	ands.w	r2, r2, #16
 80068ba:	d001      	beq.n	80068c0 <_scanf_float+0x370>
 80068bc:	2000      	movs	r0, #0
 80068be:	e68b      	b.n	80065d8 <_scanf_float+0x88>
 80068c0:	7032      	strb	r2, [r6, #0]
 80068c2:	6823      	ldr	r3, [r4, #0]
 80068c4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80068c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068cc:	d11c      	bne.n	8006908 <_scanf_float+0x3b8>
 80068ce:	9b02      	ldr	r3, [sp, #8]
 80068d0:	454b      	cmp	r3, r9
 80068d2:	eba3 0209 	sub.w	r2, r3, r9
 80068d6:	d123      	bne.n	8006920 <_scanf_float+0x3d0>
 80068d8:	9901      	ldr	r1, [sp, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	4640      	mov	r0, r8
 80068de:	f002 fbf7 	bl	80090d0 <_strtod_r>
 80068e2:	9b03      	ldr	r3, [sp, #12]
 80068e4:	6821      	ldr	r1, [r4, #0]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f011 0f02 	tst.w	r1, #2
 80068ec:	ec57 6b10 	vmov	r6, r7, d0
 80068f0:	f103 0204 	add.w	r2, r3, #4
 80068f4:	d01f      	beq.n	8006936 <_scanf_float+0x3e6>
 80068f6:	9903      	ldr	r1, [sp, #12]
 80068f8:	600a      	str	r2, [r1, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	e9c3 6700 	strd	r6, r7, [r3]
 8006900:	68e3      	ldr	r3, [r4, #12]
 8006902:	3301      	adds	r3, #1
 8006904:	60e3      	str	r3, [r4, #12]
 8006906:	e7d9      	b.n	80068bc <_scanf_float+0x36c>
 8006908:	9b04      	ldr	r3, [sp, #16]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d0e4      	beq.n	80068d8 <_scanf_float+0x388>
 800690e:	9905      	ldr	r1, [sp, #20]
 8006910:	230a      	movs	r3, #10
 8006912:	3101      	adds	r1, #1
 8006914:	4640      	mov	r0, r8
 8006916:	f002 fc5b 	bl	80091d0 <_strtol_r>
 800691a:	9b04      	ldr	r3, [sp, #16]
 800691c:	9e05      	ldr	r6, [sp, #20]
 800691e:	1ac2      	subs	r2, r0, r3
 8006920:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006924:	429e      	cmp	r6, r3
 8006926:	bf28      	it	cs
 8006928:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800692c:	4910      	ldr	r1, [pc, #64]	@ (8006970 <_scanf_float+0x420>)
 800692e:	4630      	mov	r0, r6
 8006930:	f000 f8e4 	bl	8006afc <siprintf>
 8006934:	e7d0      	b.n	80068d8 <_scanf_float+0x388>
 8006936:	f011 0f04 	tst.w	r1, #4
 800693a:	9903      	ldr	r1, [sp, #12]
 800693c:	600a      	str	r2, [r1, #0]
 800693e:	d1dc      	bne.n	80068fa <_scanf_float+0x3aa>
 8006940:	681d      	ldr	r5, [r3, #0]
 8006942:	4632      	mov	r2, r6
 8006944:	463b      	mov	r3, r7
 8006946:	4630      	mov	r0, r6
 8006948:	4639      	mov	r1, r7
 800694a:	f7fa f8ff 	bl	8000b4c <__aeabi_dcmpun>
 800694e:	b128      	cbz	r0, 800695c <_scanf_float+0x40c>
 8006950:	4808      	ldr	r0, [pc, #32]	@ (8006974 <_scanf_float+0x424>)
 8006952:	f000 f9b7 	bl	8006cc4 <nanf>
 8006956:	ed85 0a00 	vstr	s0, [r5]
 800695a:	e7d1      	b.n	8006900 <_scanf_float+0x3b0>
 800695c:	4630      	mov	r0, r6
 800695e:	4639      	mov	r1, r7
 8006960:	f7fa f952 	bl	8000c08 <__aeabi_d2f>
 8006964:	6028      	str	r0, [r5, #0]
 8006966:	e7cb      	b.n	8006900 <_scanf_float+0x3b0>
 8006968:	f04f 0900 	mov.w	r9, #0
 800696c:	e629      	b.n	80065c2 <_scanf_float+0x72>
 800696e:	bf00      	nop
 8006970:	0800a490 	.word	0x0800a490
 8006974:	0800a825 	.word	0x0800a825

08006978 <std>:
 8006978:	2300      	movs	r3, #0
 800697a:	b510      	push	{r4, lr}
 800697c:	4604      	mov	r4, r0
 800697e:	e9c0 3300 	strd	r3, r3, [r0]
 8006982:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006986:	6083      	str	r3, [r0, #8]
 8006988:	8181      	strh	r1, [r0, #12]
 800698a:	6643      	str	r3, [r0, #100]	@ 0x64
 800698c:	81c2      	strh	r2, [r0, #14]
 800698e:	6183      	str	r3, [r0, #24]
 8006990:	4619      	mov	r1, r3
 8006992:	2208      	movs	r2, #8
 8006994:	305c      	adds	r0, #92	@ 0x5c
 8006996:	f000 f914 	bl	8006bc2 <memset>
 800699a:	4b0d      	ldr	r3, [pc, #52]	@ (80069d0 <std+0x58>)
 800699c:	6263      	str	r3, [r4, #36]	@ 0x24
 800699e:	4b0d      	ldr	r3, [pc, #52]	@ (80069d4 <std+0x5c>)
 80069a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80069a2:	4b0d      	ldr	r3, [pc, #52]	@ (80069d8 <std+0x60>)
 80069a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80069a6:	4b0d      	ldr	r3, [pc, #52]	@ (80069dc <std+0x64>)
 80069a8:	6323      	str	r3, [r4, #48]	@ 0x30
 80069aa:	4b0d      	ldr	r3, [pc, #52]	@ (80069e0 <std+0x68>)
 80069ac:	6224      	str	r4, [r4, #32]
 80069ae:	429c      	cmp	r4, r3
 80069b0:	d006      	beq.n	80069c0 <std+0x48>
 80069b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80069b6:	4294      	cmp	r4, r2
 80069b8:	d002      	beq.n	80069c0 <std+0x48>
 80069ba:	33d0      	adds	r3, #208	@ 0xd0
 80069bc:	429c      	cmp	r4, r3
 80069be:	d105      	bne.n	80069cc <std+0x54>
 80069c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80069c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069c8:	f000 b978 	b.w	8006cbc <__retarget_lock_init_recursive>
 80069cc:	bd10      	pop	{r4, pc}
 80069ce:	bf00      	nop
 80069d0:	08006b3d 	.word	0x08006b3d
 80069d4:	08006b5f 	.word	0x08006b5f
 80069d8:	08006b97 	.word	0x08006b97
 80069dc:	08006bbb 	.word	0x08006bbb
 80069e0:	20001304 	.word	0x20001304

080069e4 <stdio_exit_handler>:
 80069e4:	4a02      	ldr	r2, [pc, #8]	@ (80069f0 <stdio_exit_handler+0xc>)
 80069e6:	4903      	ldr	r1, [pc, #12]	@ (80069f4 <stdio_exit_handler+0x10>)
 80069e8:	4803      	ldr	r0, [pc, #12]	@ (80069f8 <stdio_exit_handler+0x14>)
 80069ea:	f000 b869 	b.w	8006ac0 <_fwalk_sglue>
 80069ee:	bf00      	nop
 80069f0:	2000000c 	.word	0x2000000c
 80069f4:	0800958d 	.word	0x0800958d
 80069f8:	2000001c 	.word	0x2000001c

080069fc <cleanup_stdio>:
 80069fc:	6841      	ldr	r1, [r0, #4]
 80069fe:	4b0c      	ldr	r3, [pc, #48]	@ (8006a30 <cleanup_stdio+0x34>)
 8006a00:	4299      	cmp	r1, r3
 8006a02:	b510      	push	{r4, lr}
 8006a04:	4604      	mov	r4, r0
 8006a06:	d001      	beq.n	8006a0c <cleanup_stdio+0x10>
 8006a08:	f002 fdc0 	bl	800958c <_fflush_r>
 8006a0c:	68a1      	ldr	r1, [r4, #8]
 8006a0e:	4b09      	ldr	r3, [pc, #36]	@ (8006a34 <cleanup_stdio+0x38>)
 8006a10:	4299      	cmp	r1, r3
 8006a12:	d002      	beq.n	8006a1a <cleanup_stdio+0x1e>
 8006a14:	4620      	mov	r0, r4
 8006a16:	f002 fdb9 	bl	800958c <_fflush_r>
 8006a1a:	68e1      	ldr	r1, [r4, #12]
 8006a1c:	4b06      	ldr	r3, [pc, #24]	@ (8006a38 <cleanup_stdio+0x3c>)
 8006a1e:	4299      	cmp	r1, r3
 8006a20:	d004      	beq.n	8006a2c <cleanup_stdio+0x30>
 8006a22:	4620      	mov	r0, r4
 8006a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a28:	f002 bdb0 	b.w	800958c <_fflush_r>
 8006a2c:	bd10      	pop	{r4, pc}
 8006a2e:	bf00      	nop
 8006a30:	20001304 	.word	0x20001304
 8006a34:	2000136c 	.word	0x2000136c
 8006a38:	200013d4 	.word	0x200013d4

08006a3c <global_stdio_init.part.0>:
 8006a3c:	b510      	push	{r4, lr}
 8006a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8006a6c <global_stdio_init.part.0+0x30>)
 8006a40:	4c0b      	ldr	r4, [pc, #44]	@ (8006a70 <global_stdio_init.part.0+0x34>)
 8006a42:	4a0c      	ldr	r2, [pc, #48]	@ (8006a74 <global_stdio_init.part.0+0x38>)
 8006a44:	601a      	str	r2, [r3, #0]
 8006a46:	4620      	mov	r0, r4
 8006a48:	2200      	movs	r2, #0
 8006a4a:	2104      	movs	r1, #4
 8006a4c:	f7ff ff94 	bl	8006978 <std>
 8006a50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006a54:	2201      	movs	r2, #1
 8006a56:	2109      	movs	r1, #9
 8006a58:	f7ff ff8e 	bl	8006978 <std>
 8006a5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006a60:	2202      	movs	r2, #2
 8006a62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a66:	2112      	movs	r1, #18
 8006a68:	f7ff bf86 	b.w	8006978 <std>
 8006a6c:	2000143c 	.word	0x2000143c
 8006a70:	20001304 	.word	0x20001304
 8006a74:	080069e5 	.word	0x080069e5

08006a78 <__sfp_lock_acquire>:
 8006a78:	4801      	ldr	r0, [pc, #4]	@ (8006a80 <__sfp_lock_acquire+0x8>)
 8006a7a:	f000 b920 	b.w	8006cbe <__retarget_lock_acquire_recursive>
 8006a7e:	bf00      	nop
 8006a80:	20001445 	.word	0x20001445

08006a84 <__sfp_lock_release>:
 8006a84:	4801      	ldr	r0, [pc, #4]	@ (8006a8c <__sfp_lock_release+0x8>)
 8006a86:	f000 b91b 	b.w	8006cc0 <__retarget_lock_release_recursive>
 8006a8a:	bf00      	nop
 8006a8c:	20001445 	.word	0x20001445

08006a90 <__sinit>:
 8006a90:	b510      	push	{r4, lr}
 8006a92:	4604      	mov	r4, r0
 8006a94:	f7ff fff0 	bl	8006a78 <__sfp_lock_acquire>
 8006a98:	6a23      	ldr	r3, [r4, #32]
 8006a9a:	b11b      	cbz	r3, 8006aa4 <__sinit+0x14>
 8006a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006aa0:	f7ff bff0 	b.w	8006a84 <__sfp_lock_release>
 8006aa4:	4b04      	ldr	r3, [pc, #16]	@ (8006ab8 <__sinit+0x28>)
 8006aa6:	6223      	str	r3, [r4, #32]
 8006aa8:	4b04      	ldr	r3, [pc, #16]	@ (8006abc <__sinit+0x2c>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d1f5      	bne.n	8006a9c <__sinit+0xc>
 8006ab0:	f7ff ffc4 	bl	8006a3c <global_stdio_init.part.0>
 8006ab4:	e7f2      	b.n	8006a9c <__sinit+0xc>
 8006ab6:	bf00      	nop
 8006ab8:	080069fd 	.word	0x080069fd
 8006abc:	2000143c 	.word	0x2000143c

08006ac0 <_fwalk_sglue>:
 8006ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ac4:	4607      	mov	r7, r0
 8006ac6:	4688      	mov	r8, r1
 8006ac8:	4614      	mov	r4, r2
 8006aca:	2600      	movs	r6, #0
 8006acc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ad0:	f1b9 0901 	subs.w	r9, r9, #1
 8006ad4:	d505      	bpl.n	8006ae2 <_fwalk_sglue+0x22>
 8006ad6:	6824      	ldr	r4, [r4, #0]
 8006ad8:	2c00      	cmp	r4, #0
 8006ada:	d1f7      	bne.n	8006acc <_fwalk_sglue+0xc>
 8006adc:	4630      	mov	r0, r6
 8006ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ae2:	89ab      	ldrh	r3, [r5, #12]
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d907      	bls.n	8006af8 <_fwalk_sglue+0x38>
 8006ae8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006aec:	3301      	adds	r3, #1
 8006aee:	d003      	beq.n	8006af8 <_fwalk_sglue+0x38>
 8006af0:	4629      	mov	r1, r5
 8006af2:	4638      	mov	r0, r7
 8006af4:	47c0      	blx	r8
 8006af6:	4306      	orrs	r6, r0
 8006af8:	3568      	adds	r5, #104	@ 0x68
 8006afa:	e7e9      	b.n	8006ad0 <_fwalk_sglue+0x10>

08006afc <siprintf>:
 8006afc:	b40e      	push	{r1, r2, r3}
 8006afe:	b500      	push	{lr}
 8006b00:	b09c      	sub	sp, #112	@ 0x70
 8006b02:	ab1d      	add	r3, sp, #116	@ 0x74
 8006b04:	9002      	str	r0, [sp, #8]
 8006b06:	9006      	str	r0, [sp, #24]
 8006b08:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006b0c:	4809      	ldr	r0, [pc, #36]	@ (8006b34 <siprintf+0x38>)
 8006b0e:	9107      	str	r1, [sp, #28]
 8006b10:	9104      	str	r1, [sp, #16]
 8006b12:	4909      	ldr	r1, [pc, #36]	@ (8006b38 <siprintf+0x3c>)
 8006b14:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b18:	9105      	str	r1, [sp, #20]
 8006b1a:	6800      	ldr	r0, [r0, #0]
 8006b1c:	9301      	str	r3, [sp, #4]
 8006b1e:	a902      	add	r1, sp, #8
 8006b20:	f002 fbb4 	bl	800928c <_svfiprintf_r>
 8006b24:	9b02      	ldr	r3, [sp, #8]
 8006b26:	2200      	movs	r2, #0
 8006b28:	701a      	strb	r2, [r3, #0]
 8006b2a:	b01c      	add	sp, #112	@ 0x70
 8006b2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b30:	b003      	add	sp, #12
 8006b32:	4770      	bx	lr
 8006b34:	20000018 	.word	0x20000018
 8006b38:	ffff0208 	.word	0xffff0208

08006b3c <__sread>:
 8006b3c:	b510      	push	{r4, lr}
 8006b3e:	460c      	mov	r4, r1
 8006b40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b44:	f000 f86c 	bl	8006c20 <_read_r>
 8006b48:	2800      	cmp	r0, #0
 8006b4a:	bfab      	itete	ge
 8006b4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006b4e:	89a3      	ldrhlt	r3, [r4, #12]
 8006b50:	181b      	addge	r3, r3, r0
 8006b52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006b56:	bfac      	ite	ge
 8006b58:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006b5a:	81a3      	strhlt	r3, [r4, #12]
 8006b5c:	bd10      	pop	{r4, pc}

08006b5e <__swrite>:
 8006b5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b62:	461f      	mov	r7, r3
 8006b64:	898b      	ldrh	r3, [r1, #12]
 8006b66:	05db      	lsls	r3, r3, #23
 8006b68:	4605      	mov	r5, r0
 8006b6a:	460c      	mov	r4, r1
 8006b6c:	4616      	mov	r6, r2
 8006b6e:	d505      	bpl.n	8006b7c <__swrite+0x1e>
 8006b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b74:	2302      	movs	r3, #2
 8006b76:	2200      	movs	r2, #0
 8006b78:	f000 f840 	bl	8006bfc <_lseek_r>
 8006b7c:	89a3      	ldrh	r3, [r4, #12]
 8006b7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b86:	81a3      	strh	r3, [r4, #12]
 8006b88:	4632      	mov	r2, r6
 8006b8a:	463b      	mov	r3, r7
 8006b8c:	4628      	mov	r0, r5
 8006b8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b92:	f000 b857 	b.w	8006c44 <_write_r>

08006b96 <__sseek>:
 8006b96:	b510      	push	{r4, lr}
 8006b98:	460c      	mov	r4, r1
 8006b9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b9e:	f000 f82d 	bl	8006bfc <_lseek_r>
 8006ba2:	1c43      	adds	r3, r0, #1
 8006ba4:	89a3      	ldrh	r3, [r4, #12]
 8006ba6:	bf15      	itete	ne
 8006ba8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006baa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006bae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006bb2:	81a3      	strheq	r3, [r4, #12]
 8006bb4:	bf18      	it	ne
 8006bb6:	81a3      	strhne	r3, [r4, #12]
 8006bb8:	bd10      	pop	{r4, pc}

08006bba <__sclose>:
 8006bba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bbe:	f000 b80d 	b.w	8006bdc <_close_r>

08006bc2 <memset>:
 8006bc2:	4402      	add	r2, r0
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d100      	bne.n	8006bcc <memset+0xa>
 8006bca:	4770      	bx	lr
 8006bcc:	f803 1b01 	strb.w	r1, [r3], #1
 8006bd0:	e7f9      	b.n	8006bc6 <memset+0x4>
	...

08006bd4 <_localeconv_r>:
 8006bd4:	4800      	ldr	r0, [pc, #0]	@ (8006bd8 <_localeconv_r+0x4>)
 8006bd6:	4770      	bx	lr
 8006bd8:	20000158 	.word	0x20000158

08006bdc <_close_r>:
 8006bdc:	b538      	push	{r3, r4, r5, lr}
 8006bde:	4d06      	ldr	r5, [pc, #24]	@ (8006bf8 <_close_r+0x1c>)
 8006be0:	2300      	movs	r3, #0
 8006be2:	4604      	mov	r4, r0
 8006be4:	4608      	mov	r0, r1
 8006be6:	602b      	str	r3, [r5, #0]
 8006be8:	f7fa ff44 	bl	8001a74 <_close>
 8006bec:	1c43      	adds	r3, r0, #1
 8006bee:	d102      	bne.n	8006bf6 <_close_r+0x1a>
 8006bf0:	682b      	ldr	r3, [r5, #0]
 8006bf2:	b103      	cbz	r3, 8006bf6 <_close_r+0x1a>
 8006bf4:	6023      	str	r3, [r4, #0]
 8006bf6:	bd38      	pop	{r3, r4, r5, pc}
 8006bf8:	20001440 	.word	0x20001440

08006bfc <_lseek_r>:
 8006bfc:	b538      	push	{r3, r4, r5, lr}
 8006bfe:	4d07      	ldr	r5, [pc, #28]	@ (8006c1c <_lseek_r+0x20>)
 8006c00:	4604      	mov	r4, r0
 8006c02:	4608      	mov	r0, r1
 8006c04:	4611      	mov	r1, r2
 8006c06:	2200      	movs	r2, #0
 8006c08:	602a      	str	r2, [r5, #0]
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	f7fa ff59 	bl	8001ac2 <_lseek>
 8006c10:	1c43      	adds	r3, r0, #1
 8006c12:	d102      	bne.n	8006c1a <_lseek_r+0x1e>
 8006c14:	682b      	ldr	r3, [r5, #0]
 8006c16:	b103      	cbz	r3, 8006c1a <_lseek_r+0x1e>
 8006c18:	6023      	str	r3, [r4, #0]
 8006c1a:	bd38      	pop	{r3, r4, r5, pc}
 8006c1c:	20001440 	.word	0x20001440

08006c20 <_read_r>:
 8006c20:	b538      	push	{r3, r4, r5, lr}
 8006c22:	4d07      	ldr	r5, [pc, #28]	@ (8006c40 <_read_r+0x20>)
 8006c24:	4604      	mov	r4, r0
 8006c26:	4608      	mov	r0, r1
 8006c28:	4611      	mov	r1, r2
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	602a      	str	r2, [r5, #0]
 8006c2e:	461a      	mov	r2, r3
 8006c30:	f7fa fee7 	bl	8001a02 <_read>
 8006c34:	1c43      	adds	r3, r0, #1
 8006c36:	d102      	bne.n	8006c3e <_read_r+0x1e>
 8006c38:	682b      	ldr	r3, [r5, #0]
 8006c3a:	b103      	cbz	r3, 8006c3e <_read_r+0x1e>
 8006c3c:	6023      	str	r3, [r4, #0]
 8006c3e:	bd38      	pop	{r3, r4, r5, pc}
 8006c40:	20001440 	.word	0x20001440

08006c44 <_write_r>:
 8006c44:	b538      	push	{r3, r4, r5, lr}
 8006c46:	4d07      	ldr	r5, [pc, #28]	@ (8006c64 <_write_r+0x20>)
 8006c48:	4604      	mov	r4, r0
 8006c4a:	4608      	mov	r0, r1
 8006c4c:	4611      	mov	r1, r2
 8006c4e:	2200      	movs	r2, #0
 8006c50:	602a      	str	r2, [r5, #0]
 8006c52:	461a      	mov	r2, r3
 8006c54:	f7fa fef2 	bl	8001a3c <_write>
 8006c58:	1c43      	adds	r3, r0, #1
 8006c5a:	d102      	bne.n	8006c62 <_write_r+0x1e>
 8006c5c:	682b      	ldr	r3, [r5, #0]
 8006c5e:	b103      	cbz	r3, 8006c62 <_write_r+0x1e>
 8006c60:	6023      	str	r3, [r4, #0]
 8006c62:	bd38      	pop	{r3, r4, r5, pc}
 8006c64:	20001440 	.word	0x20001440

08006c68 <__errno>:
 8006c68:	4b01      	ldr	r3, [pc, #4]	@ (8006c70 <__errno+0x8>)
 8006c6a:	6818      	ldr	r0, [r3, #0]
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	20000018 	.word	0x20000018

08006c74 <__libc_init_array>:
 8006c74:	b570      	push	{r4, r5, r6, lr}
 8006c76:	4d0d      	ldr	r5, [pc, #52]	@ (8006cac <__libc_init_array+0x38>)
 8006c78:	4c0d      	ldr	r4, [pc, #52]	@ (8006cb0 <__libc_init_array+0x3c>)
 8006c7a:	1b64      	subs	r4, r4, r5
 8006c7c:	10a4      	asrs	r4, r4, #2
 8006c7e:	2600      	movs	r6, #0
 8006c80:	42a6      	cmp	r6, r4
 8006c82:	d109      	bne.n	8006c98 <__libc_init_array+0x24>
 8006c84:	4d0b      	ldr	r5, [pc, #44]	@ (8006cb4 <__libc_init_array+0x40>)
 8006c86:	4c0c      	ldr	r4, [pc, #48]	@ (8006cb8 <__libc_init_array+0x44>)
 8006c88:	f003 fb70 	bl	800a36c <_init>
 8006c8c:	1b64      	subs	r4, r4, r5
 8006c8e:	10a4      	asrs	r4, r4, #2
 8006c90:	2600      	movs	r6, #0
 8006c92:	42a6      	cmp	r6, r4
 8006c94:	d105      	bne.n	8006ca2 <__libc_init_array+0x2e>
 8006c96:	bd70      	pop	{r4, r5, r6, pc}
 8006c98:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c9c:	4798      	blx	r3
 8006c9e:	3601      	adds	r6, #1
 8006ca0:	e7ee      	b.n	8006c80 <__libc_init_array+0xc>
 8006ca2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ca6:	4798      	blx	r3
 8006ca8:	3601      	adds	r6, #1
 8006caa:	e7f2      	b.n	8006c92 <__libc_init_array+0x1e>
 8006cac:	0800a890 	.word	0x0800a890
 8006cb0:	0800a890 	.word	0x0800a890
 8006cb4:	0800a890 	.word	0x0800a890
 8006cb8:	0800a894 	.word	0x0800a894

08006cbc <__retarget_lock_init_recursive>:
 8006cbc:	4770      	bx	lr

08006cbe <__retarget_lock_acquire_recursive>:
 8006cbe:	4770      	bx	lr

08006cc0 <__retarget_lock_release_recursive>:
 8006cc0:	4770      	bx	lr
	...

08006cc4 <nanf>:
 8006cc4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006ccc <nanf+0x8>
 8006cc8:	4770      	bx	lr
 8006cca:	bf00      	nop
 8006ccc:	7fc00000 	.word	0x7fc00000

08006cd0 <quorem>:
 8006cd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd4:	6903      	ldr	r3, [r0, #16]
 8006cd6:	690c      	ldr	r4, [r1, #16]
 8006cd8:	42a3      	cmp	r3, r4
 8006cda:	4607      	mov	r7, r0
 8006cdc:	db7e      	blt.n	8006ddc <quorem+0x10c>
 8006cde:	3c01      	subs	r4, #1
 8006ce0:	f101 0814 	add.w	r8, r1, #20
 8006ce4:	00a3      	lsls	r3, r4, #2
 8006ce6:	f100 0514 	add.w	r5, r0, #20
 8006cea:	9300      	str	r3, [sp, #0]
 8006cec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006cf0:	9301      	str	r3, [sp, #4]
 8006cf2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006cf6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006d02:	fbb2 f6f3 	udiv	r6, r2, r3
 8006d06:	d32e      	bcc.n	8006d66 <quorem+0x96>
 8006d08:	f04f 0a00 	mov.w	sl, #0
 8006d0c:	46c4      	mov	ip, r8
 8006d0e:	46ae      	mov	lr, r5
 8006d10:	46d3      	mov	fp, sl
 8006d12:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006d16:	b298      	uxth	r0, r3
 8006d18:	fb06 a000 	mla	r0, r6, r0, sl
 8006d1c:	0c02      	lsrs	r2, r0, #16
 8006d1e:	0c1b      	lsrs	r3, r3, #16
 8006d20:	fb06 2303 	mla	r3, r6, r3, r2
 8006d24:	f8de 2000 	ldr.w	r2, [lr]
 8006d28:	b280      	uxth	r0, r0
 8006d2a:	b292      	uxth	r2, r2
 8006d2c:	1a12      	subs	r2, r2, r0
 8006d2e:	445a      	add	r2, fp
 8006d30:	f8de 0000 	ldr.w	r0, [lr]
 8006d34:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006d3e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006d42:	b292      	uxth	r2, r2
 8006d44:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006d48:	45e1      	cmp	r9, ip
 8006d4a:	f84e 2b04 	str.w	r2, [lr], #4
 8006d4e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006d52:	d2de      	bcs.n	8006d12 <quorem+0x42>
 8006d54:	9b00      	ldr	r3, [sp, #0]
 8006d56:	58eb      	ldr	r3, [r5, r3]
 8006d58:	b92b      	cbnz	r3, 8006d66 <quorem+0x96>
 8006d5a:	9b01      	ldr	r3, [sp, #4]
 8006d5c:	3b04      	subs	r3, #4
 8006d5e:	429d      	cmp	r5, r3
 8006d60:	461a      	mov	r2, r3
 8006d62:	d32f      	bcc.n	8006dc4 <quorem+0xf4>
 8006d64:	613c      	str	r4, [r7, #16]
 8006d66:	4638      	mov	r0, r7
 8006d68:	f001 f9c2 	bl	80080f0 <__mcmp>
 8006d6c:	2800      	cmp	r0, #0
 8006d6e:	db25      	blt.n	8006dbc <quorem+0xec>
 8006d70:	4629      	mov	r1, r5
 8006d72:	2000      	movs	r0, #0
 8006d74:	f858 2b04 	ldr.w	r2, [r8], #4
 8006d78:	f8d1 c000 	ldr.w	ip, [r1]
 8006d7c:	fa1f fe82 	uxth.w	lr, r2
 8006d80:	fa1f f38c 	uxth.w	r3, ip
 8006d84:	eba3 030e 	sub.w	r3, r3, lr
 8006d88:	4403      	add	r3, r0
 8006d8a:	0c12      	lsrs	r2, r2, #16
 8006d8c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006d90:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d9a:	45c1      	cmp	r9, r8
 8006d9c:	f841 3b04 	str.w	r3, [r1], #4
 8006da0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006da4:	d2e6      	bcs.n	8006d74 <quorem+0xa4>
 8006da6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006daa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006dae:	b922      	cbnz	r2, 8006dba <quorem+0xea>
 8006db0:	3b04      	subs	r3, #4
 8006db2:	429d      	cmp	r5, r3
 8006db4:	461a      	mov	r2, r3
 8006db6:	d30b      	bcc.n	8006dd0 <quorem+0x100>
 8006db8:	613c      	str	r4, [r7, #16]
 8006dba:	3601      	adds	r6, #1
 8006dbc:	4630      	mov	r0, r6
 8006dbe:	b003      	add	sp, #12
 8006dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dc4:	6812      	ldr	r2, [r2, #0]
 8006dc6:	3b04      	subs	r3, #4
 8006dc8:	2a00      	cmp	r2, #0
 8006dca:	d1cb      	bne.n	8006d64 <quorem+0x94>
 8006dcc:	3c01      	subs	r4, #1
 8006dce:	e7c6      	b.n	8006d5e <quorem+0x8e>
 8006dd0:	6812      	ldr	r2, [r2, #0]
 8006dd2:	3b04      	subs	r3, #4
 8006dd4:	2a00      	cmp	r2, #0
 8006dd6:	d1ef      	bne.n	8006db8 <quorem+0xe8>
 8006dd8:	3c01      	subs	r4, #1
 8006dda:	e7ea      	b.n	8006db2 <quorem+0xe2>
 8006ddc:	2000      	movs	r0, #0
 8006dde:	e7ee      	b.n	8006dbe <quorem+0xee>

08006de0 <_dtoa_r>:
 8006de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006de4:	69c7      	ldr	r7, [r0, #28]
 8006de6:	b099      	sub	sp, #100	@ 0x64
 8006de8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006dec:	ec55 4b10 	vmov	r4, r5, d0
 8006df0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006df2:	9109      	str	r1, [sp, #36]	@ 0x24
 8006df4:	4683      	mov	fp, r0
 8006df6:	920e      	str	r2, [sp, #56]	@ 0x38
 8006df8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006dfa:	b97f      	cbnz	r7, 8006e1c <_dtoa_r+0x3c>
 8006dfc:	2010      	movs	r0, #16
 8006dfe:	f000 fdfd 	bl	80079fc <malloc>
 8006e02:	4602      	mov	r2, r0
 8006e04:	f8cb 001c 	str.w	r0, [fp, #28]
 8006e08:	b920      	cbnz	r0, 8006e14 <_dtoa_r+0x34>
 8006e0a:	4ba7      	ldr	r3, [pc, #668]	@ (80070a8 <_dtoa_r+0x2c8>)
 8006e0c:	21ef      	movs	r1, #239	@ 0xef
 8006e0e:	48a7      	ldr	r0, [pc, #668]	@ (80070ac <_dtoa_r+0x2cc>)
 8006e10:	f002 fc36 	bl	8009680 <__assert_func>
 8006e14:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006e18:	6007      	str	r7, [r0, #0]
 8006e1a:	60c7      	str	r7, [r0, #12]
 8006e1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006e20:	6819      	ldr	r1, [r3, #0]
 8006e22:	b159      	cbz	r1, 8006e3c <_dtoa_r+0x5c>
 8006e24:	685a      	ldr	r2, [r3, #4]
 8006e26:	604a      	str	r2, [r1, #4]
 8006e28:	2301      	movs	r3, #1
 8006e2a:	4093      	lsls	r3, r2
 8006e2c:	608b      	str	r3, [r1, #8]
 8006e2e:	4658      	mov	r0, fp
 8006e30:	f000 feda 	bl	8007be8 <_Bfree>
 8006e34:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	601a      	str	r2, [r3, #0]
 8006e3c:	1e2b      	subs	r3, r5, #0
 8006e3e:	bfb9      	ittee	lt
 8006e40:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006e44:	9303      	strlt	r3, [sp, #12]
 8006e46:	2300      	movge	r3, #0
 8006e48:	6033      	strge	r3, [r6, #0]
 8006e4a:	9f03      	ldr	r7, [sp, #12]
 8006e4c:	4b98      	ldr	r3, [pc, #608]	@ (80070b0 <_dtoa_r+0x2d0>)
 8006e4e:	bfbc      	itt	lt
 8006e50:	2201      	movlt	r2, #1
 8006e52:	6032      	strlt	r2, [r6, #0]
 8006e54:	43bb      	bics	r3, r7
 8006e56:	d112      	bne.n	8006e7e <_dtoa_r+0x9e>
 8006e58:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006e5a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006e5e:	6013      	str	r3, [r2, #0]
 8006e60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006e64:	4323      	orrs	r3, r4
 8006e66:	f000 854d 	beq.w	8007904 <_dtoa_r+0xb24>
 8006e6a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006e6c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80070c4 <_dtoa_r+0x2e4>
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f000 854f 	beq.w	8007914 <_dtoa_r+0xb34>
 8006e76:	f10a 0303 	add.w	r3, sl, #3
 8006e7a:	f000 bd49 	b.w	8007910 <_dtoa_r+0xb30>
 8006e7e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006e82:	2200      	movs	r2, #0
 8006e84:	ec51 0b17 	vmov	r0, r1, d7
 8006e88:	2300      	movs	r3, #0
 8006e8a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006e8e:	f7f9 fe2b 	bl	8000ae8 <__aeabi_dcmpeq>
 8006e92:	4680      	mov	r8, r0
 8006e94:	b158      	cbz	r0, 8006eae <_dtoa_r+0xce>
 8006e96:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006e98:	2301      	movs	r3, #1
 8006e9a:	6013      	str	r3, [r2, #0]
 8006e9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006e9e:	b113      	cbz	r3, 8006ea6 <_dtoa_r+0xc6>
 8006ea0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006ea2:	4b84      	ldr	r3, [pc, #528]	@ (80070b4 <_dtoa_r+0x2d4>)
 8006ea4:	6013      	str	r3, [r2, #0]
 8006ea6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80070c8 <_dtoa_r+0x2e8>
 8006eaa:	f000 bd33 	b.w	8007914 <_dtoa_r+0xb34>
 8006eae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006eb2:	aa16      	add	r2, sp, #88	@ 0x58
 8006eb4:	a917      	add	r1, sp, #92	@ 0x5c
 8006eb6:	4658      	mov	r0, fp
 8006eb8:	f001 fa3a 	bl	8008330 <__d2b>
 8006ebc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006ec0:	4681      	mov	r9, r0
 8006ec2:	2e00      	cmp	r6, #0
 8006ec4:	d077      	beq.n	8006fb6 <_dtoa_r+0x1d6>
 8006ec6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ec8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006ecc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ed0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ed4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006ed8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006edc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	4b74      	ldr	r3, [pc, #464]	@ (80070b8 <_dtoa_r+0x2d8>)
 8006ee6:	f7f9 f9df 	bl	80002a8 <__aeabi_dsub>
 8006eea:	a369      	add	r3, pc, #420	@ (adr r3, 8007090 <_dtoa_r+0x2b0>)
 8006eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef0:	f7f9 fb92 	bl	8000618 <__aeabi_dmul>
 8006ef4:	a368      	add	r3, pc, #416	@ (adr r3, 8007098 <_dtoa_r+0x2b8>)
 8006ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efa:	f7f9 f9d7 	bl	80002ac <__adddf3>
 8006efe:	4604      	mov	r4, r0
 8006f00:	4630      	mov	r0, r6
 8006f02:	460d      	mov	r5, r1
 8006f04:	f7f9 fb1e 	bl	8000544 <__aeabi_i2d>
 8006f08:	a365      	add	r3, pc, #404	@ (adr r3, 80070a0 <_dtoa_r+0x2c0>)
 8006f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0e:	f7f9 fb83 	bl	8000618 <__aeabi_dmul>
 8006f12:	4602      	mov	r2, r0
 8006f14:	460b      	mov	r3, r1
 8006f16:	4620      	mov	r0, r4
 8006f18:	4629      	mov	r1, r5
 8006f1a:	f7f9 f9c7 	bl	80002ac <__adddf3>
 8006f1e:	4604      	mov	r4, r0
 8006f20:	460d      	mov	r5, r1
 8006f22:	f7f9 fe29 	bl	8000b78 <__aeabi_d2iz>
 8006f26:	2200      	movs	r2, #0
 8006f28:	4607      	mov	r7, r0
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	4620      	mov	r0, r4
 8006f2e:	4629      	mov	r1, r5
 8006f30:	f7f9 fde4 	bl	8000afc <__aeabi_dcmplt>
 8006f34:	b140      	cbz	r0, 8006f48 <_dtoa_r+0x168>
 8006f36:	4638      	mov	r0, r7
 8006f38:	f7f9 fb04 	bl	8000544 <__aeabi_i2d>
 8006f3c:	4622      	mov	r2, r4
 8006f3e:	462b      	mov	r3, r5
 8006f40:	f7f9 fdd2 	bl	8000ae8 <__aeabi_dcmpeq>
 8006f44:	b900      	cbnz	r0, 8006f48 <_dtoa_r+0x168>
 8006f46:	3f01      	subs	r7, #1
 8006f48:	2f16      	cmp	r7, #22
 8006f4a:	d851      	bhi.n	8006ff0 <_dtoa_r+0x210>
 8006f4c:	4b5b      	ldr	r3, [pc, #364]	@ (80070bc <_dtoa_r+0x2dc>)
 8006f4e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f5a:	f7f9 fdcf 	bl	8000afc <__aeabi_dcmplt>
 8006f5e:	2800      	cmp	r0, #0
 8006f60:	d048      	beq.n	8006ff4 <_dtoa_r+0x214>
 8006f62:	3f01      	subs	r7, #1
 8006f64:	2300      	movs	r3, #0
 8006f66:	9312      	str	r3, [sp, #72]	@ 0x48
 8006f68:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006f6a:	1b9b      	subs	r3, r3, r6
 8006f6c:	1e5a      	subs	r2, r3, #1
 8006f6e:	bf44      	itt	mi
 8006f70:	f1c3 0801 	rsbmi	r8, r3, #1
 8006f74:	2300      	movmi	r3, #0
 8006f76:	9208      	str	r2, [sp, #32]
 8006f78:	bf54      	ite	pl
 8006f7a:	f04f 0800 	movpl.w	r8, #0
 8006f7e:	9308      	strmi	r3, [sp, #32]
 8006f80:	2f00      	cmp	r7, #0
 8006f82:	db39      	blt.n	8006ff8 <_dtoa_r+0x218>
 8006f84:	9b08      	ldr	r3, [sp, #32]
 8006f86:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006f88:	443b      	add	r3, r7
 8006f8a:	9308      	str	r3, [sp, #32]
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f92:	2b09      	cmp	r3, #9
 8006f94:	d864      	bhi.n	8007060 <_dtoa_r+0x280>
 8006f96:	2b05      	cmp	r3, #5
 8006f98:	bfc4      	itt	gt
 8006f9a:	3b04      	subgt	r3, #4
 8006f9c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006f9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fa0:	f1a3 0302 	sub.w	r3, r3, #2
 8006fa4:	bfcc      	ite	gt
 8006fa6:	2400      	movgt	r4, #0
 8006fa8:	2401      	movle	r4, #1
 8006faa:	2b03      	cmp	r3, #3
 8006fac:	d863      	bhi.n	8007076 <_dtoa_r+0x296>
 8006fae:	e8df f003 	tbb	[pc, r3]
 8006fb2:	372a      	.short	0x372a
 8006fb4:	5535      	.short	0x5535
 8006fb6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006fba:	441e      	add	r6, r3
 8006fbc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006fc0:	2b20      	cmp	r3, #32
 8006fc2:	bfc1      	itttt	gt
 8006fc4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006fc8:	409f      	lslgt	r7, r3
 8006fca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006fce:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006fd2:	bfd6      	itet	le
 8006fd4:	f1c3 0320 	rsble	r3, r3, #32
 8006fd8:	ea47 0003 	orrgt.w	r0, r7, r3
 8006fdc:	fa04 f003 	lslle.w	r0, r4, r3
 8006fe0:	f7f9 faa0 	bl	8000524 <__aeabi_ui2d>
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006fea:	3e01      	subs	r6, #1
 8006fec:	9214      	str	r2, [sp, #80]	@ 0x50
 8006fee:	e777      	b.n	8006ee0 <_dtoa_r+0x100>
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e7b8      	b.n	8006f66 <_dtoa_r+0x186>
 8006ff4:	9012      	str	r0, [sp, #72]	@ 0x48
 8006ff6:	e7b7      	b.n	8006f68 <_dtoa_r+0x188>
 8006ff8:	427b      	negs	r3, r7
 8006ffa:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	eba8 0807 	sub.w	r8, r8, r7
 8007002:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007004:	e7c4      	b.n	8006f90 <_dtoa_r+0x1b0>
 8007006:	2300      	movs	r3, #0
 8007008:	930b      	str	r3, [sp, #44]	@ 0x2c
 800700a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800700c:	2b00      	cmp	r3, #0
 800700e:	dc35      	bgt.n	800707c <_dtoa_r+0x29c>
 8007010:	2301      	movs	r3, #1
 8007012:	9300      	str	r3, [sp, #0]
 8007014:	9307      	str	r3, [sp, #28]
 8007016:	461a      	mov	r2, r3
 8007018:	920e      	str	r2, [sp, #56]	@ 0x38
 800701a:	e00b      	b.n	8007034 <_dtoa_r+0x254>
 800701c:	2301      	movs	r3, #1
 800701e:	e7f3      	b.n	8007008 <_dtoa_r+0x228>
 8007020:	2300      	movs	r3, #0
 8007022:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007024:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007026:	18fb      	adds	r3, r7, r3
 8007028:	9300      	str	r3, [sp, #0]
 800702a:	3301      	adds	r3, #1
 800702c:	2b01      	cmp	r3, #1
 800702e:	9307      	str	r3, [sp, #28]
 8007030:	bfb8      	it	lt
 8007032:	2301      	movlt	r3, #1
 8007034:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007038:	2100      	movs	r1, #0
 800703a:	2204      	movs	r2, #4
 800703c:	f102 0514 	add.w	r5, r2, #20
 8007040:	429d      	cmp	r5, r3
 8007042:	d91f      	bls.n	8007084 <_dtoa_r+0x2a4>
 8007044:	6041      	str	r1, [r0, #4]
 8007046:	4658      	mov	r0, fp
 8007048:	f000 fd8e 	bl	8007b68 <_Balloc>
 800704c:	4682      	mov	sl, r0
 800704e:	2800      	cmp	r0, #0
 8007050:	d13c      	bne.n	80070cc <_dtoa_r+0x2ec>
 8007052:	4b1b      	ldr	r3, [pc, #108]	@ (80070c0 <_dtoa_r+0x2e0>)
 8007054:	4602      	mov	r2, r0
 8007056:	f240 11af 	movw	r1, #431	@ 0x1af
 800705a:	e6d8      	b.n	8006e0e <_dtoa_r+0x2e>
 800705c:	2301      	movs	r3, #1
 800705e:	e7e0      	b.n	8007022 <_dtoa_r+0x242>
 8007060:	2401      	movs	r4, #1
 8007062:	2300      	movs	r3, #0
 8007064:	9309      	str	r3, [sp, #36]	@ 0x24
 8007066:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007068:	f04f 33ff 	mov.w	r3, #4294967295
 800706c:	9300      	str	r3, [sp, #0]
 800706e:	9307      	str	r3, [sp, #28]
 8007070:	2200      	movs	r2, #0
 8007072:	2312      	movs	r3, #18
 8007074:	e7d0      	b.n	8007018 <_dtoa_r+0x238>
 8007076:	2301      	movs	r3, #1
 8007078:	930b      	str	r3, [sp, #44]	@ 0x2c
 800707a:	e7f5      	b.n	8007068 <_dtoa_r+0x288>
 800707c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800707e:	9300      	str	r3, [sp, #0]
 8007080:	9307      	str	r3, [sp, #28]
 8007082:	e7d7      	b.n	8007034 <_dtoa_r+0x254>
 8007084:	3101      	adds	r1, #1
 8007086:	0052      	lsls	r2, r2, #1
 8007088:	e7d8      	b.n	800703c <_dtoa_r+0x25c>
 800708a:	bf00      	nop
 800708c:	f3af 8000 	nop.w
 8007090:	636f4361 	.word	0x636f4361
 8007094:	3fd287a7 	.word	0x3fd287a7
 8007098:	8b60c8b3 	.word	0x8b60c8b3
 800709c:	3fc68a28 	.word	0x3fc68a28
 80070a0:	509f79fb 	.word	0x509f79fb
 80070a4:	3fd34413 	.word	0x3fd34413
 80070a8:	0800a4a2 	.word	0x0800a4a2
 80070ac:	0800a4b9 	.word	0x0800a4b9
 80070b0:	7ff00000 	.word	0x7ff00000
 80070b4:	0800a46d 	.word	0x0800a46d
 80070b8:	3ff80000 	.word	0x3ff80000
 80070bc:	0800a5b0 	.word	0x0800a5b0
 80070c0:	0800a511 	.word	0x0800a511
 80070c4:	0800a49e 	.word	0x0800a49e
 80070c8:	0800a46c 	.word	0x0800a46c
 80070cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80070d0:	6018      	str	r0, [r3, #0]
 80070d2:	9b07      	ldr	r3, [sp, #28]
 80070d4:	2b0e      	cmp	r3, #14
 80070d6:	f200 80a4 	bhi.w	8007222 <_dtoa_r+0x442>
 80070da:	2c00      	cmp	r4, #0
 80070dc:	f000 80a1 	beq.w	8007222 <_dtoa_r+0x442>
 80070e0:	2f00      	cmp	r7, #0
 80070e2:	dd33      	ble.n	800714c <_dtoa_r+0x36c>
 80070e4:	4bad      	ldr	r3, [pc, #692]	@ (800739c <_dtoa_r+0x5bc>)
 80070e6:	f007 020f 	and.w	r2, r7, #15
 80070ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070ee:	ed93 7b00 	vldr	d7, [r3]
 80070f2:	05f8      	lsls	r0, r7, #23
 80070f4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80070f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80070fc:	d516      	bpl.n	800712c <_dtoa_r+0x34c>
 80070fe:	4ba8      	ldr	r3, [pc, #672]	@ (80073a0 <_dtoa_r+0x5c0>)
 8007100:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007104:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007108:	f7f9 fbb0 	bl	800086c <__aeabi_ddiv>
 800710c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007110:	f004 040f 	and.w	r4, r4, #15
 8007114:	2603      	movs	r6, #3
 8007116:	4da2      	ldr	r5, [pc, #648]	@ (80073a0 <_dtoa_r+0x5c0>)
 8007118:	b954      	cbnz	r4, 8007130 <_dtoa_r+0x350>
 800711a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800711e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007122:	f7f9 fba3 	bl	800086c <__aeabi_ddiv>
 8007126:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800712a:	e028      	b.n	800717e <_dtoa_r+0x39e>
 800712c:	2602      	movs	r6, #2
 800712e:	e7f2      	b.n	8007116 <_dtoa_r+0x336>
 8007130:	07e1      	lsls	r1, r4, #31
 8007132:	d508      	bpl.n	8007146 <_dtoa_r+0x366>
 8007134:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007138:	e9d5 2300 	ldrd	r2, r3, [r5]
 800713c:	f7f9 fa6c 	bl	8000618 <__aeabi_dmul>
 8007140:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007144:	3601      	adds	r6, #1
 8007146:	1064      	asrs	r4, r4, #1
 8007148:	3508      	adds	r5, #8
 800714a:	e7e5      	b.n	8007118 <_dtoa_r+0x338>
 800714c:	f000 80d2 	beq.w	80072f4 <_dtoa_r+0x514>
 8007150:	427c      	negs	r4, r7
 8007152:	4b92      	ldr	r3, [pc, #584]	@ (800739c <_dtoa_r+0x5bc>)
 8007154:	4d92      	ldr	r5, [pc, #584]	@ (80073a0 <_dtoa_r+0x5c0>)
 8007156:	f004 020f 	and.w	r2, r4, #15
 800715a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800715e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007162:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007166:	f7f9 fa57 	bl	8000618 <__aeabi_dmul>
 800716a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800716e:	1124      	asrs	r4, r4, #4
 8007170:	2300      	movs	r3, #0
 8007172:	2602      	movs	r6, #2
 8007174:	2c00      	cmp	r4, #0
 8007176:	f040 80b2 	bne.w	80072de <_dtoa_r+0x4fe>
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1d3      	bne.n	8007126 <_dtoa_r+0x346>
 800717e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007180:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007184:	2b00      	cmp	r3, #0
 8007186:	f000 80b7 	beq.w	80072f8 <_dtoa_r+0x518>
 800718a:	4b86      	ldr	r3, [pc, #536]	@ (80073a4 <_dtoa_r+0x5c4>)
 800718c:	2200      	movs	r2, #0
 800718e:	4620      	mov	r0, r4
 8007190:	4629      	mov	r1, r5
 8007192:	f7f9 fcb3 	bl	8000afc <__aeabi_dcmplt>
 8007196:	2800      	cmp	r0, #0
 8007198:	f000 80ae 	beq.w	80072f8 <_dtoa_r+0x518>
 800719c:	9b07      	ldr	r3, [sp, #28]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	f000 80aa 	beq.w	80072f8 <_dtoa_r+0x518>
 80071a4:	9b00      	ldr	r3, [sp, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	dd37      	ble.n	800721a <_dtoa_r+0x43a>
 80071aa:	1e7b      	subs	r3, r7, #1
 80071ac:	9304      	str	r3, [sp, #16]
 80071ae:	4620      	mov	r0, r4
 80071b0:	4b7d      	ldr	r3, [pc, #500]	@ (80073a8 <_dtoa_r+0x5c8>)
 80071b2:	2200      	movs	r2, #0
 80071b4:	4629      	mov	r1, r5
 80071b6:	f7f9 fa2f 	bl	8000618 <__aeabi_dmul>
 80071ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071be:	9c00      	ldr	r4, [sp, #0]
 80071c0:	3601      	adds	r6, #1
 80071c2:	4630      	mov	r0, r6
 80071c4:	f7f9 f9be 	bl	8000544 <__aeabi_i2d>
 80071c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80071cc:	f7f9 fa24 	bl	8000618 <__aeabi_dmul>
 80071d0:	4b76      	ldr	r3, [pc, #472]	@ (80073ac <_dtoa_r+0x5cc>)
 80071d2:	2200      	movs	r2, #0
 80071d4:	f7f9 f86a 	bl	80002ac <__adddf3>
 80071d8:	4605      	mov	r5, r0
 80071da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80071de:	2c00      	cmp	r4, #0
 80071e0:	f040 808d 	bne.w	80072fe <_dtoa_r+0x51e>
 80071e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071e8:	4b71      	ldr	r3, [pc, #452]	@ (80073b0 <_dtoa_r+0x5d0>)
 80071ea:	2200      	movs	r2, #0
 80071ec:	f7f9 f85c 	bl	80002a8 <__aeabi_dsub>
 80071f0:	4602      	mov	r2, r0
 80071f2:	460b      	mov	r3, r1
 80071f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80071f8:	462a      	mov	r2, r5
 80071fa:	4633      	mov	r3, r6
 80071fc:	f7f9 fc9c 	bl	8000b38 <__aeabi_dcmpgt>
 8007200:	2800      	cmp	r0, #0
 8007202:	f040 828b 	bne.w	800771c <_dtoa_r+0x93c>
 8007206:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800720a:	462a      	mov	r2, r5
 800720c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007210:	f7f9 fc74 	bl	8000afc <__aeabi_dcmplt>
 8007214:	2800      	cmp	r0, #0
 8007216:	f040 8128 	bne.w	800746a <_dtoa_r+0x68a>
 800721a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800721e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007222:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007224:	2b00      	cmp	r3, #0
 8007226:	f2c0 815a 	blt.w	80074de <_dtoa_r+0x6fe>
 800722a:	2f0e      	cmp	r7, #14
 800722c:	f300 8157 	bgt.w	80074de <_dtoa_r+0x6fe>
 8007230:	4b5a      	ldr	r3, [pc, #360]	@ (800739c <_dtoa_r+0x5bc>)
 8007232:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007236:	ed93 7b00 	vldr	d7, [r3]
 800723a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800723c:	2b00      	cmp	r3, #0
 800723e:	ed8d 7b00 	vstr	d7, [sp]
 8007242:	da03      	bge.n	800724c <_dtoa_r+0x46c>
 8007244:	9b07      	ldr	r3, [sp, #28]
 8007246:	2b00      	cmp	r3, #0
 8007248:	f340 8101 	ble.w	800744e <_dtoa_r+0x66e>
 800724c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007250:	4656      	mov	r6, sl
 8007252:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007256:	4620      	mov	r0, r4
 8007258:	4629      	mov	r1, r5
 800725a:	f7f9 fb07 	bl	800086c <__aeabi_ddiv>
 800725e:	f7f9 fc8b 	bl	8000b78 <__aeabi_d2iz>
 8007262:	4680      	mov	r8, r0
 8007264:	f7f9 f96e 	bl	8000544 <__aeabi_i2d>
 8007268:	e9dd 2300 	ldrd	r2, r3, [sp]
 800726c:	f7f9 f9d4 	bl	8000618 <__aeabi_dmul>
 8007270:	4602      	mov	r2, r0
 8007272:	460b      	mov	r3, r1
 8007274:	4620      	mov	r0, r4
 8007276:	4629      	mov	r1, r5
 8007278:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800727c:	f7f9 f814 	bl	80002a8 <__aeabi_dsub>
 8007280:	f806 4b01 	strb.w	r4, [r6], #1
 8007284:	9d07      	ldr	r5, [sp, #28]
 8007286:	eba6 040a 	sub.w	r4, r6, sl
 800728a:	42a5      	cmp	r5, r4
 800728c:	4602      	mov	r2, r0
 800728e:	460b      	mov	r3, r1
 8007290:	f040 8117 	bne.w	80074c2 <_dtoa_r+0x6e2>
 8007294:	f7f9 f80a 	bl	80002ac <__adddf3>
 8007298:	e9dd 2300 	ldrd	r2, r3, [sp]
 800729c:	4604      	mov	r4, r0
 800729e:	460d      	mov	r5, r1
 80072a0:	f7f9 fc4a 	bl	8000b38 <__aeabi_dcmpgt>
 80072a4:	2800      	cmp	r0, #0
 80072a6:	f040 80f9 	bne.w	800749c <_dtoa_r+0x6bc>
 80072aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072ae:	4620      	mov	r0, r4
 80072b0:	4629      	mov	r1, r5
 80072b2:	f7f9 fc19 	bl	8000ae8 <__aeabi_dcmpeq>
 80072b6:	b118      	cbz	r0, 80072c0 <_dtoa_r+0x4e0>
 80072b8:	f018 0f01 	tst.w	r8, #1
 80072bc:	f040 80ee 	bne.w	800749c <_dtoa_r+0x6bc>
 80072c0:	4649      	mov	r1, r9
 80072c2:	4658      	mov	r0, fp
 80072c4:	f000 fc90 	bl	8007be8 <_Bfree>
 80072c8:	2300      	movs	r3, #0
 80072ca:	7033      	strb	r3, [r6, #0]
 80072cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80072ce:	3701      	adds	r7, #1
 80072d0:	601f      	str	r7, [r3, #0]
 80072d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	f000 831d 	beq.w	8007914 <_dtoa_r+0xb34>
 80072da:	601e      	str	r6, [r3, #0]
 80072dc:	e31a      	b.n	8007914 <_dtoa_r+0xb34>
 80072de:	07e2      	lsls	r2, r4, #31
 80072e0:	d505      	bpl.n	80072ee <_dtoa_r+0x50e>
 80072e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80072e6:	f7f9 f997 	bl	8000618 <__aeabi_dmul>
 80072ea:	3601      	adds	r6, #1
 80072ec:	2301      	movs	r3, #1
 80072ee:	1064      	asrs	r4, r4, #1
 80072f0:	3508      	adds	r5, #8
 80072f2:	e73f      	b.n	8007174 <_dtoa_r+0x394>
 80072f4:	2602      	movs	r6, #2
 80072f6:	e742      	b.n	800717e <_dtoa_r+0x39e>
 80072f8:	9c07      	ldr	r4, [sp, #28]
 80072fa:	9704      	str	r7, [sp, #16]
 80072fc:	e761      	b.n	80071c2 <_dtoa_r+0x3e2>
 80072fe:	4b27      	ldr	r3, [pc, #156]	@ (800739c <_dtoa_r+0x5bc>)
 8007300:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007302:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007306:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800730a:	4454      	add	r4, sl
 800730c:	2900      	cmp	r1, #0
 800730e:	d053      	beq.n	80073b8 <_dtoa_r+0x5d8>
 8007310:	4928      	ldr	r1, [pc, #160]	@ (80073b4 <_dtoa_r+0x5d4>)
 8007312:	2000      	movs	r0, #0
 8007314:	f7f9 faaa 	bl	800086c <__aeabi_ddiv>
 8007318:	4633      	mov	r3, r6
 800731a:	462a      	mov	r2, r5
 800731c:	f7f8 ffc4 	bl	80002a8 <__aeabi_dsub>
 8007320:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007324:	4656      	mov	r6, sl
 8007326:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800732a:	f7f9 fc25 	bl	8000b78 <__aeabi_d2iz>
 800732e:	4605      	mov	r5, r0
 8007330:	f7f9 f908 	bl	8000544 <__aeabi_i2d>
 8007334:	4602      	mov	r2, r0
 8007336:	460b      	mov	r3, r1
 8007338:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800733c:	f7f8 ffb4 	bl	80002a8 <__aeabi_dsub>
 8007340:	3530      	adds	r5, #48	@ 0x30
 8007342:	4602      	mov	r2, r0
 8007344:	460b      	mov	r3, r1
 8007346:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800734a:	f806 5b01 	strb.w	r5, [r6], #1
 800734e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007352:	f7f9 fbd3 	bl	8000afc <__aeabi_dcmplt>
 8007356:	2800      	cmp	r0, #0
 8007358:	d171      	bne.n	800743e <_dtoa_r+0x65e>
 800735a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800735e:	4911      	ldr	r1, [pc, #68]	@ (80073a4 <_dtoa_r+0x5c4>)
 8007360:	2000      	movs	r0, #0
 8007362:	f7f8 ffa1 	bl	80002a8 <__aeabi_dsub>
 8007366:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800736a:	f7f9 fbc7 	bl	8000afc <__aeabi_dcmplt>
 800736e:	2800      	cmp	r0, #0
 8007370:	f040 8095 	bne.w	800749e <_dtoa_r+0x6be>
 8007374:	42a6      	cmp	r6, r4
 8007376:	f43f af50 	beq.w	800721a <_dtoa_r+0x43a>
 800737a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800737e:	4b0a      	ldr	r3, [pc, #40]	@ (80073a8 <_dtoa_r+0x5c8>)
 8007380:	2200      	movs	r2, #0
 8007382:	f7f9 f949 	bl	8000618 <__aeabi_dmul>
 8007386:	4b08      	ldr	r3, [pc, #32]	@ (80073a8 <_dtoa_r+0x5c8>)
 8007388:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800738c:	2200      	movs	r2, #0
 800738e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007392:	f7f9 f941 	bl	8000618 <__aeabi_dmul>
 8007396:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800739a:	e7c4      	b.n	8007326 <_dtoa_r+0x546>
 800739c:	0800a5b0 	.word	0x0800a5b0
 80073a0:	0800a588 	.word	0x0800a588
 80073a4:	3ff00000 	.word	0x3ff00000
 80073a8:	40240000 	.word	0x40240000
 80073ac:	401c0000 	.word	0x401c0000
 80073b0:	40140000 	.word	0x40140000
 80073b4:	3fe00000 	.word	0x3fe00000
 80073b8:	4631      	mov	r1, r6
 80073ba:	4628      	mov	r0, r5
 80073bc:	f7f9 f92c 	bl	8000618 <__aeabi_dmul>
 80073c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80073c4:	9415      	str	r4, [sp, #84]	@ 0x54
 80073c6:	4656      	mov	r6, sl
 80073c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073cc:	f7f9 fbd4 	bl	8000b78 <__aeabi_d2iz>
 80073d0:	4605      	mov	r5, r0
 80073d2:	f7f9 f8b7 	bl	8000544 <__aeabi_i2d>
 80073d6:	4602      	mov	r2, r0
 80073d8:	460b      	mov	r3, r1
 80073da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073de:	f7f8 ff63 	bl	80002a8 <__aeabi_dsub>
 80073e2:	3530      	adds	r5, #48	@ 0x30
 80073e4:	f806 5b01 	strb.w	r5, [r6], #1
 80073e8:	4602      	mov	r2, r0
 80073ea:	460b      	mov	r3, r1
 80073ec:	42a6      	cmp	r6, r4
 80073ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80073f2:	f04f 0200 	mov.w	r2, #0
 80073f6:	d124      	bne.n	8007442 <_dtoa_r+0x662>
 80073f8:	4bac      	ldr	r3, [pc, #688]	@ (80076ac <_dtoa_r+0x8cc>)
 80073fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80073fe:	f7f8 ff55 	bl	80002ac <__adddf3>
 8007402:	4602      	mov	r2, r0
 8007404:	460b      	mov	r3, r1
 8007406:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800740a:	f7f9 fb95 	bl	8000b38 <__aeabi_dcmpgt>
 800740e:	2800      	cmp	r0, #0
 8007410:	d145      	bne.n	800749e <_dtoa_r+0x6be>
 8007412:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007416:	49a5      	ldr	r1, [pc, #660]	@ (80076ac <_dtoa_r+0x8cc>)
 8007418:	2000      	movs	r0, #0
 800741a:	f7f8 ff45 	bl	80002a8 <__aeabi_dsub>
 800741e:	4602      	mov	r2, r0
 8007420:	460b      	mov	r3, r1
 8007422:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007426:	f7f9 fb69 	bl	8000afc <__aeabi_dcmplt>
 800742a:	2800      	cmp	r0, #0
 800742c:	f43f aef5 	beq.w	800721a <_dtoa_r+0x43a>
 8007430:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007432:	1e73      	subs	r3, r6, #1
 8007434:	9315      	str	r3, [sp, #84]	@ 0x54
 8007436:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800743a:	2b30      	cmp	r3, #48	@ 0x30
 800743c:	d0f8      	beq.n	8007430 <_dtoa_r+0x650>
 800743e:	9f04      	ldr	r7, [sp, #16]
 8007440:	e73e      	b.n	80072c0 <_dtoa_r+0x4e0>
 8007442:	4b9b      	ldr	r3, [pc, #620]	@ (80076b0 <_dtoa_r+0x8d0>)
 8007444:	f7f9 f8e8 	bl	8000618 <__aeabi_dmul>
 8007448:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800744c:	e7bc      	b.n	80073c8 <_dtoa_r+0x5e8>
 800744e:	d10c      	bne.n	800746a <_dtoa_r+0x68a>
 8007450:	4b98      	ldr	r3, [pc, #608]	@ (80076b4 <_dtoa_r+0x8d4>)
 8007452:	2200      	movs	r2, #0
 8007454:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007458:	f7f9 f8de 	bl	8000618 <__aeabi_dmul>
 800745c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007460:	f7f9 fb60 	bl	8000b24 <__aeabi_dcmpge>
 8007464:	2800      	cmp	r0, #0
 8007466:	f000 8157 	beq.w	8007718 <_dtoa_r+0x938>
 800746a:	2400      	movs	r4, #0
 800746c:	4625      	mov	r5, r4
 800746e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007470:	43db      	mvns	r3, r3
 8007472:	9304      	str	r3, [sp, #16]
 8007474:	4656      	mov	r6, sl
 8007476:	2700      	movs	r7, #0
 8007478:	4621      	mov	r1, r4
 800747a:	4658      	mov	r0, fp
 800747c:	f000 fbb4 	bl	8007be8 <_Bfree>
 8007480:	2d00      	cmp	r5, #0
 8007482:	d0dc      	beq.n	800743e <_dtoa_r+0x65e>
 8007484:	b12f      	cbz	r7, 8007492 <_dtoa_r+0x6b2>
 8007486:	42af      	cmp	r7, r5
 8007488:	d003      	beq.n	8007492 <_dtoa_r+0x6b2>
 800748a:	4639      	mov	r1, r7
 800748c:	4658      	mov	r0, fp
 800748e:	f000 fbab 	bl	8007be8 <_Bfree>
 8007492:	4629      	mov	r1, r5
 8007494:	4658      	mov	r0, fp
 8007496:	f000 fba7 	bl	8007be8 <_Bfree>
 800749a:	e7d0      	b.n	800743e <_dtoa_r+0x65e>
 800749c:	9704      	str	r7, [sp, #16]
 800749e:	4633      	mov	r3, r6
 80074a0:	461e      	mov	r6, r3
 80074a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80074a6:	2a39      	cmp	r2, #57	@ 0x39
 80074a8:	d107      	bne.n	80074ba <_dtoa_r+0x6da>
 80074aa:	459a      	cmp	sl, r3
 80074ac:	d1f8      	bne.n	80074a0 <_dtoa_r+0x6c0>
 80074ae:	9a04      	ldr	r2, [sp, #16]
 80074b0:	3201      	adds	r2, #1
 80074b2:	9204      	str	r2, [sp, #16]
 80074b4:	2230      	movs	r2, #48	@ 0x30
 80074b6:	f88a 2000 	strb.w	r2, [sl]
 80074ba:	781a      	ldrb	r2, [r3, #0]
 80074bc:	3201      	adds	r2, #1
 80074be:	701a      	strb	r2, [r3, #0]
 80074c0:	e7bd      	b.n	800743e <_dtoa_r+0x65e>
 80074c2:	4b7b      	ldr	r3, [pc, #492]	@ (80076b0 <_dtoa_r+0x8d0>)
 80074c4:	2200      	movs	r2, #0
 80074c6:	f7f9 f8a7 	bl	8000618 <__aeabi_dmul>
 80074ca:	2200      	movs	r2, #0
 80074cc:	2300      	movs	r3, #0
 80074ce:	4604      	mov	r4, r0
 80074d0:	460d      	mov	r5, r1
 80074d2:	f7f9 fb09 	bl	8000ae8 <__aeabi_dcmpeq>
 80074d6:	2800      	cmp	r0, #0
 80074d8:	f43f aebb 	beq.w	8007252 <_dtoa_r+0x472>
 80074dc:	e6f0      	b.n	80072c0 <_dtoa_r+0x4e0>
 80074de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80074e0:	2a00      	cmp	r2, #0
 80074e2:	f000 80db 	beq.w	800769c <_dtoa_r+0x8bc>
 80074e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074e8:	2a01      	cmp	r2, #1
 80074ea:	f300 80bf 	bgt.w	800766c <_dtoa_r+0x88c>
 80074ee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80074f0:	2a00      	cmp	r2, #0
 80074f2:	f000 80b7 	beq.w	8007664 <_dtoa_r+0x884>
 80074f6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80074fa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80074fc:	4646      	mov	r6, r8
 80074fe:	9a08      	ldr	r2, [sp, #32]
 8007500:	2101      	movs	r1, #1
 8007502:	441a      	add	r2, r3
 8007504:	4658      	mov	r0, fp
 8007506:	4498      	add	r8, r3
 8007508:	9208      	str	r2, [sp, #32]
 800750a:	f000 fc6b 	bl	8007de4 <__i2b>
 800750e:	4605      	mov	r5, r0
 8007510:	b15e      	cbz	r6, 800752a <_dtoa_r+0x74a>
 8007512:	9b08      	ldr	r3, [sp, #32]
 8007514:	2b00      	cmp	r3, #0
 8007516:	dd08      	ble.n	800752a <_dtoa_r+0x74a>
 8007518:	42b3      	cmp	r3, r6
 800751a:	9a08      	ldr	r2, [sp, #32]
 800751c:	bfa8      	it	ge
 800751e:	4633      	movge	r3, r6
 8007520:	eba8 0803 	sub.w	r8, r8, r3
 8007524:	1af6      	subs	r6, r6, r3
 8007526:	1ad3      	subs	r3, r2, r3
 8007528:	9308      	str	r3, [sp, #32]
 800752a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800752c:	b1f3      	cbz	r3, 800756c <_dtoa_r+0x78c>
 800752e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007530:	2b00      	cmp	r3, #0
 8007532:	f000 80b7 	beq.w	80076a4 <_dtoa_r+0x8c4>
 8007536:	b18c      	cbz	r4, 800755c <_dtoa_r+0x77c>
 8007538:	4629      	mov	r1, r5
 800753a:	4622      	mov	r2, r4
 800753c:	4658      	mov	r0, fp
 800753e:	f000 fd11 	bl	8007f64 <__pow5mult>
 8007542:	464a      	mov	r2, r9
 8007544:	4601      	mov	r1, r0
 8007546:	4605      	mov	r5, r0
 8007548:	4658      	mov	r0, fp
 800754a:	f000 fc61 	bl	8007e10 <__multiply>
 800754e:	4649      	mov	r1, r9
 8007550:	9004      	str	r0, [sp, #16]
 8007552:	4658      	mov	r0, fp
 8007554:	f000 fb48 	bl	8007be8 <_Bfree>
 8007558:	9b04      	ldr	r3, [sp, #16]
 800755a:	4699      	mov	r9, r3
 800755c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800755e:	1b1a      	subs	r2, r3, r4
 8007560:	d004      	beq.n	800756c <_dtoa_r+0x78c>
 8007562:	4649      	mov	r1, r9
 8007564:	4658      	mov	r0, fp
 8007566:	f000 fcfd 	bl	8007f64 <__pow5mult>
 800756a:	4681      	mov	r9, r0
 800756c:	2101      	movs	r1, #1
 800756e:	4658      	mov	r0, fp
 8007570:	f000 fc38 	bl	8007de4 <__i2b>
 8007574:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007576:	4604      	mov	r4, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	f000 81cf 	beq.w	800791c <_dtoa_r+0xb3c>
 800757e:	461a      	mov	r2, r3
 8007580:	4601      	mov	r1, r0
 8007582:	4658      	mov	r0, fp
 8007584:	f000 fcee 	bl	8007f64 <__pow5mult>
 8007588:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800758a:	2b01      	cmp	r3, #1
 800758c:	4604      	mov	r4, r0
 800758e:	f300 8095 	bgt.w	80076bc <_dtoa_r+0x8dc>
 8007592:	9b02      	ldr	r3, [sp, #8]
 8007594:	2b00      	cmp	r3, #0
 8007596:	f040 8087 	bne.w	80076a8 <_dtoa_r+0x8c8>
 800759a:	9b03      	ldr	r3, [sp, #12]
 800759c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	f040 8089 	bne.w	80076b8 <_dtoa_r+0x8d8>
 80075a6:	9b03      	ldr	r3, [sp, #12]
 80075a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80075ac:	0d1b      	lsrs	r3, r3, #20
 80075ae:	051b      	lsls	r3, r3, #20
 80075b0:	b12b      	cbz	r3, 80075be <_dtoa_r+0x7de>
 80075b2:	9b08      	ldr	r3, [sp, #32]
 80075b4:	3301      	adds	r3, #1
 80075b6:	9308      	str	r3, [sp, #32]
 80075b8:	f108 0801 	add.w	r8, r8, #1
 80075bc:	2301      	movs	r3, #1
 80075be:	930a      	str	r3, [sp, #40]	@ 0x28
 80075c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	f000 81b0 	beq.w	8007928 <_dtoa_r+0xb48>
 80075c8:	6923      	ldr	r3, [r4, #16]
 80075ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80075ce:	6918      	ldr	r0, [r3, #16]
 80075d0:	f000 fbbc 	bl	8007d4c <__hi0bits>
 80075d4:	f1c0 0020 	rsb	r0, r0, #32
 80075d8:	9b08      	ldr	r3, [sp, #32]
 80075da:	4418      	add	r0, r3
 80075dc:	f010 001f 	ands.w	r0, r0, #31
 80075e0:	d077      	beq.n	80076d2 <_dtoa_r+0x8f2>
 80075e2:	f1c0 0320 	rsb	r3, r0, #32
 80075e6:	2b04      	cmp	r3, #4
 80075e8:	dd6b      	ble.n	80076c2 <_dtoa_r+0x8e2>
 80075ea:	9b08      	ldr	r3, [sp, #32]
 80075ec:	f1c0 001c 	rsb	r0, r0, #28
 80075f0:	4403      	add	r3, r0
 80075f2:	4480      	add	r8, r0
 80075f4:	4406      	add	r6, r0
 80075f6:	9308      	str	r3, [sp, #32]
 80075f8:	f1b8 0f00 	cmp.w	r8, #0
 80075fc:	dd05      	ble.n	800760a <_dtoa_r+0x82a>
 80075fe:	4649      	mov	r1, r9
 8007600:	4642      	mov	r2, r8
 8007602:	4658      	mov	r0, fp
 8007604:	f000 fd08 	bl	8008018 <__lshift>
 8007608:	4681      	mov	r9, r0
 800760a:	9b08      	ldr	r3, [sp, #32]
 800760c:	2b00      	cmp	r3, #0
 800760e:	dd05      	ble.n	800761c <_dtoa_r+0x83c>
 8007610:	4621      	mov	r1, r4
 8007612:	461a      	mov	r2, r3
 8007614:	4658      	mov	r0, fp
 8007616:	f000 fcff 	bl	8008018 <__lshift>
 800761a:	4604      	mov	r4, r0
 800761c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800761e:	2b00      	cmp	r3, #0
 8007620:	d059      	beq.n	80076d6 <_dtoa_r+0x8f6>
 8007622:	4621      	mov	r1, r4
 8007624:	4648      	mov	r0, r9
 8007626:	f000 fd63 	bl	80080f0 <__mcmp>
 800762a:	2800      	cmp	r0, #0
 800762c:	da53      	bge.n	80076d6 <_dtoa_r+0x8f6>
 800762e:	1e7b      	subs	r3, r7, #1
 8007630:	9304      	str	r3, [sp, #16]
 8007632:	4649      	mov	r1, r9
 8007634:	2300      	movs	r3, #0
 8007636:	220a      	movs	r2, #10
 8007638:	4658      	mov	r0, fp
 800763a:	f000 faf7 	bl	8007c2c <__multadd>
 800763e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007640:	4681      	mov	r9, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	f000 8172 	beq.w	800792c <_dtoa_r+0xb4c>
 8007648:	2300      	movs	r3, #0
 800764a:	4629      	mov	r1, r5
 800764c:	220a      	movs	r2, #10
 800764e:	4658      	mov	r0, fp
 8007650:	f000 faec 	bl	8007c2c <__multadd>
 8007654:	9b00      	ldr	r3, [sp, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	4605      	mov	r5, r0
 800765a:	dc67      	bgt.n	800772c <_dtoa_r+0x94c>
 800765c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800765e:	2b02      	cmp	r3, #2
 8007660:	dc41      	bgt.n	80076e6 <_dtoa_r+0x906>
 8007662:	e063      	b.n	800772c <_dtoa_r+0x94c>
 8007664:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007666:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800766a:	e746      	b.n	80074fa <_dtoa_r+0x71a>
 800766c:	9b07      	ldr	r3, [sp, #28]
 800766e:	1e5c      	subs	r4, r3, #1
 8007670:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007672:	42a3      	cmp	r3, r4
 8007674:	bfbf      	itttt	lt
 8007676:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007678:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800767a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800767c:	1ae3      	sublt	r3, r4, r3
 800767e:	bfb4      	ite	lt
 8007680:	18d2      	addlt	r2, r2, r3
 8007682:	1b1c      	subge	r4, r3, r4
 8007684:	9b07      	ldr	r3, [sp, #28]
 8007686:	bfbc      	itt	lt
 8007688:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800768a:	2400      	movlt	r4, #0
 800768c:	2b00      	cmp	r3, #0
 800768e:	bfb5      	itete	lt
 8007690:	eba8 0603 	sublt.w	r6, r8, r3
 8007694:	9b07      	ldrge	r3, [sp, #28]
 8007696:	2300      	movlt	r3, #0
 8007698:	4646      	movge	r6, r8
 800769a:	e730      	b.n	80074fe <_dtoa_r+0x71e>
 800769c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800769e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80076a0:	4646      	mov	r6, r8
 80076a2:	e735      	b.n	8007510 <_dtoa_r+0x730>
 80076a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80076a6:	e75c      	b.n	8007562 <_dtoa_r+0x782>
 80076a8:	2300      	movs	r3, #0
 80076aa:	e788      	b.n	80075be <_dtoa_r+0x7de>
 80076ac:	3fe00000 	.word	0x3fe00000
 80076b0:	40240000 	.word	0x40240000
 80076b4:	40140000 	.word	0x40140000
 80076b8:	9b02      	ldr	r3, [sp, #8]
 80076ba:	e780      	b.n	80075be <_dtoa_r+0x7de>
 80076bc:	2300      	movs	r3, #0
 80076be:	930a      	str	r3, [sp, #40]	@ 0x28
 80076c0:	e782      	b.n	80075c8 <_dtoa_r+0x7e8>
 80076c2:	d099      	beq.n	80075f8 <_dtoa_r+0x818>
 80076c4:	9a08      	ldr	r2, [sp, #32]
 80076c6:	331c      	adds	r3, #28
 80076c8:	441a      	add	r2, r3
 80076ca:	4498      	add	r8, r3
 80076cc:	441e      	add	r6, r3
 80076ce:	9208      	str	r2, [sp, #32]
 80076d0:	e792      	b.n	80075f8 <_dtoa_r+0x818>
 80076d2:	4603      	mov	r3, r0
 80076d4:	e7f6      	b.n	80076c4 <_dtoa_r+0x8e4>
 80076d6:	9b07      	ldr	r3, [sp, #28]
 80076d8:	9704      	str	r7, [sp, #16]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	dc20      	bgt.n	8007720 <_dtoa_r+0x940>
 80076de:	9300      	str	r3, [sp, #0]
 80076e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	dd1e      	ble.n	8007724 <_dtoa_r+0x944>
 80076e6:	9b00      	ldr	r3, [sp, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	f47f aec0 	bne.w	800746e <_dtoa_r+0x68e>
 80076ee:	4621      	mov	r1, r4
 80076f0:	2205      	movs	r2, #5
 80076f2:	4658      	mov	r0, fp
 80076f4:	f000 fa9a 	bl	8007c2c <__multadd>
 80076f8:	4601      	mov	r1, r0
 80076fa:	4604      	mov	r4, r0
 80076fc:	4648      	mov	r0, r9
 80076fe:	f000 fcf7 	bl	80080f0 <__mcmp>
 8007702:	2800      	cmp	r0, #0
 8007704:	f77f aeb3 	ble.w	800746e <_dtoa_r+0x68e>
 8007708:	4656      	mov	r6, sl
 800770a:	2331      	movs	r3, #49	@ 0x31
 800770c:	f806 3b01 	strb.w	r3, [r6], #1
 8007710:	9b04      	ldr	r3, [sp, #16]
 8007712:	3301      	adds	r3, #1
 8007714:	9304      	str	r3, [sp, #16]
 8007716:	e6ae      	b.n	8007476 <_dtoa_r+0x696>
 8007718:	9c07      	ldr	r4, [sp, #28]
 800771a:	9704      	str	r7, [sp, #16]
 800771c:	4625      	mov	r5, r4
 800771e:	e7f3      	b.n	8007708 <_dtoa_r+0x928>
 8007720:	9b07      	ldr	r3, [sp, #28]
 8007722:	9300      	str	r3, [sp, #0]
 8007724:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007726:	2b00      	cmp	r3, #0
 8007728:	f000 8104 	beq.w	8007934 <_dtoa_r+0xb54>
 800772c:	2e00      	cmp	r6, #0
 800772e:	dd05      	ble.n	800773c <_dtoa_r+0x95c>
 8007730:	4629      	mov	r1, r5
 8007732:	4632      	mov	r2, r6
 8007734:	4658      	mov	r0, fp
 8007736:	f000 fc6f 	bl	8008018 <__lshift>
 800773a:	4605      	mov	r5, r0
 800773c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800773e:	2b00      	cmp	r3, #0
 8007740:	d05a      	beq.n	80077f8 <_dtoa_r+0xa18>
 8007742:	6869      	ldr	r1, [r5, #4]
 8007744:	4658      	mov	r0, fp
 8007746:	f000 fa0f 	bl	8007b68 <_Balloc>
 800774a:	4606      	mov	r6, r0
 800774c:	b928      	cbnz	r0, 800775a <_dtoa_r+0x97a>
 800774e:	4b84      	ldr	r3, [pc, #528]	@ (8007960 <_dtoa_r+0xb80>)
 8007750:	4602      	mov	r2, r0
 8007752:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007756:	f7ff bb5a 	b.w	8006e0e <_dtoa_r+0x2e>
 800775a:	692a      	ldr	r2, [r5, #16]
 800775c:	3202      	adds	r2, #2
 800775e:	0092      	lsls	r2, r2, #2
 8007760:	f105 010c 	add.w	r1, r5, #12
 8007764:	300c      	adds	r0, #12
 8007766:	f001 ff75 	bl	8009654 <memcpy>
 800776a:	2201      	movs	r2, #1
 800776c:	4631      	mov	r1, r6
 800776e:	4658      	mov	r0, fp
 8007770:	f000 fc52 	bl	8008018 <__lshift>
 8007774:	f10a 0301 	add.w	r3, sl, #1
 8007778:	9307      	str	r3, [sp, #28]
 800777a:	9b00      	ldr	r3, [sp, #0]
 800777c:	4453      	add	r3, sl
 800777e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007780:	9b02      	ldr	r3, [sp, #8]
 8007782:	f003 0301 	and.w	r3, r3, #1
 8007786:	462f      	mov	r7, r5
 8007788:	930a      	str	r3, [sp, #40]	@ 0x28
 800778a:	4605      	mov	r5, r0
 800778c:	9b07      	ldr	r3, [sp, #28]
 800778e:	4621      	mov	r1, r4
 8007790:	3b01      	subs	r3, #1
 8007792:	4648      	mov	r0, r9
 8007794:	9300      	str	r3, [sp, #0]
 8007796:	f7ff fa9b 	bl	8006cd0 <quorem>
 800779a:	4639      	mov	r1, r7
 800779c:	9002      	str	r0, [sp, #8]
 800779e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80077a2:	4648      	mov	r0, r9
 80077a4:	f000 fca4 	bl	80080f0 <__mcmp>
 80077a8:	462a      	mov	r2, r5
 80077aa:	9008      	str	r0, [sp, #32]
 80077ac:	4621      	mov	r1, r4
 80077ae:	4658      	mov	r0, fp
 80077b0:	f000 fcba 	bl	8008128 <__mdiff>
 80077b4:	68c2      	ldr	r2, [r0, #12]
 80077b6:	4606      	mov	r6, r0
 80077b8:	bb02      	cbnz	r2, 80077fc <_dtoa_r+0xa1c>
 80077ba:	4601      	mov	r1, r0
 80077bc:	4648      	mov	r0, r9
 80077be:	f000 fc97 	bl	80080f0 <__mcmp>
 80077c2:	4602      	mov	r2, r0
 80077c4:	4631      	mov	r1, r6
 80077c6:	4658      	mov	r0, fp
 80077c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80077ca:	f000 fa0d 	bl	8007be8 <_Bfree>
 80077ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80077d2:	9e07      	ldr	r6, [sp, #28]
 80077d4:	ea43 0102 	orr.w	r1, r3, r2
 80077d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077da:	4319      	orrs	r1, r3
 80077dc:	d110      	bne.n	8007800 <_dtoa_r+0xa20>
 80077de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80077e2:	d029      	beq.n	8007838 <_dtoa_r+0xa58>
 80077e4:	9b08      	ldr	r3, [sp, #32]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	dd02      	ble.n	80077f0 <_dtoa_r+0xa10>
 80077ea:	9b02      	ldr	r3, [sp, #8]
 80077ec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80077f0:	9b00      	ldr	r3, [sp, #0]
 80077f2:	f883 8000 	strb.w	r8, [r3]
 80077f6:	e63f      	b.n	8007478 <_dtoa_r+0x698>
 80077f8:	4628      	mov	r0, r5
 80077fa:	e7bb      	b.n	8007774 <_dtoa_r+0x994>
 80077fc:	2201      	movs	r2, #1
 80077fe:	e7e1      	b.n	80077c4 <_dtoa_r+0x9e4>
 8007800:	9b08      	ldr	r3, [sp, #32]
 8007802:	2b00      	cmp	r3, #0
 8007804:	db04      	blt.n	8007810 <_dtoa_r+0xa30>
 8007806:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007808:	430b      	orrs	r3, r1
 800780a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800780c:	430b      	orrs	r3, r1
 800780e:	d120      	bne.n	8007852 <_dtoa_r+0xa72>
 8007810:	2a00      	cmp	r2, #0
 8007812:	dded      	ble.n	80077f0 <_dtoa_r+0xa10>
 8007814:	4649      	mov	r1, r9
 8007816:	2201      	movs	r2, #1
 8007818:	4658      	mov	r0, fp
 800781a:	f000 fbfd 	bl	8008018 <__lshift>
 800781e:	4621      	mov	r1, r4
 8007820:	4681      	mov	r9, r0
 8007822:	f000 fc65 	bl	80080f0 <__mcmp>
 8007826:	2800      	cmp	r0, #0
 8007828:	dc03      	bgt.n	8007832 <_dtoa_r+0xa52>
 800782a:	d1e1      	bne.n	80077f0 <_dtoa_r+0xa10>
 800782c:	f018 0f01 	tst.w	r8, #1
 8007830:	d0de      	beq.n	80077f0 <_dtoa_r+0xa10>
 8007832:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007836:	d1d8      	bne.n	80077ea <_dtoa_r+0xa0a>
 8007838:	9a00      	ldr	r2, [sp, #0]
 800783a:	2339      	movs	r3, #57	@ 0x39
 800783c:	7013      	strb	r3, [r2, #0]
 800783e:	4633      	mov	r3, r6
 8007840:	461e      	mov	r6, r3
 8007842:	3b01      	subs	r3, #1
 8007844:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007848:	2a39      	cmp	r2, #57	@ 0x39
 800784a:	d052      	beq.n	80078f2 <_dtoa_r+0xb12>
 800784c:	3201      	adds	r2, #1
 800784e:	701a      	strb	r2, [r3, #0]
 8007850:	e612      	b.n	8007478 <_dtoa_r+0x698>
 8007852:	2a00      	cmp	r2, #0
 8007854:	dd07      	ble.n	8007866 <_dtoa_r+0xa86>
 8007856:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800785a:	d0ed      	beq.n	8007838 <_dtoa_r+0xa58>
 800785c:	9a00      	ldr	r2, [sp, #0]
 800785e:	f108 0301 	add.w	r3, r8, #1
 8007862:	7013      	strb	r3, [r2, #0]
 8007864:	e608      	b.n	8007478 <_dtoa_r+0x698>
 8007866:	9b07      	ldr	r3, [sp, #28]
 8007868:	9a07      	ldr	r2, [sp, #28]
 800786a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800786e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007870:	4293      	cmp	r3, r2
 8007872:	d028      	beq.n	80078c6 <_dtoa_r+0xae6>
 8007874:	4649      	mov	r1, r9
 8007876:	2300      	movs	r3, #0
 8007878:	220a      	movs	r2, #10
 800787a:	4658      	mov	r0, fp
 800787c:	f000 f9d6 	bl	8007c2c <__multadd>
 8007880:	42af      	cmp	r7, r5
 8007882:	4681      	mov	r9, r0
 8007884:	f04f 0300 	mov.w	r3, #0
 8007888:	f04f 020a 	mov.w	r2, #10
 800788c:	4639      	mov	r1, r7
 800788e:	4658      	mov	r0, fp
 8007890:	d107      	bne.n	80078a2 <_dtoa_r+0xac2>
 8007892:	f000 f9cb 	bl	8007c2c <__multadd>
 8007896:	4607      	mov	r7, r0
 8007898:	4605      	mov	r5, r0
 800789a:	9b07      	ldr	r3, [sp, #28]
 800789c:	3301      	adds	r3, #1
 800789e:	9307      	str	r3, [sp, #28]
 80078a0:	e774      	b.n	800778c <_dtoa_r+0x9ac>
 80078a2:	f000 f9c3 	bl	8007c2c <__multadd>
 80078a6:	4629      	mov	r1, r5
 80078a8:	4607      	mov	r7, r0
 80078aa:	2300      	movs	r3, #0
 80078ac:	220a      	movs	r2, #10
 80078ae:	4658      	mov	r0, fp
 80078b0:	f000 f9bc 	bl	8007c2c <__multadd>
 80078b4:	4605      	mov	r5, r0
 80078b6:	e7f0      	b.n	800789a <_dtoa_r+0xaba>
 80078b8:	9b00      	ldr	r3, [sp, #0]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	bfcc      	ite	gt
 80078be:	461e      	movgt	r6, r3
 80078c0:	2601      	movle	r6, #1
 80078c2:	4456      	add	r6, sl
 80078c4:	2700      	movs	r7, #0
 80078c6:	4649      	mov	r1, r9
 80078c8:	2201      	movs	r2, #1
 80078ca:	4658      	mov	r0, fp
 80078cc:	f000 fba4 	bl	8008018 <__lshift>
 80078d0:	4621      	mov	r1, r4
 80078d2:	4681      	mov	r9, r0
 80078d4:	f000 fc0c 	bl	80080f0 <__mcmp>
 80078d8:	2800      	cmp	r0, #0
 80078da:	dcb0      	bgt.n	800783e <_dtoa_r+0xa5e>
 80078dc:	d102      	bne.n	80078e4 <_dtoa_r+0xb04>
 80078de:	f018 0f01 	tst.w	r8, #1
 80078e2:	d1ac      	bne.n	800783e <_dtoa_r+0xa5e>
 80078e4:	4633      	mov	r3, r6
 80078e6:	461e      	mov	r6, r3
 80078e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078ec:	2a30      	cmp	r2, #48	@ 0x30
 80078ee:	d0fa      	beq.n	80078e6 <_dtoa_r+0xb06>
 80078f0:	e5c2      	b.n	8007478 <_dtoa_r+0x698>
 80078f2:	459a      	cmp	sl, r3
 80078f4:	d1a4      	bne.n	8007840 <_dtoa_r+0xa60>
 80078f6:	9b04      	ldr	r3, [sp, #16]
 80078f8:	3301      	adds	r3, #1
 80078fa:	9304      	str	r3, [sp, #16]
 80078fc:	2331      	movs	r3, #49	@ 0x31
 80078fe:	f88a 3000 	strb.w	r3, [sl]
 8007902:	e5b9      	b.n	8007478 <_dtoa_r+0x698>
 8007904:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007906:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007964 <_dtoa_r+0xb84>
 800790a:	b11b      	cbz	r3, 8007914 <_dtoa_r+0xb34>
 800790c:	f10a 0308 	add.w	r3, sl, #8
 8007910:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007912:	6013      	str	r3, [r2, #0]
 8007914:	4650      	mov	r0, sl
 8007916:	b019      	add	sp, #100	@ 0x64
 8007918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800791c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800791e:	2b01      	cmp	r3, #1
 8007920:	f77f ae37 	ble.w	8007592 <_dtoa_r+0x7b2>
 8007924:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007926:	930a      	str	r3, [sp, #40]	@ 0x28
 8007928:	2001      	movs	r0, #1
 800792a:	e655      	b.n	80075d8 <_dtoa_r+0x7f8>
 800792c:	9b00      	ldr	r3, [sp, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	f77f aed6 	ble.w	80076e0 <_dtoa_r+0x900>
 8007934:	4656      	mov	r6, sl
 8007936:	4621      	mov	r1, r4
 8007938:	4648      	mov	r0, r9
 800793a:	f7ff f9c9 	bl	8006cd0 <quorem>
 800793e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007942:	f806 8b01 	strb.w	r8, [r6], #1
 8007946:	9b00      	ldr	r3, [sp, #0]
 8007948:	eba6 020a 	sub.w	r2, r6, sl
 800794c:	4293      	cmp	r3, r2
 800794e:	ddb3      	ble.n	80078b8 <_dtoa_r+0xad8>
 8007950:	4649      	mov	r1, r9
 8007952:	2300      	movs	r3, #0
 8007954:	220a      	movs	r2, #10
 8007956:	4658      	mov	r0, fp
 8007958:	f000 f968 	bl	8007c2c <__multadd>
 800795c:	4681      	mov	r9, r0
 800795e:	e7ea      	b.n	8007936 <_dtoa_r+0xb56>
 8007960:	0800a511 	.word	0x0800a511
 8007964:	0800a495 	.word	0x0800a495

08007968 <_free_r>:
 8007968:	b538      	push	{r3, r4, r5, lr}
 800796a:	4605      	mov	r5, r0
 800796c:	2900      	cmp	r1, #0
 800796e:	d041      	beq.n	80079f4 <_free_r+0x8c>
 8007970:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007974:	1f0c      	subs	r4, r1, #4
 8007976:	2b00      	cmp	r3, #0
 8007978:	bfb8      	it	lt
 800797a:	18e4      	addlt	r4, r4, r3
 800797c:	f000 f8e8 	bl	8007b50 <__malloc_lock>
 8007980:	4a1d      	ldr	r2, [pc, #116]	@ (80079f8 <_free_r+0x90>)
 8007982:	6813      	ldr	r3, [r2, #0]
 8007984:	b933      	cbnz	r3, 8007994 <_free_r+0x2c>
 8007986:	6063      	str	r3, [r4, #4]
 8007988:	6014      	str	r4, [r2, #0]
 800798a:	4628      	mov	r0, r5
 800798c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007990:	f000 b8e4 	b.w	8007b5c <__malloc_unlock>
 8007994:	42a3      	cmp	r3, r4
 8007996:	d908      	bls.n	80079aa <_free_r+0x42>
 8007998:	6820      	ldr	r0, [r4, #0]
 800799a:	1821      	adds	r1, r4, r0
 800799c:	428b      	cmp	r3, r1
 800799e:	bf01      	itttt	eq
 80079a0:	6819      	ldreq	r1, [r3, #0]
 80079a2:	685b      	ldreq	r3, [r3, #4]
 80079a4:	1809      	addeq	r1, r1, r0
 80079a6:	6021      	streq	r1, [r4, #0]
 80079a8:	e7ed      	b.n	8007986 <_free_r+0x1e>
 80079aa:	461a      	mov	r2, r3
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	b10b      	cbz	r3, 80079b4 <_free_r+0x4c>
 80079b0:	42a3      	cmp	r3, r4
 80079b2:	d9fa      	bls.n	80079aa <_free_r+0x42>
 80079b4:	6811      	ldr	r1, [r2, #0]
 80079b6:	1850      	adds	r0, r2, r1
 80079b8:	42a0      	cmp	r0, r4
 80079ba:	d10b      	bne.n	80079d4 <_free_r+0x6c>
 80079bc:	6820      	ldr	r0, [r4, #0]
 80079be:	4401      	add	r1, r0
 80079c0:	1850      	adds	r0, r2, r1
 80079c2:	4283      	cmp	r3, r0
 80079c4:	6011      	str	r1, [r2, #0]
 80079c6:	d1e0      	bne.n	800798a <_free_r+0x22>
 80079c8:	6818      	ldr	r0, [r3, #0]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	6053      	str	r3, [r2, #4]
 80079ce:	4408      	add	r0, r1
 80079d0:	6010      	str	r0, [r2, #0]
 80079d2:	e7da      	b.n	800798a <_free_r+0x22>
 80079d4:	d902      	bls.n	80079dc <_free_r+0x74>
 80079d6:	230c      	movs	r3, #12
 80079d8:	602b      	str	r3, [r5, #0]
 80079da:	e7d6      	b.n	800798a <_free_r+0x22>
 80079dc:	6820      	ldr	r0, [r4, #0]
 80079de:	1821      	adds	r1, r4, r0
 80079e0:	428b      	cmp	r3, r1
 80079e2:	bf04      	itt	eq
 80079e4:	6819      	ldreq	r1, [r3, #0]
 80079e6:	685b      	ldreq	r3, [r3, #4]
 80079e8:	6063      	str	r3, [r4, #4]
 80079ea:	bf04      	itt	eq
 80079ec:	1809      	addeq	r1, r1, r0
 80079ee:	6021      	streq	r1, [r4, #0]
 80079f0:	6054      	str	r4, [r2, #4]
 80079f2:	e7ca      	b.n	800798a <_free_r+0x22>
 80079f4:	bd38      	pop	{r3, r4, r5, pc}
 80079f6:	bf00      	nop
 80079f8:	2000144c 	.word	0x2000144c

080079fc <malloc>:
 80079fc:	4b02      	ldr	r3, [pc, #8]	@ (8007a08 <malloc+0xc>)
 80079fe:	4601      	mov	r1, r0
 8007a00:	6818      	ldr	r0, [r3, #0]
 8007a02:	f000 b825 	b.w	8007a50 <_malloc_r>
 8007a06:	bf00      	nop
 8007a08:	20000018 	.word	0x20000018

08007a0c <sbrk_aligned>:
 8007a0c:	b570      	push	{r4, r5, r6, lr}
 8007a0e:	4e0f      	ldr	r6, [pc, #60]	@ (8007a4c <sbrk_aligned+0x40>)
 8007a10:	460c      	mov	r4, r1
 8007a12:	6831      	ldr	r1, [r6, #0]
 8007a14:	4605      	mov	r5, r0
 8007a16:	b911      	cbnz	r1, 8007a1e <sbrk_aligned+0x12>
 8007a18:	f001 fe0c 	bl	8009634 <_sbrk_r>
 8007a1c:	6030      	str	r0, [r6, #0]
 8007a1e:	4621      	mov	r1, r4
 8007a20:	4628      	mov	r0, r5
 8007a22:	f001 fe07 	bl	8009634 <_sbrk_r>
 8007a26:	1c43      	adds	r3, r0, #1
 8007a28:	d103      	bne.n	8007a32 <sbrk_aligned+0x26>
 8007a2a:	f04f 34ff 	mov.w	r4, #4294967295
 8007a2e:	4620      	mov	r0, r4
 8007a30:	bd70      	pop	{r4, r5, r6, pc}
 8007a32:	1cc4      	adds	r4, r0, #3
 8007a34:	f024 0403 	bic.w	r4, r4, #3
 8007a38:	42a0      	cmp	r0, r4
 8007a3a:	d0f8      	beq.n	8007a2e <sbrk_aligned+0x22>
 8007a3c:	1a21      	subs	r1, r4, r0
 8007a3e:	4628      	mov	r0, r5
 8007a40:	f001 fdf8 	bl	8009634 <_sbrk_r>
 8007a44:	3001      	adds	r0, #1
 8007a46:	d1f2      	bne.n	8007a2e <sbrk_aligned+0x22>
 8007a48:	e7ef      	b.n	8007a2a <sbrk_aligned+0x1e>
 8007a4a:	bf00      	nop
 8007a4c:	20001448 	.word	0x20001448

08007a50 <_malloc_r>:
 8007a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a54:	1ccd      	adds	r5, r1, #3
 8007a56:	f025 0503 	bic.w	r5, r5, #3
 8007a5a:	3508      	adds	r5, #8
 8007a5c:	2d0c      	cmp	r5, #12
 8007a5e:	bf38      	it	cc
 8007a60:	250c      	movcc	r5, #12
 8007a62:	2d00      	cmp	r5, #0
 8007a64:	4606      	mov	r6, r0
 8007a66:	db01      	blt.n	8007a6c <_malloc_r+0x1c>
 8007a68:	42a9      	cmp	r1, r5
 8007a6a:	d904      	bls.n	8007a76 <_malloc_r+0x26>
 8007a6c:	230c      	movs	r3, #12
 8007a6e:	6033      	str	r3, [r6, #0]
 8007a70:	2000      	movs	r0, #0
 8007a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007b4c <_malloc_r+0xfc>
 8007a7a:	f000 f869 	bl	8007b50 <__malloc_lock>
 8007a7e:	f8d8 3000 	ldr.w	r3, [r8]
 8007a82:	461c      	mov	r4, r3
 8007a84:	bb44      	cbnz	r4, 8007ad8 <_malloc_r+0x88>
 8007a86:	4629      	mov	r1, r5
 8007a88:	4630      	mov	r0, r6
 8007a8a:	f7ff ffbf 	bl	8007a0c <sbrk_aligned>
 8007a8e:	1c43      	adds	r3, r0, #1
 8007a90:	4604      	mov	r4, r0
 8007a92:	d158      	bne.n	8007b46 <_malloc_r+0xf6>
 8007a94:	f8d8 4000 	ldr.w	r4, [r8]
 8007a98:	4627      	mov	r7, r4
 8007a9a:	2f00      	cmp	r7, #0
 8007a9c:	d143      	bne.n	8007b26 <_malloc_r+0xd6>
 8007a9e:	2c00      	cmp	r4, #0
 8007aa0:	d04b      	beq.n	8007b3a <_malloc_r+0xea>
 8007aa2:	6823      	ldr	r3, [r4, #0]
 8007aa4:	4639      	mov	r1, r7
 8007aa6:	4630      	mov	r0, r6
 8007aa8:	eb04 0903 	add.w	r9, r4, r3
 8007aac:	f001 fdc2 	bl	8009634 <_sbrk_r>
 8007ab0:	4581      	cmp	r9, r0
 8007ab2:	d142      	bne.n	8007b3a <_malloc_r+0xea>
 8007ab4:	6821      	ldr	r1, [r4, #0]
 8007ab6:	1a6d      	subs	r5, r5, r1
 8007ab8:	4629      	mov	r1, r5
 8007aba:	4630      	mov	r0, r6
 8007abc:	f7ff ffa6 	bl	8007a0c <sbrk_aligned>
 8007ac0:	3001      	adds	r0, #1
 8007ac2:	d03a      	beq.n	8007b3a <_malloc_r+0xea>
 8007ac4:	6823      	ldr	r3, [r4, #0]
 8007ac6:	442b      	add	r3, r5
 8007ac8:	6023      	str	r3, [r4, #0]
 8007aca:	f8d8 3000 	ldr.w	r3, [r8]
 8007ace:	685a      	ldr	r2, [r3, #4]
 8007ad0:	bb62      	cbnz	r2, 8007b2c <_malloc_r+0xdc>
 8007ad2:	f8c8 7000 	str.w	r7, [r8]
 8007ad6:	e00f      	b.n	8007af8 <_malloc_r+0xa8>
 8007ad8:	6822      	ldr	r2, [r4, #0]
 8007ada:	1b52      	subs	r2, r2, r5
 8007adc:	d420      	bmi.n	8007b20 <_malloc_r+0xd0>
 8007ade:	2a0b      	cmp	r2, #11
 8007ae0:	d917      	bls.n	8007b12 <_malloc_r+0xc2>
 8007ae2:	1961      	adds	r1, r4, r5
 8007ae4:	42a3      	cmp	r3, r4
 8007ae6:	6025      	str	r5, [r4, #0]
 8007ae8:	bf18      	it	ne
 8007aea:	6059      	strne	r1, [r3, #4]
 8007aec:	6863      	ldr	r3, [r4, #4]
 8007aee:	bf08      	it	eq
 8007af0:	f8c8 1000 	streq.w	r1, [r8]
 8007af4:	5162      	str	r2, [r4, r5]
 8007af6:	604b      	str	r3, [r1, #4]
 8007af8:	4630      	mov	r0, r6
 8007afa:	f000 f82f 	bl	8007b5c <__malloc_unlock>
 8007afe:	f104 000b 	add.w	r0, r4, #11
 8007b02:	1d23      	adds	r3, r4, #4
 8007b04:	f020 0007 	bic.w	r0, r0, #7
 8007b08:	1ac2      	subs	r2, r0, r3
 8007b0a:	bf1c      	itt	ne
 8007b0c:	1a1b      	subne	r3, r3, r0
 8007b0e:	50a3      	strne	r3, [r4, r2]
 8007b10:	e7af      	b.n	8007a72 <_malloc_r+0x22>
 8007b12:	6862      	ldr	r2, [r4, #4]
 8007b14:	42a3      	cmp	r3, r4
 8007b16:	bf0c      	ite	eq
 8007b18:	f8c8 2000 	streq.w	r2, [r8]
 8007b1c:	605a      	strne	r2, [r3, #4]
 8007b1e:	e7eb      	b.n	8007af8 <_malloc_r+0xa8>
 8007b20:	4623      	mov	r3, r4
 8007b22:	6864      	ldr	r4, [r4, #4]
 8007b24:	e7ae      	b.n	8007a84 <_malloc_r+0x34>
 8007b26:	463c      	mov	r4, r7
 8007b28:	687f      	ldr	r7, [r7, #4]
 8007b2a:	e7b6      	b.n	8007a9a <_malloc_r+0x4a>
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	42a3      	cmp	r3, r4
 8007b32:	d1fb      	bne.n	8007b2c <_malloc_r+0xdc>
 8007b34:	2300      	movs	r3, #0
 8007b36:	6053      	str	r3, [r2, #4]
 8007b38:	e7de      	b.n	8007af8 <_malloc_r+0xa8>
 8007b3a:	230c      	movs	r3, #12
 8007b3c:	6033      	str	r3, [r6, #0]
 8007b3e:	4630      	mov	r0, r6
 8007b40:	f000 f80c 	bl	8007b5c <__malloc_unlock>
 8007b44:	e794      	b.n	8007a70 <_malloc_r+0x20>
 8007b46:	6005      	str	r5, [r0, #0]
 8007b48:	e7d6      	b.n	8007af8 <_malloc_r+0xa8>
 8007b4a:	bf00      	nop
 8007b4c:	2000144c 	.word	0x2000144c

08007b50 <__malloc_lock>:
 8007b50:	4801      	ldr	r0, [pc, #4]	@ (8007b58 <__malloc_lock+0x8>)
 8007b52:	f7ff b8b4 	b.w	8006cbe <__retarget_lock_acquire_recursive>
 8007b56:	bf00      	nop
 8007b58:	20001444 	.word	0x20001444

08007b5c <__malloc_unlock>:
 8007b5c:	4801      	ldr	r0, [pc, #4]	@ (8007b64 <__malloc_unlock+0x8>)
 8007b5e:	f7ff b8af 	b.w	8006cc0 <__retarget_lock_release_recursive>
 8007b62:	bf00      	nop
 8007b64:	20001444 	.word	0x20001444

08007b68 <_Balloc>:
 8007b68:	b570      	push	{r4, r5, r6, lr}
 8007b6a:	69c6      	ldr	r6, [r0, #28]
 8007b6c:	4604      	mov	r4, r0
 8007b6e:	460d      	mov	r5, r1
 8007b70:	b976      	cbnz	r6, 8007b90 <_Balloc+0x28>
 8007b72:	2010      	movs	r0, #16
 8007b74:	f7ff ff42 	bl	80079fc <malloc>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	61e0      	str	r0, [r4, #28]
 8007b7c:	b920      	cbnz	r0, 8007b88 <_Balloc+0x20>
 8007b7e:	4b18      	ldr	r3, [pc, #96]	@ (8007be0 <_Balloc+0x78>)
 8007b80:	4818      	ldr	r0, [pc, #96]	@ (8007be4 <_Balloc+0x7c>)
 8007b82:	216b      	movs	r1, #107	@ 0x6b
 8007b84:	f001 fd7c 	bl	8009680 <__assert_func>
 8007b88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b8c:	6006      	str	r6, [r0, #0]
 8007b8e:	60c6      	str	r6, [r0, #12]
 8007b90:	69e6      	ldr	r6, [r4, #28]
 8007b92:	68f3      	ldr	r3, [r6, #12]
 8007b94:	b183      	cbz	r3, 8007bb8 <_Balloc+0x50>
 8007b96:	69e3      	ldr	r3, [r4, #28]
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007b9e:	b9b8      	cbnz	r0, 8007bd0 <_Balloc+0x68>
 8007ba0:	2101      	movs	r1, #1
 8007ba2:	fa01 f605 	lsl.w	r6, r1, r5
 8007ba6:	1d72      	adds	r2, r6, #5
 8007ba8:	0092      	lsls	r2, r2, #2
 8007baa:	4620      	mov	r0, r4
 8007bac:	f001 fd86 	bl	80096bc <_calloc_r>
 8007bb0:	b160      	cbz	r0, 8007bcc <_Balloc+0x64>
 8007bb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007bb6:	e00e      	b.n	8007bd6 <_Balloc+0x6e>
 8007bb8:	2221      	movs	r2, #33	@ 0x21
 8007bba:	2104      	movs	r1, #4
 8007bbc:	4620      	mov	r0, r4
 8007bbe:	f001 fd7d 	bl	80096bc <_calloc_r>
 8007bc2:	69e3      	ldr	r3, [r4, #28]
 8007bc4:	60f0      	str	r0, [r6, #12]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d1e4      	bne.n	8007b96 <_Balloc+0x2e>
 8007bcc:	2000      	movs	r0, #0
 8007bce:	bd70      	pop	{r4, r5, r6, pc}
 8007bd0:	6802      	ldr	r2, [r0, #0]
 8007bd2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007bdc:	e7f7      	b.n	8007bce <_Balloc+0x66>
 8007bde:	bf00      	nop
 8007be0:	0800a4a2 	.word	0x0800a4a2
 8007be4:	0800a522 	.word	0x0800a522

08007be8 <_Bfree>:
 8007be8:	b570      	push	{r4, r5, r6, lr}
 8007bea:	69c6      	ldr	r6, [r0, #28]
 8007bec:	4605      	mov	r5, r0
 8007bee:	460c      	mov	r4, r1
 8007bf0:	b976      	cbnz	r6, 8007c10 <_Bfree+0x28>
 8007bf2:	2010      	movs	r0, #16
 8007bf4:	f7ff ff02 	bl	80079fc <malloc>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	61e8      	str	r0, [r5, #28]
 8007bfc:	b920      	cbnz	r0, 8007c08 <_Bfree+0x20>
 8007bfe:	4b09      	ldr	r3, [pc, #36]	@ (8007c24 <_Bfree+0x3c>)
 8007c00:	4809      	ldr	r0, [pc, #36]	@ (8007c28 <_Bfree+0x40>)
 8007c02:	218f      	movs	r1, #143	@ 0x8f
 8007c04:	f001 fd3c 	bl	8009680 <__assert_func>
 8007c08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c0c:	6006      	str	r6, [r0, #0]
 8007c0e:	60c6      	str	r6, [r0, #12]
 8007c10:	b13c      	cbz	r4, 8007c22 <_Bfree+0x3a>
 8007c12:	69eb      	ldr	r3, [r5, #28]
 8007c14:	6862      	ldr	r2, [r4, #4]
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c1c:	6021      	str	r1, [r4, #0]
 8007c1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007c22:	bd70      	pop	{r4, r5, r6, pc}
 8007c24:	0800a4a2 	.word	0x0800a4a2
 8007c28:	0800a522 	.word	0x0800a522

08007c2c <__multadd>:
 8007c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c30:	690d      	ldr	r5, [r1, #16]
 8007c32:	4607      	mov	r7, r0
 8007c34:	460c      	mov	r4, r1
 8007c36:	461e      	mov	r6, r3
 8007c38:	f101 0c14 	add.w	ip, r1, #20
 8007c3c:	2000      	movs	r0, #0
 8007c3e:	f8dc 3000 	ldr.w	r3, [ip]
 8007c42:	b299      	uxth	r1, r3
 8007c44:	fb02 6101 	mla	r1, r2, r1, r6
 8007c48:	0c1e      	lsrs	r6, r3, #16
 8007c4a:	0c0b      	lsrs	r3, r1, #16
 8007c4c:	fb02 3306 	mla	r3, r2, r6, r3
 8007c50:	b289      	uxth	r1, r1
 8007c52:	3001      	adds	r0, #1
 8007c54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007c58:	4285      	cmp	r5, r0
 8007c5a:	f84c 1b04 	str.w	r1, [ip], #4
 8007c5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007c62:	dcec      	bgt.n	8007c3e <__multadd+0x12>
 8007c64:	b30e      	cbz	r6, 8007caa <__multadd+0x7e>
 8007c66:	68a3      	ldr	r3, [r4, #8]
 8007c68:	42ab      	cmp	r3, r5
 8007c6a:	dc19      	bgt.n	8007ca0 <__multadd+0x74>
 8007c6c:	6861      	ldr	r1, [r4, #4]
 8007c6e:	4638      	mov	r0, r7
 8007c70:	3101      	adds	r1, #1
 8007c72:	f7ff ff79 	bl	8007b68 <_Balloc>
 8007c76:	4680      	mov	r8, r0
 8007c78:	b928      	cbnz	r0, 8007c86 <__multadd+0x5a>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8007cb0 <__multadd+0x84>)
 8007c7e:	480d      	ldr	r0, [pc, #52]	@ (8007cb4 <__multadd+0x88>)
 8007c80:	21ba      	movs	r1, #186	@ 0xba
 8007c82:	f001 fcfd 	bl	8009680 <__assert_func>
 8007c86:	6922      	ldr	r2, [r4, #16]
 8007c88:	3202      	adds	r2, #2
 8007c8a:	f104 010c 	add.w	r1, r4, #12
 8007c8e:	0092      	lsls	r2, r2, #2
 8007c90:	300c      	adds	r0, #12
 8007c92:	f001 fcdf 	bl	8009654 <memcpy>
 8007c96:	4621      	mov	r1, r4
 8007c98:	4638      	mov	r0, r7
 8007c9a:	f7ff ffa5 	bl	8007be8 <_Bfree>
 8007c9e:	4644      	mov	r4, r8
 8007ca0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007ca4:	3501      	adds	r5, #1
 8007ca6:	615e      	str	r6, [r3, #20]
 8007ca8:	6125      	str	r5, [r4, #16]
 8007caa:	4620      	mov	r0, r4
 8007cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cb0:	0800a511 	.word	0x0800a511
 8007cb4:	0800a522 	.word	0x0800a522

08007cb8 <__s2b>:
 8007cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cbc:	460c      	mov	r4, r1
 8007cbe:	4615      	mov	r5, r2
 8007cc0:	461f      	mov	r7, r3
 8007cc2:	2209      	movs	r2, #9
 8007cc4:	3308      	adds	r3, #8
 8007cc6:	4606      	mov	r6, r0
 8007cc8:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ccc:	2100      	movs	r1, #0
 8007cce:	2201      	movs	r2, #1
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	db09      	blt.n	8007ce8 <__s2b+0x30>
 8007cd4:	4630      	mov	r0, r6
 8007cd6:	f7ff ff47 	bl	8007b68 <_Balloc>
 8007cda:	b940      	cbnz	r0, 8007cee <__s2b+0x36>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	4b19      	ldr	r3, [pc, #100]	@ (8007d44 <__s2b+0x8c>)
 8007ce0:	4819      	ldr	r0, [pc, #100]	@ (8007d48 <__s2b+0x90>)
 8007ce2:	21d3      	movs	r1, #211	@ 0xd3
 8007ce4:	f001 fccc 	bl	8009680 <__assert_func>
 8007ce8:	0052      	lsls	r2, r2, #1
 8007cea:	3101      	adds	r1, #1
 8007cec:	e7f0      	b.n	8007cd0 <__s2b+0x18>
 8007cee:	9b08      	ldr	r3, [sp, #32]
 8007cf0:	6143      	str	r3, [r0, #20]
 8007cf2:	2d09      	cmp	r5, #9
 8007cf4:	f04f 0301 	mov.w	r3, #1
 8007cf8:	6103      	str	r3, [r0, #16]
 8007cfa:	dd16      	ble.n	8007d2a <__s2b+0x72>
 8007cfc:	f104 0909 	add.w	r9, r4, #9
 8007d00:	46c8      	mov	r8, r9
 8007d02:	442c      	add	r4, r5
 8007d04:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007d08:	4601      	mov	r1, r0
 8007d0a:	3b30      	subs	r3, #48	@ 0x30
 8007d0c:	220a      	movs	r2, #10
 8007d0e:	4630      	mov	r0, r6
 8007d10:	f7ff ff8c 	bl	8007c2c <__multadd>
 8007d14:	45a0      	cmp	r8, r4
 8007d16:	d1f5      	bne.n	8007d04 <__s2b+0x4c>
 8007d18:	f1a5 0408 	sub.w	r4, r5, #8
 8007d1c:	444c      	add	r4, r9
 8007d1e:	1b2d      	subs	r5, r5, r4
 8007d20:	1963      	adds	r3, r4, r5
 8007d22:	42bb      	cmp	r3, r7
 8007d24:	db04      	blt.n	8007d30 <__s2b+0x78>
 8007d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d2a:	340a      	adds	r4, #10
 8007d2c:	2509      	movs	r5, #9
 8007d2e:	e7f6      	b.n	8007d1e <__s2b+0x66>
 8007d30:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007d34:	4601      	mov	r1, r0
 8007d36:	3b30      	subs	r3, #48	@ 0x30
 8007d38:	220a      	movs	r2, #10
 8007d3a:	4630      	mov	r0, r6
 8007d3c:	f7ff ff76 	bl	8007c2c <__multadd>
 8007d40:	e7ee      	b.n	8007d20 <__s2b+0x68>
 8007d42:	bf00      	nop
 8007d44:	0800a511 	.word	0x0800a511
 8007d48:	0800a522 	.word	0x0800a522

08007d4c <__hi0bits>:
 8007d4c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007d50:	4603      	mov	r3, r0
 8007d52:	bf36      	itet	cc
 8007d54:	0403      	lslcc	r3, r0, #16
 8007d56:	2000      	movcs	r0, #0
 8007d58:	2010      	movcc	r0, #16
 8007d5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d5e:	bf3c      	itt	cc
 8007d60:	021b      	lslcc	r3, r3, #8
 8007d62:	3008      	addcc	r0, #8
 8007d64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d68:	bf3c      	itt	cc
 8007d6a:	011b      	lslcc	r3, r3, #4
 8007d6c:	3004      	addcc	r0, #4
 8007d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d72:	bf3c      	itt	cc
 8007d74:	009b      	lslcc	r3, r3, #2
 8007d76:	3002      	addcc	r0, #2
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	db05      	blt.n	8007d88 <__hi0bits+0x3c>
 8007d7c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007d80:	f100 0001 	add.w	r0, r0, #1
 8007d84:	bf08      	it	eq
 8007d86:	2020      	moveq	r0, #32
 8007d88:	4770      	bx	lr

08007d8a <__lo0bits>:
 8007d8a:	6803      	ldr	r3, [r0, #0]
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	f013 0007 	ands.w	r0, r3, #7
 8007d92:	d00b      	beq.n	8007dac <__lo0bits+0x22>
 8007d94:	07d9      	lsls	r1, r3, #31
 8007d96:	d421      	bmi.n	8007ddc <__lo0bits+0x52>
 8007d98:	0798      	lsls	r0, r3, #30
 8007d9a:	bf49      	itett	mi
 8007d9c:	085b      	lsrmi	r3, r3, #1
 8007d9e:	089b      	lsrpl	r3, r3, #2
 8007da0:	2001      	movmi	r0, #1
 8007da2:	6013      	strmi	r3, [r2, #0]
 8007da4:	bf5c      	itt	pl
 8007da6:	6013      	strpl	r3, [r2, #0]
 8007da8:	2002      	movpl	r0, #2
 8007daa:	4770      	bx	lr
 8007dac:	b299      	uxth	r1, r3
 8007dae:	b909      	cbnz	r1, 8007db4 <__lo0bits+0x2a>
 8007db0:	0c1b      	lsrs	r3, r3, #16
 8007db2:	2010      	movs	r0, #16
 8007db4:	b2d9      	uxtb	r1, r3
 8007db6:	b909      	cbnz	r1, 8007dbc <__lo0bits+0x32>
 8007db8:	3008      	adds	r0, #8
 8007dba:	0a1b      	lsrs	r3, r3, #8
 8007dbc:	0719      	lsls	r1, r3, #28
 8007dbe:	bf04      	itt	eq
 8007dc0:	091b      	lsreq	r3, r3, #4
 8007dc2:	3004      	addeq	r0, #4
 8007dc4:	0799      	lsls	r1, r3, #30
 8007dc6:	bf04      	itt	eq
 8007dc8:	089b      	lsreq	r3, r3, #2
 8007dca:	3002      	addeq	r0, #2
 8007dcc:	07d9      	lsls	r1, r3, #31
 8007dce:	d403      	bmi.n	8007dd8 <__lo0bits+0x4e>
 8007dd0:	085b      	lsrs	r3, r3, #1
 8007dd2:	f100 0001 	add.w	r0, r0, #1
 8007dd6:	d003      	beq.n	8007de0 <__lo0bits+0x56>
 8007dd8:	6013      	str	r3, [r2, #0]
 8007dda:	4770      	bx	lr
 8007ddc:	2000      	movs	r0, #0
 8007dde:	4770      	bx	lr
 8007de0:	2020      	movs	r0, #32
 8007de2:	4770      	bx	lr

08007de4 <__i2b>:
 8007de4:	b510      	push	{r4, lr}
 8007de6:	460c      	mov	r4, r1
 8007de8:	2101      	movs	r1, #1
 8007dea:	f7ff febd 	bl	8007b68 <_Balloc>
 8007dee:	4602      	mov	r2, r0
 8007df0:	b928      	cbnz	r0, 8007dfe <__i2b+0x1a>
 8007df2:	4b05      	ldr	r3, [pc, #20]	@ (8007e08 <__i2b+0x24>)
 8007df4:	4805      	ldr	r0, [pc, #20]	@ (8007e0c <__i2b+0x28>)
 8007df6:	f240 1145 	movw	r1, #325	@ 0x145
 8007dfa:	f001 fc41 	bl	8009680 <__assert_func>
 8007dfe:	2301      	movs	r3, #1
 8007e00:	6144      	str	r4, [r0, #20]
 8007e02:	6103      	str	r3, [r0, #16]
 8007e04:	bd10      	pop	{r4, pc}
 8007e06:	bf00      	nop
 8007e08:	0800a511 	.word	0x0800a511
 8007e0c:	0800a522 	.word	0x0800a522

08007e10 <__multiply>:
 8007e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e14:	4614      	mov	r4, r2
 8007e16:	690a      	ldr	r2, [r1, #16]
 8007e18:	6923      	ldr	r3, [r4, #16]
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	bfa8      	it	ge
 8007e1e:	4623      	movge	r3, r4
 8007e20:	460f      	mov	r7, r1
 8007e22:	bfa4      	itt	ge
 8007e24:	460c      	movge	r4, r1
 8007e26:	461f      	movge	r7, r3
 8007e28:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007e2c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007e30:	68a3      	ldr	r3, [r4, #8]
 8007e32:	6861      	ldr	r1, [r4, #4]
 8007e34:	eb0a 0609 	add.w	r6, sl, r9
 8007e38:	42b3      	cmp	r3, r6
 8007e3a:	b085      	sub	sp, #20
 8007e3c:	bfb8      	it	lt
 8007e3e:	3101      	addlt	r1, #1
 8007e40:	f7ff fe92 	bl	8007b68 <_Balloc>
 8007e44:	b930      	cbnz	r0, 8007e54 <__multiply+0x44>
 8007e46:	4602      	mov	r2, r0
 8007e48:	4b44      	ldr	r3, [pc, #272]	@ (8007f5c <__multiply+0x14c>)
 8007e4a:	4845      	ldr	r0, [pc, #276]	@ (8007f60 <__multiply+0x150>)
 8007e4c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007e50:	f001 fc16 	bl	8009680 <__assert_func>
 8007e54:	f100 0514 	add.w	r5, r0, #20
 8007e58:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007e5c:	462b      	mov	r3, r5
 8007e5e:	2200      	movs	r2, #0
 8007e60:	4543      	cmp	r3, r8
 8007e62:	d321      	bcc.n	8007ea8 <__multiply+0x98>
 8007e64:	f107 0114 	add.w	r1, r7, #20
 8007e68:	f104 0214 	add.w	r2, r4, #20
 8007e6c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007e70:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007e74:	9302      	str	r3, [sp, #8]
 8007e76:	1b13      	subs	r3, r2, r4
 8007e78:	3b15      	subs	r3, #21
 8007e7a:	f023 0303 	bic.w	r3, r3, #3
 8007e7e:	3304      	adds	r3, #4
 8007e80:	f104 0715 	add.w	r7, r4, #21
 8007e84:	42ba      	cmp	r2, r7
 8007e86:	bf38      	it	cc
 8007e88:	2304      	movcc	r3, #4
 8007e8a:	9301      	str	r3, [sp, #4]
 8007e8c:	9b02      	ldr	r3, [sp, #8]
 8007e8e:	9103      	str	r1, [sp, #12]
 8007e90:	428b      	cmp	r3, r1
 8007e92:	d80c      	bhi.n	8007eae <__multiply+0x9e>
 8007e94:	2e00      	cmp	r6, #0
 8007e96:	dd03      	ble.n	8007ea0 <__multiply+0x90>
 8007e98:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d05b      	beq.n	8007f58 <__multiply+0x148>
 8007ea0:	6106      	str	r6, [r0, #16]
 8007ea2:	b005      	add	sp, #20
 8007ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ea8:	f843 2b04 	str.w	r2, [r3], #4
 8007eac:	e7d8      	b.n	8007e60 <__multiply+0x50>
 8007eae:	f8b1 a000 	ldrh.w	sl, [r1]
 8007eb2:	f1ba 0f00 	cmp.w	sl, #0
 8007eb6:	d024      	beq.n	8007f02 <__multiply+0xf2>
 8007eb8:	f104 0e14 	add.w	lr, r4, #20
 8007ebc:	46a9      	mov	r9, r5
 8007ebe:	f04f 0c00 	mov.w	ip, #0
 8007ec2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007ec6:	f8d9 3000 	ldr.w	r3, [r9]
 8007eca:	fa1f fb87 	uxth.w	fp, r7
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	fb0a 330b 	mla	r3, sl, fp, r3
 8007ed4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007ed8:	f8d9 7000 	ldr.w	r7, [r9]
 8007edc:	4463      	add	r3, ip
 8007ede:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007ee2:	fb0a c70b 	mla	r7, sl, fp, ip
 8007ee6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007ef0:	4572      	cmp	r2, lr
 8007ef2:	f849 3b04 	str.w	r3, [r9], #4
 8007ef6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007efa:	d8e2      	bhi.n	8007ec2 <__multiply+0xb2>
 8007efc:	9b01      	ldr	r3, [sp, #4]
 8007efe:	f845 c003 	str.w	ip, [r5, r3]
 8007f02:	9b03      	ldr	r3, [sp, #12]
 8007f04:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007f08:	3104      	adds	r1, #4
 8007f0a:	f1b9 0f00 	cmp.w	r9, #0
 8007f0e:	d021      	beq.n	8007f54 <__multiply+0x144>
 8007f10:	682b      	ldr	r3, [r5, #0]
 8007f12:	f104 0c14 	add.w	ip, r4, #20
 8007f16:	46ae      	mov	lr, r5
 8007f18:	f04f 0a00 	mov.w	sl, #0
 8007f1c:	f8bc b000 	ldrh.w	fp, [ip]
 8007f20:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007f24:	fb09 770b 	mla	r7, r9, fp, r7
 8007f28:	4457      	add	r7, sl
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007f30:	f84e 3b04 	str.w	r3, [lr], #4
 8007f34:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007f38:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f3c:	f8be 3000 	ldrh.w	r3, [lr]
 8007f40:	fb09 330a 	mla	r3, r9, sl, r3
 8007f44:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007f48:	4562      	cmp	r2, ip
 8007f4a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f4e:	d8e5      	bhi.n	8007f1c <__multiply+0x10c>
 8007f50:	9f01      	ldr	r7, [sp, #4]
 8007f52:	51eb      	str	r3, [r5, r7]
 8007f54:	3504      	adds	r5, #4
 8007f56:	e799      	b.n	8007e8c <__multiply+0x7c>
 8007f58:	3e01      	subs	r6, #1
 8007f5a:	e79b      	b.n	8007e94 <__multiply+0x84>
 8007f5c:	0800a511 	.word	0x0800a511
 8007f60:	0800a522 	.word	0x0800a522

08007f64 <__pow5mult>:
 8007f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f68:	4615      	mov	r5, r2
 8007f6a:	f012 0203 	ands.w	r2, r2, #3
 8007f6e:	4607      	mov	r7, r0
 8007f70:	460e      	mov	r6, r1
 8007f72:	d007      	beq.n	8007f84 <__pow5mult+0x20>
 8007f74:	4c25      	ldr	r4, [pc, #148]	@ (800800c <__pow5mult+0xa8>)
 8007f76:	3a01      	subs	r2, #1
 8007f78:	2300      	movs	r3, #0
 8007f7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007f7e:	f7ff fe55 	bl	8007c2c <__multadd>
 8007f82:	4606      	mov	r6, r0
 8007f84:	10ad      	asrs	r5, r5, #2
 8007f86:	d03d      	beq.n	8008004 <__pow5mult+0xa0>
 8007f88:	69fc      	ldr	r4, [r7, #28]
 8007f8a:	b97c      	cbnz	r4, 8007fac <__pow5mult+0x48>
 8007f8c:	2010      	movs	r0, #16
 8007f8e:	f7ff fd35 	bl	80079fc <malloc>
 8007f92:	4602      	mov	r2, r0
 8007f94:	61f8      	str	r0, [r7, #28]
 8007f96:	b928      	cbnz	r0, 8007fa4 <__pow5mult+0x40>
 8007f98:	4b1d      	ldr	r3, [pc, #116]	@ (8008010 <__pow5mult+0xac>)
 8007f9a:	481e      	ldr	r0, [pc, #120]	@ (8008014 <__pow5mult+0xb0>)
 8007f9c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007fa0:	f001 fb6e 	bl	8009680 <__assert_func>
 8007fa4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007fa8:	6004      	str	r4, [r0, #0]
 8007faa:	60c4      	str	r4, [r0, #12]
 8007fac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007fb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007fb4:	b94c      	cbnz	r4, 8007fca <__pow5mult+0x66>
 8007fb6:	f240 2171 	movw	r1, #625	@ 0x271
 8007fba:	4638      	mov	r0, r7
 8007fbc:	f7ff ff12 	bl	8007de4 <__i2b>
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	f8c8 0008 	str.w	r0, [r8, #8]
 8007fc6:	4604      	mov	r4, r0
 8007fc8:	6003      	str	r3, [r0, #0]
 8007fca:	f04f 0900 	mov.w	r9, #0
 8007fce:	07eb      	lsls	r3, r5, #31
 8007fd0:	d50a      	bpl.n	8007fe8 <__pow5mult+0x84>
 8007fd2:	4631      	mov	r1, r6
 8007fd4:	4622      	mov	r2, r4
 8007fd6:	4638      	mov	r0, r7
 8007fd8:	f7ff ff1a 	bl	8007e10 <__multiply>
 8007fdc:	4631      	mov	r1, r6
 8007fde:	4680      	mov	r8, r0
 8007fe0:	4638      	mov	r0, r7
 8007fe2:	f7ff fe01 	bl	8007be8 <_Bfree>
 8007fe6:	4646      	mov	r6, r8
 8007fe8:	106d      	asrs	r5, r5, #1
 8007fea:	d00b      	beq.n	8008004 <__pow5mult+0xa0>
 8007fec:	6820      	ldr	r0, [r4, #0]
 8007fee:	b938      	cbnz	r0, 8008000 <__pow5mult+0x9c>
 8007ff0:	4622      	mov	r2, r4
 8007ff2:	4621      	mov	r1, r4
 8007ff4:	4638      	mov	r0, r7
 8007ff6:	f7ff ff0b 	bl	8007e10 <__multiply>
 8007ffa:	6020      	str	r0, [r4, #0]
 8007ffc:	f8c0 9000 	str.w	r9, [r0]
 8008000:	4604      	mov	r4, r0
 8008002:	e7e4      	b.n	8007fce <__pow5mult+0x6a>
 8008004:	4630      	mov	r0, r6
 8008006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800800a:	bf00      	nop
 800800c:	0800a57c 	.word	0x0800a57c
 8008010:	0800a4a2 	.word	0x0800a4a2
 8008014:	0800a522 	.word	0x0800a522

08008018 <__lshift>:
 8008018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800801c:	460c      	mov	r4, r1
 800801e:	6849      	ldr	r1, [r1, #4]
 8008020:	6923      	ldr	r3, [r4, #16]
 8008022:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008026:	68a3      	ldr	r3, [r4, #8]
 8008028:	4607      	mov	r7, r0
 800802a:	4691      	mov	r9, r2
 800802c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008030:	f108 0601 	add.w	r6, r8, #1
 8008034:	42b3      	cmp	r3, r6
 8008036:	db0b      	blt.n	8008050 <__lshift+0x38>
 8008038:	4638      	mov	r0, r7
 800803a:	f7ff fd95 	bl	8007b68 <_Balloc>
 800803e:	4605      	mov	r5, r0
 8008040:	b948      	cbnz	r0, 8008056 <__lshift+0x3e>
 8008042:	4602      	mov	r2, r0
 8008044:	4b28      	ldr	r3, [pc, #160]	@ (80080e8 <__lshift+0xd0>)
 8008046:	4829      	ldr	r0, [pc, #164]	@ (80080ec <__lshift+0xd4>)
 8008048:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800804c:	f001 fb18 	bl	8009680 <__assert_func>
 8008050:	3101      	adds	r1, #1
 8008052:	005b      	lsls	r3, r3, #1
 8008054:	e7ee      	b.n	8008034 <__lshift+0x1c>
 8008056:	2300      	movs	r3, #0
 8008058:	f100 0114 	add.w	r1, r0, #20
 800805c:	f100 0210 	add.w	r2, r0, #16
 8008060:	4618      	mov	r0, r3
 8008062:	4553      	cmp	r3, sl
 8008064:	db33      	blt.n	80080ce <__lshift+0xb6>
 8008066:	6920      	ldr	r0, [r4, #16]
 8008068:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800806c:	f104 0314 	add.w	r3, r4, #20
 8008070:	f019 091f 	ands.w	r9, r9, #31
 8008074:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008078:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800807c:	d02b      	beq.n	80080d6 <__lshift+0xbe>
 800807e:	f1c9 0e20 	rsb	lr, r9, #32
 8008082:	468a      	mov	sl, r1
 8008084:	2200      	movs	r2, #0
 8008086:	6818      	ldr	r0, [r3, #0]
 8008088:	fa00 f009 	lsl.w	r0, r0, r9
 800808c:	4310      	orrs	r0, r2
 800808e:	f84a 0b04 	str.w	r0, [sl], #4
 8008092:	f853 2b04 	ldr.w	r2, [r3], #4
 8008096:	459c      	cmp	ip, r3
 8008098:	fa22 f20e 	lsr.w	r2, r2, lr
 800809c:	d8f3      	bhi.n	8008086 <__lshift+0x6e>
 800809e:	ebac 0304 	sub.w	r3, ip, r4
 80080a2:	3b15      	subs	r3, #21
 80080a4:	f023 0303 	bic.w	r3, r3, #3
 80080a8:	3304      	adds	r3, #4
 80080aa:	f104 0015 	add.w	r0, r4, #21
 80080ae:	4584      	cmp	ip, r0
 80080b0:	bf38      	it	cc
 80080b2:	2304      	movcc	r3, #4
 80080b4:	50ca      	str	r2, [r1, r3]
 80080b6:	b10a      	cbz	r2, 80080bc <__lshift+0xa4>
 80080b8:	f108 0602 	add.w	r6, r8, #2
 80080bc:	3e01      	subs	r6, #1
 80080be:	4638      	mov	r0, r7
 80080c0:	612e      	str	r6, [r5, #16]
 80080c2:	4621      	mov	r1, r4
 80080c4:	f7ff fd90 	bl	8007be8 <_Bfree>
 80080c8:	4628      	mov	r0, r5
 80080ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80080d2:	3301      	adds	r3, #1
 80080d4:	e7c5      	b.n	8008062 <__lshift+0x4a>
 80080d6:	3904      	subs	r1, #4
 80080d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80080dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80080e0:	459c      	cmp	ip, r3
 80080e2:	d8f9      	bhi.n	80080d8 <__lshift+0xc0>
 80080e4:	e7ea      	b.n	80080bc <__lshift+0xa4>
 80080e6:	bf00      	nop
 80080e8:	0800a511 	.word	0x0800a511
 80080ec:	0800a522 	.word	0x0800a522

080080f0 <__mcmp>:
 80080f0:	690a      	ldr	r2, [r1, #16]
 80080f2:	4603      	mov	r3, r0
 80080f4:	6900      	ldr	r0, [r0, #16]
 80080f6:	1a80      	subs	r0, r0, r2
 80080f8:	b530      	push	{r4, r5, lr}
 80080fa:	d10e      	bne.n	800811a <__mcmp+0x2a>
 80080fc:	3314      	adds	r3, #20
 80080fe:	3114      	adds	r1, #20
 8008100:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008104:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008108:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800810c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008110:	4295      	cmp	r5, r2
 8008112:	d003      	beq.n	800811c <__mcmp+0x2c>
 8008114:	d205      	bcs.n	8008122 <__mcmp+0x32>
 8008116:	f04f 30ff 	mov.w	r0, #4294967295
 800811a:	bd30      	pop	{r4, r5, pc}
 800811c:	42a3      	cmp	r3, r4
 800811e:	d3f3      	bcc.n	8008108 <__mcmp+0x18>
 8008120:	e7fb      	b.n	800811a <__mcmp+0x2a>
 8008122:	2001      	movs	r0, #1
 8008124:	e7f9      	b.n	800811a <__mcmp+0x2a>
	...

08008128 <__mdiff>:
 8008128:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800812c:	4689      	mov	r9, r1
 800812e:	4606      	mov	r6, r0
 8008130:	4611      	mov	r1, r2
 8008132:	4648      	mov	r0, r9
 8008134:	4614      	mov	r4, r2
 8008136:	f7ff ffdb 	bl	80080f0 <__mcmp>
 800813a:	1e05      	subs	r5, r0, #0
 800813c:	d112      	bne.n	8008164 <__mdiff+0x3c>
 800813e:	4629      	mov	r1, r5
 8008140:	4630      	mov	r0, r6
 8008142:	f7ff fd11 	bl	8007b68 <_Balloc>
 8008146:	4602      	mov	r2, r0
 8008148:	b928      	cbnz	r0, 8008156 <__mdiff+0x2e>
 800814a:	4b3f      	ldr	r3, [pc, #252]	@ (8008248 <__mdiff+0x120>)
 800814c:	f240 2137 	movw	r1, #567	@ 0x237
 8008150:	483e      	ldr	r0, [pc, #248]	@ (800824c <__mdiff+0x124>)
 8008152:	f001 fa95 	bl	8009680 <__assert_func>
 8008156:	2301      	movs	r3, #1
 8008158:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800815c:	4610      	mov	r0, r2
 800815e:	b003      	add	sp, #12
 8008160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008164:	bfbc      	itt	lt
 8008166:	464b      	movlt	r3, r9
 8008168:	46a1      	movlt	r9, r4
 800816a:	4630      	mov	r0, r6
 800816c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008170:	bfba      	itte	lt
 8008172:	461c      	movlt	r4, r3
 8008174:	2501      	movlt	r5, #1
 8008176:	2500      	movge	r5, #0
 8008178:	f7ff fcf6 	bl	8007b68 <_Balloc>
 800817c:	4602      	mov	r2, r0
 800817e:	b918      	cbnz	r0, 8008188 <__mdiff+0x60>
 8008180:	4b31      	ldr	r3, [pc, #196]	@ (8008248 <__mdiff+0x120>)
 8008182:	f240 2145 	movw	r1, #581	@ 0x245
 8008186:	e7e3      	b.n	8008150 <__mdiff+0x28>
 8008188:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800818c:	6926      	ldr	r6, [r4, #16]
 800818e:	60c5      	str	r5, [r0, #12]
 8008190:	f109 0310 	add.w	r3, r9, #16
 8008194:	f109 0514 	add.w	r5, r9, #20
 8008198:	f104 0e14 	add.w	lr, r4, #20
 800819c:	f100 0b14 	add.w	fp, r0, #20
 80081a0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80081a4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80081a8:	9301      	str	r3, [sp, #4]
 80081aa:	46d9      	mov	r9, fp
 80081ac:	f04f 0c00 	mov.w	ip, #0
 80081b0:	9b01      	ldr	r3, [sp, #4]
 80081b2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80081b6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80081ba:	9301      	str	r3, [sp, #4]
 80081bc:	fa1f f38a 	uxth.w	r3, sl
 80081c0:	4619      	mov	r1, r3
 80081c2:	b283      	uxth	r3, r0
 80081c4:	1acb      	subs	r3, r1, r3
 80081c6:	0c00      	lsrs	r0, r0, #16
 80081c8:	4463      	add	r3, ip
 80081ca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80081ce:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80081d8:	4576      	cmp	r6, lr
 80081da:	f849 3b04 	str.w	r3, [r9], #4
 80081de:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80081e2:	d8e5      	bhi.n	80081b0 <__mdiff+0x88>
 80081e4:	1b33      	subs	r3, r6, r4
 80081e6:	3b15      	subs	r3, #21
 80081e8:	f023 0303 	bic.w	r3, r3, #3
 80081ec:	3415      	adds	r4, #21
 80081ee:	3304      	adds	r3, #4
 80081f0:	42a6      	cmp	r6, r4
 80081f2:	bf38      	it	cc
 80081f4:	2304      	movcc	r3, #4
 80081f6:	441d      	add	r5, r3
 80081f8:	445b      	add	r3, fp
 80081fa:	461e      	mov	r6, r3
 80081fc:	462c      	mov	r4, r5
 80081fe:	4544      	cmp	r4, r8
 8008200:	d30e      	bcc.n	8008220 <__mdiff+0xf8>
 8008202:	f108 0103 	add.w	r1, r8, #3
 8008206:	1b49      	subs	r1, r1, r5
 8008208:	f021 0103 	bic.w	r1, r1, #3
 800820c:	3d03      	subs	r5, #3
 800820e:	45a8      	cmp	r8, r5
 8008210:	bf38      	it	cc
 8008212:	2100      	movcc	r1, #0
 8008214:	440b      	add	r3, r1
 8008216:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800821a:	b191      	cbz	r1, 8008242 <__mdiff+0x11a>
 800821c:	6117      	str	r7, [r2, #16]
 800821e:	e79d      	b.n	800815c <__mdiff+0x34>
 8008220:	f854 1b04 	ldr.w	r1, [r4], #4
 8008224:	46e6      	mov	lr, ip
 8008226:	0c08      	lsrs	r0, r1, #16
 8008228:	fa1c fc81 	uxtah	ip, ip, r1
 800822c:	4471      	add	r1, lr
 800822e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008232:	b289      	uxth	r1, r1
 8008234:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008238:	f846 1b04 	str.w	r1, [r6], #4
 800823c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008240:	e7dd      	b.n	80081fe <__mdiff+0xd6>
 8008242:	3f01      	subs	r7, #1
 8008244:	e7e7      	b.n	8008216 <__mdiff+0xee>
 8008246:	bf00      	nop
 8008248:	0800a511 	.word	0x0800a511
 800824c:	0800a522 	.word	0x0800a522

08008250 <__ulp>:
 8008250:	b082      	sub	sp, #8
 8008252:	ed8d 0b00 	vstr	d0, [sp]
 8008256:	9a01      	ldr	r2, [sp, #4]
 8008258:	4b0f      	ldr	r3, [pc, #60]	@ (8008298 <__ulp+0x48>)
 800825a:	4013      	ands	r3, r2
 800825c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008260:	2b00      	cmp	r3, #0
 8008262:	dc08      	bgt.n	8008276 <__ulp+0x26>
 8008264:	425b      	negs	r3, r3
 8008266:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800826a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800826e:	da04      	bge.n	800827a <__ulp+0x2a>
 8008270:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008274:	4113      	asrs	r3, r2
 8008276:	2200      	movs	r2, #0
 8008278:	e008      	b.n	800828c <__ulp+0x3c>
 800827a:	f1a2 0314 	sub.w	r3, r2, #20
 800827e:	2b1e      	cmp	r3, #30
 8008280:	bfda      	itte	le
 8008282:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008286:	40da      	lsrle	r2, r3
 8008288:	2201      	movgt	r2, #1
 800828a:	2300      	movs	r3, #0
 800828c:	4619      	mov	r1, r3
 800828e:	4610      	mov	r0, r2
 8008290:	ec41 0b10 	vmov	d0, r0, r1
 8008294:	b002      	add	sp, #8
 8008296:	4770      	bx	lr
 8008298:	7ff00000 	.word	0x7ff00000

0800829c <__b2d>:
 800829c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082a0:	6906      	ldr	r6, [r0, #16]
 80082a2:	f100 0814 	add.w	r8, r0, #20
 80082a6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80082aa:	1f37      	subs	r7, r6, #4
 80082ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80082b0:	4610      	mov	r0, r2
 80082b2:	f7ff fd4b 	bl	8007d4c <__hi0bits>
 80082b6:	f1c0 0320 	rsb	r3, r0, #32
 80082ba:	280a      	cmp	r0, #10
 80082bc:	600b      	str	r3, [r1, #0]
 80082be:	491b      	ldr	r1, [pc, #108]	@ (800832c <__b2d+0x90>)
 80082c0:	dc15      	bgt.n	80082ee <__b2d+0x52>
 80082c2:	f1c0 0c0b 	rsb	ip, r0, #11
 80082c6:	fa22 f30c 	lsr.w	r3, r2, ip
 80082ca:	45b8      	cmp	r8, r7
 80082cc:	ea43 0501 	orr.w	r5, r3, r1
 80082d0:	bf34      	ite	cc
 80082d2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80082d6:	2300      	movcs	r3, #0
 80082d8:	3015      	adds	r0, #21
 80082da:	fa02 f000 	lsl.w	r0, r2, r0
 80082de:	fa23 f30c 	lsr.w	r3, r3, ip
 80082e2:	4303      	orrs	r3, r0
 80082e4:	461c      	mov	r4, r3
 80082e6:	ec45 4b10 	vmov	d0, r4, r5
 80082ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082ee:	45b8      	cmp	r8, r7
 80082f0:	bf3a      	itte	cc
 80082f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80082f6:	f1a6 0708 	subcc.w	r7, r6, #8
 80082fa:	2300      	movcs	r3, #0
 80082fc:	380b      	subs	r0, #11
 80082fe:	d012      	beq.n	8008326 <__b2d+0x8a>
 8008300:	f1c0 0120 	rsb	r1, r0, #32
 8008304:	fa23 f401 	lsr.w	r4, r3, r1
 8008308:	4082      	lsls	r2, r0
 800830a:	4322      	orrs	r2, r4
 800830c:	4547      	cmp	r7, r8
 800830e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008312:	bf8c      	ite	hi
 8008314:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008318:	2200      	movls	r2, #0
 800831a:	4083      	lsls	r3, r0
 800831c:	40ca      	lsrs	r2, r1
 800831e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008322:	4313      	orrs	r3, r2
 8008324:	e7de      	b.n	80082e4 <__b2d+0x48>
 8008326:	ea42 0501 	orr.w	r5, r2, r1
 800832a:	e7db      	b.n	80082e4 <__b2d+0x48>
 800832c:	3ff00000 	.word	0x3ff00000

08008330 <__d2b>:
 8008330:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008334:	460f      	mov	r7, r1
 8008336:	2101      	movs	r1, #1
 8008338:	ec59 8b10 	vmov	r8, r9, d0
 800833c:	4616      	mov	r6, r2
 800833e:	f7ff fc13 	bl	8007b68 <_Balloc>
 8008342:	4604      	mov	r4, r0
 8008344:	b930      	cbnz	r0, 8008354 <__d2b+0x24>
 8008346:	4602      	mov	r2, r0
 8008348:	4b23      	ldr	r3, [pc, #140]	@ (80083d8 <__d2b+0xa8>)
 800834a:	4824      	ldr	r0, [pc, #144]	@ (80083dc <__d2b+0xac>)
 800834c:	f240 310f 	movw	r1, #783	@ 0x30f
 8008350:	f001 f996 	bl	8009680 <__assert_func>
 8008354:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008358:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800835c:	b10d      	cbz	r5, 8008362 <__d2b+0x32>
 800835e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008362:	9301      	str	r3, [sp, #4]
 8008364:	f1b8 0300 	subs.w	r3, r8, #0
 8008368:	d023      	beq.n	80083b2 <__d2b+0x82>
 800836a:	4668      	mov	r0, sp
 800836c:	9300      	str	r3, [sp, #0]
 800836e:	f7ff fd0c 	bl	8007d8a <__lo0bits>
 8008372:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008376:	b1d0      	cbz	r0, 80083ae <__d2b+0x7e>
 8008378:	f1c0 0320 	rsb	r3, r0, #32
 800837c:	fa02 f303 	lsl.w	r3, r2, r3
 8008380:	430b      	orrs	r3, r1
 8008382:	40c2      	lsrs	r2, r0
 8008384:	6163      	str	r3, [r4, #20]
 8008386:	9201      	str	r2, [sp, #4]
 8008388:	9b01      	ldr	r3, [sp, #4]
 800838a:	61a3      	str	r3, [r4, #24]
 800838c:	2b00      	cmp	r3, #0
 800838e:	bf0c      	ite	eq
 8008390:	2201      	moveq	r2, #1
 8008392:	2202      	movne	r2, #2
 8008394:	6122      	str	r2, [r4, #16]
 8008396:	b1a5      	cbz	r5, 80083c2 <__d2b+0x92>
 8008398:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800839c:	4405      	add	r5, r0
 800839e:	603d      	str	r5, [r7, #0]
 80083a0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80083a4:	6030      	str	r0, [r6, #0]
 80083a6:	4620      	mov	r0, r4
 80083a8:	b003      	add	sp, #12
 80083aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80083ae:	6161      	str	r1, [r4, #20]
 80083b0:	e7ea      	b.n	8008388 <__d2b+0x58>
 80083b2:	a801      	add	r0, sp, #4
 80083b4:	f7ff fce9 	bl	8007d8a <__lo0bits>
 80083b8:	9b01      	ldr	r3, [sp, #4]
 80083ba:	6163      	str	r3, [r4, #20]
 80083bc:	3020      	adds	r0, #32
 80083be:	2201      	movs	r2, #1
 80083c0:	e7e8      	b.n	8008394 <__d2b+0x64>
 80083c2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80083c6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80083ca:	6038      	str	r0, [r7, #0]
 80083cc:	6918      	ldr	r0, [r3, #16]
 80083ce:	f7ff fcbd 	bl	8007d4c <__hi0bits>
 80083d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80083d6:	e7e5      	b.n	80083a4 <__d2b+0x74>
 80083d8:	0800a511 	.word	0x0800a511
 80083dc:	0800a522 	.word	0x0800a522

080083e0 <__ratio>:
 80083e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083e4:	b085      	sub	sp, #20
 80083e6:	e9cd 1000 	strd	r1, r0, [sp]
 80083ea:	a902      	add	r1, sp, #8
 80083ec:	f7ff ff56 	bl	800829c <__b2d>
 80083f0:	9800      	ldr	r0, [sp, #0]
 80083f2:	a903      	add	r1, sp, #12
 80083f4:	ec55 4b10 	vmov	r4, r5, d0
 80083f8:	f7ff ff50 	bl	800829c <__b2d>
 80083fc:	9b01      	ldr	r3, [sp, #4]
 80083fe:	6919      	ldr	r1, [r3, #16]
 8008400:	9b00      	ldr	r3, [sp, #0]
 8008402:	691b      	ldr	r3, [r3, #16]
 8008404:	1ac9      	subs	r1, r1, r3
 8008406:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800840a:	1a9b      	subs	r3, r3, r2
 800840c:	ec5b ab10 	vmov	sl, fp, d0
 8008410:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008414:	2b00      	cmp	r3, #0
 8008416:	bfce      	itee	gt
 8008418:	462a      	movgt	r2, r5
 800841a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800841e:	465a      	movle	r2, fp
 8008420:	462f      	mov	r7, r5
 8008422:	46d9      	mov	r9, fp
 8008424:	bfcc      	ite	gt
 8008426:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800842a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800842e:	464b      	mov	r3, r9
 8008430:	4652      	mov	r2, sl
 8008432:	4620      	mov	r0, r4
 8008434:	4639      	mov	r1, r7
 8008436:	f7f8 fa19 	bl	800086c <__aeabi_ddiv>
 800843a:	ec41 0b10 	vmov	d0, r0, r1
 800843e:	b005      	add	sp, #20
 8008440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008444 <__copybits>:
 8008444:	3901      	subs	r1, #1
 8008446:	b570      	push	{r4, r5, r6, lr}
 8008448:	1149      	asrs	r1, r1, #5
 800844a:	6914      	ldr	r4, [r2, #16]
 800844c:	3101      	adds	r1, #1
 800844e:	f102 0314 	add.w	r3, r2, #20
 8008452:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008456:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800845a:	1f05      	subs	r5, r0, #4
 800845c:	42a3      	cmp	r3, r4
 800845e:	d30c      	bcc.n	800847a <__copybits+0x36>
 8008460:	1aa3      	subs	r3, r4, r2
 8008462:	3b11      	subs	r3, #17
 8008464:	f023 0303 	bic.w	r3, r3, #3
 8008468:	3211      	adds	r2, #17
 800846a:	42a2      	cmp	r2, r4
 800846c:	bf88      	it	hi
 800846e:	2300      	movhi	r3, #0
 8008470:	4418      	add	r0, r3
 8008472:	2300      	movs	r3, #0
 8008474:	4288      	cmp	r0, r1
 8008476:	d305      	bcc.n	8008484 <__copybits+0x40>
 8008478:	bd70      	pop	{r4, r5, r6, pc}
 800847a:	f853 6b04 	ldr.w	r6, [r3], #4
 800847e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008482:	e7eb      	b.n	800845c <__copybits+0x18>
 8008484:	f840 3b04 	str.w	r3, [r0], #4
 8008488:	e7f4      	b.n	8008474 <__copybits+0x30>

0800848a <__any_on>:
 800848a:	f100 0214 	add.w	r2, r0, #20
 800848e:	6900      	ldr	r0, [r0, #16]
 8008490:	114b      	asrs	r3, r1, #5
 8008492:	4298      	cmp	r0, r3
 8008494:	b510      	push	{r4, lr}
 8008496:	db11      	blt.n	80084bc <__any_on+0x32>
 8008498:	dd0a      	ble.n	80084b0 <__any_on+0x26>
 800849a:	f011 011f 	ands.w	r1, r1, #31
 800849e:	d007      	beq.n	80084b0 <__any_on+0x26>
 80084a0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80084a4:	fa24 f001 	lsr.w	r0, r4, r1
 80084a8:	fa00 f101 	lsl.w	r1, r0, r1
 80084ac:	428c      	cmp	r4, r1
 80084ae:	d10b      	bne.n	80084c8 <__any_on+0x3e>
 80084b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d803      	bhi.n	80084c0 <__any_on+0x36>
 80084b8:	2000      	movs	r0, #0
 80084ba:	bd10      	pop	{r4, pc}
 80084bc:	4603      	mov	r3, r0
 80084be:	e7f7      	b.n	80084b0 <__any_on+0x26>
 80084c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80084c4:	2900      	cmp	r1, #0
 80084c6:	d0f5      	beq.n	80084b4 <__any_on+0x2a>
 80084c8:	2001      	movs	r0, #1
 80084ca:	e7f6      	b.n	80084ba <__any_on+0x30>

080084cc <sulp>:
 80084cc:	b570      	push	{r4, r5, r6, lr}
 80084ce:	4604      	mov	r4, r0
 80084d0:	460d      	mov	r5, r1
 80084d2:	ec45 4b10 	vmov	d0, r4, r5
 80084d6:	4616      	mov	r6, r2
 80084d8:	f7ff feba 	bl	8008250 <__ulp>
 80084dc:	ec51 0b10 	vmov	r0, r1, d0
 80084e0:	b17e      	cbz	r6, 8008502 <sulp+0x36>
 80084e2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80084e6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	dd09      	ble.n	8008502 <sulp+0x36>
 80084ee:	051b      	lsls	r3, r3, #20
 80084f0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80084f4:	2400      	movs	r4, #0
 80084f6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80084fa:	4622      	mov	r2, r4
 80084fc:	462b      	mov	r3, r5
 80084fe:	f7f8 f88b 	bl	8000618 <__aeabi_dmul>
 8008502:	ec41 0b10 	vmov	d0, r0, r1
 8008506:	bd70      	pop	{r4, r5, r6, pc}

08008508 <_strtod_l>:
 8008508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800850c:	b09f      	sub	sp, #124	@ 0x7c
 800850e:	460c      	mov	r4, r1
 8008510:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008512:	2200      	movs	r2, #0
 8008514:	921a      	str	r2, [sp, #104]	@ 0x68
 8008516:	9005      	str	r0, [sp, #20]
 8008518:	f04f 0a00 	mov.w	sl, #0
 800851c:	f04f 0b00 	mov.w	fp, #0
 8008520:	460a      	mov	r2, r1
 8008522:	9219      	str	r2, [sp, #100]	@ 0x64
 8008524:	7811      	ldrb	r1, [r2, #0]
 8008526:	292b      	cmp	r1, #43	@ 0x2b
 8008528:	d04a      	beq.n	80085c0 <_strtod_l+0xb8>
 800852a:	d838      	bhi.n	800859e <_strtod_l+0x96>
 800852c:	290d      	cmp	r1, #13
 800852e:	d832      	bhi.n	8008596 <_strtod_l+0x8e>
 8008530:	2908      	cmp	r1, #8
 8008532:	d832      	bhi.n	800859a <_strtod_l+0x92>
 8008534:	2900      	cmp	r1, #0
 8008536:	d03b      	beq.n	80085b0 <_strtod_l+0xa8>
 8008538:	2200      	movs	r2, #0
 800853a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800853c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800853e:	782a      	ldrb	r2, [r5, #0]
 8008540:	2a30      	cmp	r2, #48	@ 0x30
 8008542:	f040 80b3 	bne.w	80086ac <_strtod_l+0x1a4>
 8008546:	786a      	ldrb	r2, [r5, #1]
 8008548:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800854c:	2a58      	cmp	r2, #88	@ 0x58
 800854e:	d16e      	bne.n	800862e <_strtod_l+0x126>
 8008550:	9302      	str	r3, [sp, #8]
 8008552:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008554:	9301      	str	r3, [sp, #4]
 8008556:	ab1a      	add	r3, sp, #104	@ 0x68
 8008558:	9300      	str	r3, [sp, #0]
 800855a:	4a8e      	ldr	r2, [pc, #568]	@ (8008794 <_strtod_l+0x28c>)
 800855c:	9805      	ldr	r0, [sp, #20]
 800855e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008560:	a919      	add	r1, sp, #100	@ 0x64
 8008562:	f001 f927 	bl	80097b4 <__gethex>
 8008566:	f010 060f 	ands.w	r6, r0, #15
 800856a:	4604      	mov	r4, r0
 800856c:	d005      	beq.n	800857a <_strtod_l+0x72>
 800856e:	2e06      	cmp	r6, #6
 8008570:	d128      	bne.n	80085c4 <_strtod_l+0xbc>
 8008572:	3501      	adds	r5, #1
 8008574:	2300      	movs	r3, #0
 8008576:	9519      	str	r5, [sp, #100]	@ 0x64
 8008578:	930b      	str	r3, [sp, #44]	@ 0x2c
 800857a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800857c:	2b00      	cmp	r3, #0
 800857e:	f040 858e 	bne.w	800909e <_strtod_l+0xb96>
 8008582:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008584:	b1cb      	cbz	r3, 80085ba <_strtod_l+0xb2>
 8008586:	4652      	mov	r2, sl
 8008588:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800858c:	ec43 2b10 	vmov	d0, r2, r3
 8008590:	b01f      	add	sp, #124	@ 0x7c
 8008592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008596:	2920      	cmp	r1, #32
 8008598:	d1ce      	bne.n	8008538 <_strtod_l+0x30>
 800859a:	3201      	adds	r2, #1
 800859c:	e7c1      	b.n	8008522 <_strtod_l+0x1a>
 800859e:	292d      	cmp	r1, #45	@ 0x2d
 80085a0:	d1ca      	bne.n	8008538 <_strtod_l+0x30>
 80085a2:	2101      	movs	r1, #1
 80085a4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80085a6:	1c51      	adds	r1, r2, #1
 80085a8:	9119      	str	r1, [sp, #100]	@ 0x64
 80085aa:	7852      	ldrb	r2, [r2, #1]
 80085ac:	2a00      	cmp	r2, #0
 80085ae:	d1c5      	bne.n	800853c <_strtod_l+0x34>
 80085b0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80085b2:	9419      	str	r4, [sp, #100]	@ 0x64
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	f040 8570 	bne.w	800909a <_strtod_l+0xb92>
 80085ba:	4652      	mov	r2, sl
 80085bc:	465b      	mov	r3, fp
 80085be:	e7e5      	b.n	800858c <_strtod_l+0x84>
 80085c0:	2100      	movs	r1, #0
 80085c2:	e7ef      	b.n	80085a4 <_strtod_l+0x9c>
 80085c4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80085c6:	b13a      	cbz	r2, 80085d8 <_strtod_l+0xd0>
 80085c8:	2135      	movs	r1, #53	@ 0x35
 80085ca:	a81c      	add	r0, sp, #112	@ 0x70
 80085cc:	f7ff ff3a 	bl	8008444 <__copybits>
 80085d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80085d2:	9805      	ldr	r0, [sp, #20]
 80085d4:	f7ff fb08 	bl	8007be8 <_Bfree>
 80085d8:	3e01      	subs	r6, #1
 80085da:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80085dc:	2e04      	cmp	r6, #4
 80085de:	d806      	bhi.n	80085ee <_strtod_l+0xe6>
 80085e0:	e8df f006 	tbb	[pc, r6]
 80085e4:	201d0314 	.word	0x201d0314
 80085e8:	14          	.byte	0x14
 80085e9:	00          	.byte	0x00
 80085ea:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80085ee:	05e1      	lsls	r1, r4, #23
 80085f0:	bf48      	it	mi
 80085f2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80085f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80085fa:	0d1b      	lsrs	r3, r3, #20
 80085fc:	051b      	lsls	r3, r3, #20
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d1bb      	bne.n	800857a <_strtod_l+0x72>
 8008602:	f7fe fb31 	bl	8006c68 <__errno>
 8008606:	2322      	movs	r3, #34	@ 0x22
 8008608:	6003      	str	r3, [r0, #0]
 800860a:	e7b6      	b.n	800857a <_strtod_l+0x72>
 800860c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008610:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008614:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008618:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800861c:	e7e7      	b.n	80085ee <_strtod_l+0xe6>
 800861e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800879c <_strtod_l+0x294>
 8008622:	e7e4      	b.n	80085ee <_strtod_l+0xe6>
 8008624:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008628:	f04f 3aff 	mov.w	sl, #4294967295
 800862c:	e7df      	b.n	80085ee <_strtod_l+0xe6>
 800862e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008630:	1c5a      	adds	r2, r3, #1
 8008632:	9219      	str	r2, [sp, #100]	@ 0x64
 8008634:	785b      	ldrb	r3, [r3, #1]
 8008636:	2b30      	cmp	r3, #48	@ 0x30
 8008638:	d0f9      	beq.n	800862e <_strtod_l+0x126>
 800863a:	2b00      	cmp	r3, #0
 800863c:	d09d      	beq.n	800857a <_strtod_l+0x72>
 800863e:	2301      	movs	r3, #1
 8008640:	9309      	str	r3, [sp, #36]	@ 0x24
 8008642:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008644:	930c      	str	r3, [sp, #48]	@ 0x30
 8008646:	2300      	movs	r3, #0
 8008648:	9308      	str	r3, [sp, #32]
 800864a:	930a      	str	r3, [sp, #40]	@ 0x28
 800864c:	461f      	mov	r7, r3
 800864e:	220a      	movs	r2, #10
 8008650:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008652:	7805      	ldrb	r5, [r0, #0]
 8008654:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008658:	b2d9      	uxtb	r1, r3
 800865a:	2909      	cmp	r1, #9
 800865c:	d928      	bls.n	80086b0 <_strtod_l+0x1a8>
 800865e:	494e      	ldr	r1, [pc, #312]	@ (8008798 <_strtod_l+0x290>)
 8008660:	2201      	movs	r2, #1
 8008662:	f000 ffd5 	bl	8009610 <strncmp>
 8008666:	2800      	cmp	r0, #0
 8008668:	d032      	beq.n	80086d0 <_strtod_l+0x1c8>
 800866a:	2000      	movs	r0, #0
 800866c:	462a      	mov	r2, r5
 800866e:	4681      	mov	r9, r0
 8008670:	463d      	mov	r5, r7
 8008672:	4603      	mov	r3, r0
 8008674:	2a65      	cmp	r2, #101	@ 0x65
 8008676:	d001      	beq.n	800867c <_strtod_l+0x174>
 8008678:	2a45      	cmp	r2, #69	@ 0x45
 800867a:	d114      	bne.n	80086a6 <_strtod_l+0x19e>
 800867c:	b91d      	cbnz	r5, 8008686 <_strtod_l+0x17e>
 800867e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008680:	4302      	orrs	r2, r0
 8008682:	d095      	beq.n	80085b0 <_strtod_l+0xa8>
 8008684:	2500      	movs	r5, #0
 8008686:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008688:	1c62      	adds	r2, r4, #1
 800868a:	9219      	str	r2, [sp, #100]	@ 0x64
 800868c:	7862      	ldrb	r2, [r4, #1]
 800868e:	2a2b      	cmp	r2, #43	@ 0x2b
 8008690:	d077      	beq.n	8008782 <_strtod_l+0x27a>
 8008692:	2a2d      	cmp	r2, #45	@ 0x2d
 8008694:	d07b      	beq.n	800878e <_strtod_l+0x286>
 8008696:	f04f 0c00 	mov.w	ip, #0
 800869a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800869e:	2909      	cmp	r1, #9
 80086a0:	f240 8082 	bls.w	80087a8 <_strtod_l+0x2a0>
 80086a4:	9419      	str	r4, [sp, #100]	@ 0x64
 80086a6:	f04f 0800 	mov.w	r8, #0
 80086aa:	e0a2      	b.n	80087f2 <_strtod_l+0x2ea>
 80086ac:	2300      	movs	r3, #0
 80086ae:	e7c7      	b.n	8008640 <_strtod_l+0x138>
 80086b0:	2f08      	cmp	r7, #8
 80086b2:	bfd5      	itete	le
 80086b4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80086b6:	9908      	ldrgt	r1, [sp, #32]
 80086b8:	fb02 3301 	mlale	r3, r2, r1, r3
 80086bc:	fb02 3301 	mlagt	r3, r2, r1, r3
 80086c0:	f100 0001 	add.w	r0, r0, #1
 80086c4:	bfd4      	ite	le
 80086c6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80086c8:	9308      	strgt	r3, [sp, #32]
 80086ca:	3701      	adds	r7, #1
 80086cc:	9019      	str	r0, [sp, #100]	@ 0x64
 80086ce:	e7bf      	b.n	8008650 <_strtod_l+0x148>
 80086d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80086d2:	1c5a      	adds	r2, r3, #1
 80086d4:	9219      	str	r2, [sp, #100]	@ 0x64
 80086d6:	785a      	ldrb	r2, [r3, #1]
 80086d8:	b37f      	cbz	r7, 800873a <_strtod_l+0x232>
 80086da:	4681      	mov	r9, r0
 80086dc:	463d      	mov	r5, r7
 80086de:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80086e2:	2b09      	cmp	r3, #9
 80086e4:	d912      	bls.n	800870c <_strtod_l+0x204>
 80086e6:	2301      	movs	r3, #1
 80086e8:	e7c4      	b.n	8008674 <_strtod_l+0x16c>
 80086ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80086ec:	1c5a      	adds	r2, r3, #1
 80086ee:	9219      	str	r2, [sp, #100]	@ 0x64
 80086f0:	785a      	ldrb	r2, [r3, #1]
 80086f2:	3001      	adds	r0, #1
 80086f4:	2a30      	cmp	r2, #48	@ 0x30
 80086f6:	d0f8      	beq.n	80086ea <_strtod_l+0x1e2>
 80086f8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80086fc:	2b08      	cmp	r3, #8
 80086fe:	f200 84d3 	bhi.w	80090a8 <_strtod_l+0xba0>
 8008702:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008704:	930c      	str	r3, [sp, #48]	@ 0x30
 8008706:	4681      	mov	r9, r0
 8008708:	2000      	movs	r0, #0
 800870a:	4605      	mov	r5, r0
 800870c:	3a30      	subs	r2, #48	@ 0x30
 800870e:	f100 0301 	add.w	r3, r0, #1
 8008712:	d02a      	beq.n	800876a <_strtod_l+0x262>
 8008714:	4499      	add	r9, r3
 8008716:	eb00 0c05 	add.w	ip, r0, r5
 800871a:	462b      	mov	r3, r5
 800871c:	210a      	movs	r1, #10
 800871e:	4563      	cmp	r3, ip
 8008720:	d10d      	bne.n	800873e <_strtod_l+0x236>
 8008722:	1c69      	adds	r1, r5, #1
 8008724:	4401      	add	r1, r0
 8008726:	4428      	add	r0, r5
 8008728:	2808      	cmp	r0, #8
 800872a:	dc16      	bgt.n	800875a <_strtod_l+0x252>
 800872c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800872e:	230a      	movs	r3, #10
 8008730:	fb03 2300 	mla	r3, r3, r0, r2
 8008734:	930a      	str	r3, [sp, #40]	@ 0x28
 8008736:	2300      	movs	r3, #0
 8008738:	e018      	b.n	800876c <_strtod_l+0x264>
 800873a:	4638      	mov	r0, r7
 800873c:	e7da      	b.n	80086f4 <_strtod_l+0x1ec>
 800873e:	2b08      	cmp	r3, #8
 8008740:	f103 0301 	add.w	r3, r3, #1
 8008744:	dc03      	bgt.n	800874e <_strtod_l+0x246>
 8008746:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008748:	434e      	muls	r6, r1
 800874a:	960a      	str	r6, [sp, #40]	@ 0x28
 800874c:	e7e7      	b.n	800871e <_strtod_l+0x216>
 800874e:	2b10      	cmp	r3, #16
 8008750:	bfde      	ittt	le
 8008752:	9e08      	ldrle	r6, [sp, #32]
 8008754:	434e      	mulle	r6, r1
 8008756:	9608      	strle	r6, [sp, #32]
 8008758:	e7e1      	b.n	800871e <_strtod_l+0x216>
 800875a:	280f      	cmp	r0, #15
 800875c:	dceb      	bgt.n	8008736 <_strtod_l+0x22e>
 800875e:	9808      	ldr	r0, [sp, #32]
 8008760:	230a      	movs	r3, #10
 8008762:	fb03 2300 	mla	r3, r3, r0, r2
 8008766:	9308      	str	r3, [sp, #32]
 8008768:	e7e5      	b.n	8008736 <_strtod_l+0x22e>
 800876a:	4629      	mov	r1, r5
 800876c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800876e:	1c50      	adds	r0, r2, #1
 8008770:	9019      	str	r0, [sp, #100]	@ 0x64
 8008772:	7852      	ldrb	r2, [r2, #1]
 8008774:	4618      	mov	r0, r3
 8008776:	460d      	mov	r5, r1
 8008778:	e7b1      	b.n	80086de <_strtod_l+0x1d6>
 800877a:	f04f 0900 	mov.w	r9, #0
 800877e:	2301      	movs	r3, #1
 8008780:	e77d      	b.n	800867e <_strtod_l+0x176>
 8008782:	f04f 0c00 	mov.w	ip, #0
 8008786:	1ca2      	adds	r2, r4, #2
 8008788:	9219      	str	r2, [sp, #100]	@ 0x64
 800878a:	78a2      	ldrb	r2, [r4, #2]
 800878c:	e785      	b.n	800869a <_strtod_l+0x192>
 800878e:	f04f 0c01 	mov.w	ip, #1
 8008792:	e7f8      	b.n	8008786 <_strtod_l+0x27e>
 8008794:	0800a690 	.word	0x0800a690
 8008798:	0800a678 	.word	0x0800a678
 800879c:	7ff00000 	.word	0x7ff00000
 80087a0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80087a2:	1c51      	adds	r1, r2, #1
 80087a4:	9119      	str	r1, [sp, #100]	@ 0x64
 80087a6:	7852      	ldrb	r2, [r2, #1]
 80087a8:	2a30      	cmp	r2, #48	@ 0x30
 80087aa:	d0f9      	beq.n	80087a0 <_strtod_l+0x298>
 80087ac:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80087b0:	2908      	cmp	r1, #8
 80087b2:	f63f af78 	bhi.w	80086a6 <_strtod_l+0x19e>
 80087b6:	3a30      	subs	r2, #48	@ 0x30
 80087b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80087ba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80087bc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80087be:	f04f 080a 	mov.w	r8, #10
 80087c2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80087c4:	1c56      	adds	r6, r2, #1
 80087c6:	9619      	str	r6, [sp, #100]	@ 0x64
 80087c8:	7852      	ldrb	r2, [r2, #1]
 80087ca:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80087ce:	f1be 0f09 	cmp.w	lr, #9
 80087d2:	d939      	bls.n	8008848 <_strtod_l+0x340>
 80087d4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80087d6:	1a76      	subs	r6, r6, r1
 80087d8:	2e08      	cmp	r6, #8
 80087da:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80087de:	dc03      	bgt.n	80087e8 <_strtod_l+0x2e0>
 80087e0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80087e2:	4588      	cmp	r8, r1
 80087e4:	bfa8      	it	ge
 80087e6:	4688      	movge	r8, r1
 80087e8:	f1bc 0f00 	cmp.w	ip, #0
 80087ec:	d001      	beq.n	80087f2 <_strtod_l+0x2ea>
 80087ee:	f1c8 0800 	rsb	r8, r8, #0
 80087f2:	2d00      	cmp	r5, #0
 80087f4:	d14e      	bne.n	8008894 <_strtod_l+0x38c>
 80087f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80087f8:	4308      	orrs	r0, r1
 80087fa:	f47f aebe 	bne.w	800857a <_strtod_l+0x72>
 80087fe:	2b00      	cmp	r3, #0
 8008800:	f47f aed6 	bne.w	80085b0 <_strtod_l+0xa8>
 8008804:	2a69      	cmp	r2, #105	@ 0x69
 8008806:	d028      	beq.n	800885a <_strtod_l+0x352>
 8008808:	dc25      	bgt.n	8008856 <_strtod_l+0x34e>
 800880a:	2a49      	cmp	r2, #73	@ 0x49
 800880c:	d025      	beq.n	800885a <_strtod_l+0x352>
 800880e:	2a4e      	cmp	r2, #78	@ 0x4e
 8008810:	f47f aece 	bne.w	80085b0 <_strtod_l+0xa8>
 8008814:	499b      	ldr	r1, [pc, #620]	@ (8008a84 <_strtod_l+0x57c>)
 8008816:	a819      	add	r0, sp, #100	@ 0x64
 8008818:	f001 f9ee 	bl	8009bf8 <__match>
 800881c:	2800      	cmp	r0, #0
 800881e:	f43f aec7 	beq.w	80085b0 <_strtod_l+0xa8>
 8008822:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	2b28      	cmp	r3, #40	@ 0x28
 8008828:	d12e      	bne.n	8008888 <_strtod_l+0x380>
 800882a:	4997      	ldr	r1, [pc, #604]	@ (8008a88 <_strtod_l+0x580>)
 800882c:	aa1c      	add	r2, sp, #112	@ 0x70
 800882e:	a819      	add	r0, sp, #100	@ 0x64
 8008830:	f001 f9f6 	bl	8009c20 <__hexnan>
 8008834:	2805      	cmp	r0, #5
 8008836:	d127      	bne.n	8008888 <_strtod_l+0x380>
 8008838:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800883a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800883e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008842:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008846:	e698      	b.n	800857a <_strtod_l+0x72>
 8008848:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800884a:	fb08 2101 	mla	r1, r8, r1, r2
 800884e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008852:	920e      	str	r2, [sp, #56]	@ 0x38
 8008854:	e7b5      	b.n	80087c2 <_strtod_l+0x2ba>
 8008856:	2a6e      	cmp	r2, #110	@ 0x6e
 8008858:	e7da      	b.n	8008810 <_strtod_l+0x308>
 800885a:	498c      	ldr	r1, [pc, #560]	@ (8008a8c <_strtod_l+0x584>)
 800885c:	a819      	add	r0, sp, #100	@ 0x64
 800885e:	f001 f9cb 	bl	8009bf8 <__match>
 8008862:	2800      	cmp	r0, #0
 8008864:	f43f aea4 	beq.w	80085b0 <_strtod_l+0xa8>
 8008868:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800886a:	4989      	ldr	r1, [pc, #548]	@ (8008a90 <_strtod_l+0x588>)
 800886c:	3b01      	subs	r3, #1
 800886e:	a819      	add	r0, sp, #100	@ 0x64
 8008870:	9319      	str	r3, [sp, #100]	@ 0x64
 8008872:	f001 f9c1 	bl	8009bf8 <__match>
 8008876:	b910      	cbnz	r0, 800887e <_strtod_l+0x376>
 8008878:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800887a:	3301      	adds	r3, #1
 800887c:	9319      	str	r3, [sp, #100]	@ 0x64
 800887e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008aa0 <_strtod_l+0x598>
 8008882:	f04f 0a00 	mov.w	sl, #0
 8008886:	e678      	b.n	800857a <_strtod_l+0x72>
 8008888:	4882      	ldr	r0, [pc, #520]	@ (8008a94 <_strtod_l+0x58c>)
 800888a:	f000 fef1 	bl	8009670 <nan>
 800888e:	ec5b ab10 	vmov	sl, fp, d0
 8008892:	e672      	b.n	800857a <_strtod_l+0x72>
 8008894:	eba8 0309 	sub.w	r3, r8, r9
 8008898:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800889a:	9309      	str	r3, [sp, #36]	@ 0x24
 800889c:	2f00      	cmp	r7, #0
 800889e:	bf08      	it	eq
 80088a0:	462f      	moveq	r7, r5
 80088a2:	2d10      	cmp	r5, #16
 80088a4:	462c      	mov	r4, r5
 80088a6:	bfa8      	it	ge
 80088a8:	2410      	movge	r4, #16
 80088aa:	f7f7 fe3b 	bl	8000524 <__aeabi_ui2d>
 80088ae:	2d09      	cmp	r5, #9
 80088b0:	4682      	mov	sl, r0
 80088b2:	468b      	mov	fp, r1
 80088b4:	dc13      	bgt.n	80088de <_strtod_l+0x3d6>
 80088b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	f43f ae5e 	beq.w	800857a <_strtod_l+0x72>
 80088be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088c0:	dd78      	ble.n	80089b4 <_strtod_l+0x4ac>
 80088c2:	2b16      	cmp	r3, #22
 80088c4:	dc5f      	bgt.n	8008986 <_strtod_l+0x47e>
 80088c6:	4974      	ldr	r1, [pc, #464]	@ (8008a98 <_strtod_l+0x590>)
 80088c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80088cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088d0:	4652      	mov	r2, sl
 80088d2:	465b      	mov	r3, fp
 80088d4:	f7f7 fea0 	bl	8000618 <__aeabi_dmul>
 80088d8:	4682      	mov	sl, r0
 80088da:	468b      	mov	fp, r1
 80088dc:	e64d      	b.n	800857a <_strtod_l+0x72>
 80088de:	4b6e      	ldr	r3, [pc, #440]	@ (8008a98 <_strtod_l+0x590>)
 80088e0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80088e4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80088e8:	f7f7 fe96 	bl	8000618 <__aeabi_dmul>
 80088ec:	4682      	mov	sl, r0
 80088ee:	9808      	ldr	r0, [sp, #32]
 80088f0:	468b      	mov	fp, r1
 80088f2:	f7f7 fe17 	bl	8000524 <__aeabi_ui2d>
 80088f6:	4602      	mov	r2, r0
 80088f8:	460b      	mov	r3, r1
 80088fa:	4650      	mov	r0, sl
 80088fc:	4659      	mov	r1, fp
 80088fe:	f7f7 fcd5 	bl	80002ac <__adddf3>
 8008902:	2d0f      	cmp	r5, #15
 8008904:	4682      	mov	sl, r0
 8008906:	468b      	mov	fp, r1
 8008908:	ddd5      	ble.n	80088b6 <_strtod_l+0x3ae>
 800890a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800890c:	1b2c      	subs	r4, r5, r4
 800890e:	441c      	add	r4, r3
 8008910:	2c00      	cmp	r4, #0
 8008912:	f340 8096 	ble.w	8008a42 <_strtod_l+0x53a>
 8008916:	f014 030f 	ands.w	r3, r4, #15
 800891a:	d00a      	beq.n	8008932 <_strtod_l+0x42a>
 800891c:	495e      	ldr	r1, [pc, #376]	@ (8008a98 <_strtod_l+0x590>)
 800891e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008922:	4652      	mov	r2, sl
 8008924:	465b      	mov	r3, fp
 8008926:	e9d1 0100 	ldrd	r0, r1, [r1]
 800892a:	f7f7 fe75 	bl	8000618 <__aeabi_dmul>
 800892e:	4682      	mov	sl, r0
 8008930:	468b      	mov	fp, r1
 8008932:	f034 040f 	bics.w	r4, r4, #15
 8008936:	d073      	beq.n	8008a20 <_strtod_l+0x518>
 8008938:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800893c:	dd48      	ble.n	80089d0 <_strtod_l+0x4c8>
 800893e:	2400      	movs	r4, #0
 8008940:	46a0      	mov	r8, r4
 8008942:	940a      	str	r4, [sp, #40]	@ 0x28
 8008944:	46a1      	mov	r9, r4
 8008946:	9a05      	ldr	r2, [sp, #20]
 8008948:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008aa0 <_strtod_l+0x598>
 800894c:	2322      	movs	r3, #34	@ 0x22
 800894e:	6013      	str	r3, [r2, #0]
 8008950:	f04f 0a00 	mov.w	sl, #0
 8008954:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008956:	2b00      	cmp	r3, #0
 8008958:	f43f ae0f 	beq.w	800857a <_strtod_l+0x72>
 800895c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800895e:	9805      	ldr	r0, [sp, #20]
 8008960:	f7ff f942 	bl	8007be8 <_Bfree>
 8008964:	9805      	ldr	r0, [sp, #20]
 8008966:	4649      	mov	r1, r9
 8008968:	f7ff f93e 	bl	8007be8 <_Bfree>
 800896c:	9805      	ldr	r0, [sp, #20]
 800896e:	4641      	mov	r1, r8
 8008970:	f7ff f93a 	bl	8007be8 <_Bfree>
 8008974:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008976:	9805      	ldr	r0, [sp, #20]
 8008978:	f7ff f936 	bl	8007be8 <_Bfree>
 800897c:	9805      	ldr	r0, [sp, #20]
 800897e:	4621      	mov	r1, r4
 8008980:	f7ff f932 	bl	8007be8 <_Bfree>
 8008984:	e5f9      	b.n	800857a <_strtod_l+0x72>
 8008986:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008988:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800898c:	4293      	cmp	r3, r2
 800898e:	dbbc      	blt.n	800890a <_strtod_l+0x402>
 8008990:	4c41      	ldr	r4, [pc, #260]	@ (8008a98 <_strtod_l+0x590>)
 8008992:	f1c5 050f 	rsb	r5, r5, #15
 8008996:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800899a:	4652      	mov	r2, sl
 800899c:	465b      	mov	r3, fp
 800899e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089a2:	f7f7 fe39 	bl	8000618 <__aeabi_dmul>
 80089a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089a8:	1b5d      	subs	r5, r3, r5
 80089aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80089ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 80089b2:	e78f      	b.n	80088d4 <_strtod_l+0x3cc>
 80089b4:	3316      	adds	r3, #22
 80089b6:	dba8      	blt.n	800890a <_strtod_l+0x402>
 80089b8:	4b37      	ldr	r3, [pc, #220]	@ (8008a98 <_strtod_l+0x590>)
 80089ba:	eba9 0808 	sub.w	r8, r9, r8
 80089be:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80089c2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80089c6:	4650      	mov	r0, sl
 80089c8:	4659      	mov	r1, fp
 80089ca:	f7f7 ff4f 	bl	800086c <__aeabi_ddiv>
 80089ce:	e783      	b.n	80088d8 <_strtod_l+0x3d0>
 80089d0:	4b32      	ldr	r3, [pc, #200]	@ (8008a9c <_strtod_l+0x594>)
 80089d2:	9308      	str	r3, [sp, #32]
 80089d4:	2300      	movs	r3, #0
 80089d6:	1124      	asrs	r4, r4, #4
 80089d8:	4650      	mov	r0, sl
 80089da:	4659      	mov	r1, fp
 80089dc:	461e      	mov	r6, r3
 80089de:	2c01      	cmp	r4, #1
 80089e0:	dc21      	bgt.n	8008a26 <_strtod_l+0x51e>
 80089e2:	b10b      	cbz	r3, 80089e8 <_strtod_l+0x4e0>
 80089e4:	4682      	mov	sl, r0
 80089e6:	468b      	mov	fp, r1
 80089e8:	492c      	ldr	r1, [pc, #176]	@ (8008a9c <_strtod_l+0x594>)
 80089ea:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80089ee:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80089f2:	4652      	mov	r2, sl
 80089f4:	465b      	mov	r3, fp
 80089f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089fa:	f7f7 fe0d 	bl	8000618 <__aeabi_dmul>
 80089fe:	4b28      	ldr	r3, [pc, #160]	@ (8008aa0 <_strtod_l+0x598>)
 8008a00:	460a      	mov	r2, r1
 8008a02:	400b      	ands	r3, r1
 8008a04:	4927      	ldr	r1, [pc, #156]	@ (8008aa4 <_strtod_l+0x59c>)
 8008a06:	428b      	cmp	r3, r1
 8008a08:	4682      	mov	sl, r0
 8008a0a:	d898      	bhi.n	800893e <_strtod_l+0x436>
 8008a0c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008a10:	428b      	cmp	r3, r1
 8008a12:	bf86      	itte	hi
 8008a14:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008aa8 <_strtod_l+0x5a0>
 8008a18:	f04f 3aff 	movhi.w	sl, #4294967295
 8008a1c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008a20:	2300      	movs	r3, #0
 8008a22:	9308      	str	r3, [sp, #32]
 8008a24:	e07a      	b.n	8008b1c <_strtod_l+0x614>
 8008a26:	07e2      	lsls	r2, r4, #31
 8008a28:	d505      	bpl.n	8008a36 <_strtod_l+0x52e>
 8008a2a:	9b08      	ldr	r3, [sp, #32]
 8008a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a30:	f7f7 fdf2 	bl	8000618 <__aeabi_dmul>
 8008a34:	2301      	movs	r3, #1
 8008a36:	9a08      	ldr	r2, [sp, #32]
 8008a38:	3208      	adds	r2, #8
 8008a3a:	3601      	adds	r6, #1
 8008a3c:	1064      	asrs	r4, r4, #1
 8008a3e:	9208      	str	r2, [sp, #32]
 8008a40:	e7cd      	b.n	80089de <_strtod_l+0x4d6>
 8008a42:	d0ed      	beq.n	8008a20 <_strtod_l+0x518>
 8008a44:	4264      	negs	r4, r4
 8008a46:	f014 020f 	ands.w	r2, r4, #15
 8008a4a:	d00a      	beq.n	8008a62 <_strtod_l+0x55a>
 8008a4c:	4b12      	ldr	r3, [pc, #72]	@ (8008a98 <_strtod_l+0x590>)
 8008a4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a52:	4650      	mov	r0, sl
 8008a54:	4659      	mov	r1, fp
 8008a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5a:	f7f7 ff07 	bl	800086c <__aeabi_ddiv>
 8008a5e:	4682      	mov	sl, r0
 8008a60:	468b      	mov	fp, r1
 8008a62:	1124      	asrs	r4, r4, #4
 8008a64:	d0dc      	beq.n	8008a20 <_strtod_l+0x518>
 8008a66:	2c1f      	cmp	r4, #31
 8008a68:	dd20      	ble.n	8008aac <_strtod_l+0x5a4>
 8008a6a:	2400      	movs	r4, #0
 8008a6c:	46a0      	mov	r8, r4
 8008a6e:	940a      	str	r4, [sp, #40]	@ 0x28
 8008a70:	46a1      	mov	r9, r4
 8008a72:	9a05      	ldr	r2, [sp, #20]
 8008a74:	2322      	movs	r3, #34	@ 0x22
 8008a76:	f04f 0a00 	mov.w	sl, #0
 8008a7a:	f04f 0b00 	mov.w	fp, #0
 8008a7e:	6013      	str	r3, [r2, #0]
 8008a80:	e768      	b.n	8008954 <_strtod_l+0x44c>
 8008a82:	bf00      	nop
 8008a84:	0800a469 	.word	0x0800a469
 8008a88:	0800a67c 	.word	0x0800a67c
 8008a8c:	0800a461 	.word	0x0800a461
 8008a90:	0800a498 	.word	0x0800a498
 8008a94:	0800a825 	.word	0x0800a825
 8008a98:	0800a5b0 	.word	0x0800a5b0
 8008a9c:	0800a588 	.word	0x0800a588
 8008aa0:	7ff00000 	.word	0x7ff00000
 8008aa4:	7ca00000 	.word	0x7ca00000
 8008aa8:	7fefffff 	.word	0x7fefffff
 8008aac:	f014 0310 	ands.w	r3, r4, #16
 8008ab0:	bf18      	it	ne
 8008ab2:	236a      	movne	r3, #106	@ 0x6a
 8008ab4:	4ea9      	ldr	r6, [pc, #676]	@ (8008d5c <_strtod_l+0x854>)
 8008ab6:	9308      	str	r3, [sp, #32]
 8008ab8:	4650      	mov	r0, sl
 8008aba:	4659      	mov	r1, fp
 8008abc:	2300      	movs	r3, #0
 8008abe:	07e2      	lsls	r2, r4, #31
 8008ac0:	d504      	bpl.n	8008acc <_strtod_l+0x5c4>
 8008ac2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008ac6:	f7f7 fda7 	bl	8000618 <__aeabi_dmul>
 8008aca:	2301      	movs	r3, #1
 8008acc:	1064      	asrs	r4, r4, #1
 8008ace:	f106 0608 	add.w	r6, r6, #8
 8008ad2:	d1f4      	bne.n	8008abe <_strtod_l+0x5b6>
 8008ad4:	b10b      	cbz	r3, 8008ada <_strtod_l+0x5d2>
 8008ad6:	4682      	mov	sl, r0
 8008ad8:	468b      	mov	fp, r1
 8008ada:	9b08      	ldr	r3, [sp, #32]
 8008adc:	b1b3      	cbz	r3, 8008b0c <_strtod_l+0x604>
 8008ade:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008ae2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	4659      	mov	r1, fp
 8008aea:	dd0f      	ble.n	8008b0c <_strtod_l+0x604>
 8008aec:	2b1f      	cmp	r3, #31
 8008aee:	dd55      	ble.n	8008b9c <_strtod_l+0x694>
 8008af0:	2b34      	cmp	r3, #52	@ 0x34
 8008af2:	bfde      	ittt	le
 8008af4:	f04f 33ff 	movle.w	r3, #4294967295
 8008af8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008afc:	4093      	lslle	r3, r2
 8008afe:	f04f 0a00 	mov.w	sl, #0
 8008b02:	bfcc      	ite	gt
 8008b04:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008b08:	ea03 0b01 	andle.w	fp, r3, r1
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	2300      	movs	r3, #0
 8008b10:	4650      	mov	r0, sl
 8008b12:	4659      	mov	r1, fp
 8008b14:	f7f7 ffe8 	bl	8000ae8 <__aeabi_dcmpeq>
 8008b18:	2800      	cmp	r0, #0
 8008b1a:	d1a6      	bne.n	8008a6a <_strtod_l+0x562>
 8008b1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b1e:	9300      	str	r3, [sp, #0]
 8008b20:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008b22:	9805      	ldr	r0, [sp, #20]
 8008b24:	462b      	mov	r3, r5
 8008b26:	463a      	mov	r2, r7
 8008b28:	f7ff f8c6 	bl	8007cb8 <__s2b>
 8008b2c:	900a      	str	r0, [sp, #40]	@ 0x28
 8008b2e:	2800      	cmp	r0, #0
 8008b30:	f43f af05 	beq.w	800893e <_strtod_l+0x436>
 8008b34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b36:	2a00      	cmp	r2, #0
 8008b38:	eba9 0308 	sub.w	r3, r9, r8
 8008b3c:	bfa8      	it	ge
 8008b3e:	2300      	movge	r3, #0
 8008b40:	9312      	str	r3, [sp, #72]	@ 0x48
 8008b42:	2400      	movs	r4, #0
 8008b44:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008b48:	9316      	str	r3, [sp, #88]	@ 0x58
 8008b4a:	46a0      	mov	r8, r4
 8008b4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b4e:	9805      	ldr	r0, [sp, #20]
 8008b50:	6859      	ldr	r1, [r3, #4]
 8008b52:	f7ff f809 	bl	8007b68 <_Balloc>
 8008b56:	4681      	mov	r9, r0
 8008b58:	2800      	cmp	r0, #0
 8008b5a:	f43f aef4 	beq.w	8008946 <_strtod_l+0x43e>
 8008b5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b60:	691a      	ldr	r2, [r3, #16]
 8008b62:	3202      	adds	r2, #2
 8008b64:	f103 010c 	add.w	r1, r3, #12
 8008b68:	0092      	lsls	r2, r2, #2
 8008b6a:	300c      	adds	r0, #12
 8008b6c:	f000 fd72 	bl	8009654 <memcpy>
 8008b70:	ec4b ab10 	vmov	d0, sl, fp
 8008b74:	9805      	ldr	r0, [sp, #20]
 8008b76:	aa1c      	add	r2, sp, #112	@ 0x70
 8008b78:	a91b      	add	r1, sp, #108	@ 0x6c
 8008b7a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008b7e:	f7ff fbd7 	bl	8008330 <__d2b>
 8008b82:	901a      	str	r0, [sp, #104]	@ 0x68
 8008b84:	2800      	cmp	r0, #0
 8008b86:	f43f aede 	beq.w	8008946 <_strtod_l+0x43e>
 8008b8a:	9805      	ldr	r0, [sp, #20]
 8008b8c:	2101      	movs	r1, #1
 8008b8e:	f7ff f929 	bl	8007de4 <__i2b>
 8008b92:	4680      	mov	r8, r0
 8008b94:	b948      	cbnz	r0, 8008baa <_strtod_l+0x6a2>
 8008b96:	f04f 0800 	mov.w	r8, #0
 8008b9a:	e6d4      	b.n	8008946 <_strtod_l+0x43e>
 8008b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8008ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ba4:	ea03 0a0a 	and.w	sl, r3, sl
 8008ba8:	e7b0      	b.n	8008b0c <_strtod_l+0x604>
 8008baa:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008bac:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008bae:	2d00      	cmp	r5, #0
 8008bb0:	bfab      	itete	ge
 8008bb2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008bb4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008bb6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008bb8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008bba:	bfac      	ite	ge
 8008bbc:	18ef      	addge	r7, r5, r3
 8008bbe:	1b5e      	sublt	r6, r3, r5
 8008bc0:	9b08      	ldr	r3, [sp, #32]
 8008bc2:	1aed      	subs	r5, r5, r3
 8008bc4:	4415      	add	r5, r2
 8008bc6:	4b66      	ldr	r3, [pc, #408]	@ (8008d60 <_strtod_l+0x858>)
 8008bc8:	3d01      	subs	r5, #1
 8008bca:	429d      	cmp	r5, r3
 8008bcc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008bd0:	da50      	bge.n	8008c74 <_strtod_l+0x76c>
 8008bd2:	1b5b      	subs	r3, r3, r5
 8008bd4:	2b1f      	cmp	r3, #31
 8008bd6:	eba2 0203 	sub.w	r2, r2, r3
 8008bda:	f04f 0101 	mov.w	r1, #1
 8008bde:	dc3d      	bgt.n	8008c5c <_strtod_l+0x754>
 8008be0:	fa01 f303 	lsl.w	r3, r1, r3
 8008be4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008be6:	2300      	movs	r3, #0
 8008be8:	9310      	str	r3, [sp, #64]	@ 0x40
 8008bea:	18bd      	adds	r5, r7, r2
 8008bec:	9b08      	ldr	r3, [sp, #32]
 8008bee:	42af      	cmp	r7, r5
 8008bf0:	4416      	add	r6, r2
 8008bf2:	441e      	add	r6, r3
 8008bf4:	463b      	mov	r3, r7
 8008bf6:	bfa8      	it	ge
 8008bf8:	462b      	movge	r3, r5
 8008bfa:	42b3      	cmp	r3, r6
 8008bfc:	bfa8      	it	ge
 8008bfe:	4633      	movge	r3, r6
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	bfc2      	ittt	gt
 8008c04:	1aed      	subgt	r5, r5, r3
 8008c06:	1af6      	subgt	r6, r6, r3
 8008c08:	1aff      	subgt	r7, r7, r3
 8008c0a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	dd16      	ble.n	8008c3e <_strtod_l+0x736>
 8008c10:	4641      	mov	r1, r8
 8008c12:	9805      	ldr	r0, [sp, #20]
 8008c14:	461a      	mov	r2, r3
 8008c16:	f7ff f9a5 	bl	8007f64 <__pow5mult>
 8008c1a:	4680      	mov	r8, r0
 8008c1c:	2800      	cmp	r0, #0
 8008c1e:	d0ba      	beq.n	8008b96 <_strtod_l+0x68e>
 8008c20:	4601      	mov	r1, r0
 8008c22:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008c24:	9805      	ldr	r0, [sp, #20]
 8008c26:	f7ff f8f3 	bl	8007e10 <__multiply>
 8008c2a:	900e      	str	r0, [sp, #56]	@ 0x38
 8008c2c:	2800      	cmp	r0, #0
 8008c2e:	f43f ae8a 	beq.w	8008946 <_strtod_l+0x43e>
 8008c32:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008c34:	9805      	ldr	r0, [sp, #20]
 8008c36:	f7fe ffd7 	bl	8007be8 <_Bfree>
 8008c3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c3c:	931a      	str	r3, [sp, #104]	@ 0x68
 8008c3e:	2d00      	cmp	r5, #0
 8008c40:	dc1d      	bgt.n	8008c7e <_strtod_l+0x776>
 8008c42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	dd23      	ble.n	8008c90 <_strtod_l+0x788>
 8008c48:	4649      	mov	r1, r9
 8008c4a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008c4c:	9805      	ldr	r0, [sp, #20]
 8008c4e:	f7ff f989 	bl	8007f64 <__pow5mult>
 8008c52:	4681      	mov	r9, r0
 8008c54:	b9e0      	cbnz	r0, 8008c90 <_strtod_l+0x788>
 8008c56:	f04f 0900 	mov.w	r9, #0
 8008c5a:	e674      	b.n	8008946 <_strtod_l+0x43e>
 8008c5c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008c60:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008c64:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008c68:	35e2      	adds	r5, #226	@ 0xe2
 8008c6a:	fa01 f305 	lsl.w	r3, r1, r5
 8008c6e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008c70:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008c72:	e7ba      	b.n	8008bea <_strtod_l+0x6e2>
 8008c74:	2300      	movs	r3, #0
 8008c76:	9310      	str	r3, [sp, #64]	@ 0x40
 8008c78:	2301      	movs	r3, #1
 8008c7a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008c7c:	e7b5      	b.n	8008bea <_strtod_l+0x6e2>
 8008c7e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008c80:	9805      	ldr	r0, [sp, #20]
 8008c82:	462a      	mov	r2, r5
 8008c84:	f7ff f9c8 	bl	8008018 <__lshift>
 8008c88:	901a      	str	r0, [sp, #104]	@ 0x68
 8008c8a:	2800      	cmp	r0, #0
 8008c8c:	d1d9      	bne.n	8008c42 <_strtod_l+0x73a>
 8008c8e:	e65a      	b.n	8008946 <_strtod_l+0x43e>
 8008c90:	2e00      	cmp	r6, #0
 8008c92:	dd07      	ble.n	8008ca4 <_strtod_l+0x79c>
 8008c94:	4649      	mov	r1, r9
 8008c96:	9805      	ldr	r0, [sp, #20]
 8008c98:	4632      	mov	r2, r6
 8008c9a:	f7ff f9bd 	bl	8008018 <__lshift>
 8008c9e:	4681      	mov	r9, r0
 8008ca0:	2800      	cmp	r0, #0
 8008ca2:	d0d8      	beq.n	8008c56 <_strtod_l+0x74e>
 8008ca4:	2f00      	cmp	r7, #0
 8008ca6:	dd08      	ble.n	8008cba <_strtod_l+0x7b2>
 8008ca8:	4641      	mov	r1, r8
 8008caa:	9805      	ldr	r0, [sp, #20]
 8008cac:	463a      	mov	r2, r7
 8008cae:	f7ff f9b3 	bl	8008018 <__lshift>
 8008cb2:	4680      	mov	r8, r0
 8008cb4:	2800      	cmp	r0, #0
 8008cb6:	f43f ae46 	beq.w	8008946 <_strtod_l+0x43e>
 8008cba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008cbc:	9805      	ldr	r0, [sp, #20]
 8008cbe:	464a      	mov	r2, r9
 8008cc0:	f7ff fa32 	bl	8008128 <__mdiff>
 8008cc4:	4604      	mov	r4, r0
 8008cc6:	2800      	cmp	r0, #0
 8008cc8:	f43f ae3d 	beq.w	8008946 <_strtod_l+0x43e>
 8008ccc:	68c3      	ldr	r3, [r0, #12]
 8008cce:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	60c3      	str	r3, [r0, #12]
 8008cd4:	4641      	mov	r1, r8
 8008cd6:	f7ff fa0b 	bl	80080f0 <__mcmp>
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	da46      	bge.n	8008d6c <_strtod_l+0x864>
 8008cde:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ce0:	ea53 030a 	orrs.w	r3, r3, sl
 8008ce4:	d16c      	bne.n	8008dc0 <_strtod_l+0x8b8>
 8008ce6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d168      	bne.n	8008dc0 <_strtod_l+0x8b8>
 8008cee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008cf2:	0d1b      	lsrs	r3, r3, #20
 8008cf4:	051b      	lsls	r3, r3, #20
 8008cf6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008cfa:	d961      	bls.n	8008dc0 <_strtod_l+0x8b8>
 8008cfc:	6963      	ldr	r3, [r4, #20]
 8008cfe:	b913      	cbnz	r3, 8008d06 <_strtod_l+0x7fe>
 8008d00:	6923      	ldr	r3, [r4, #16]
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	dd5c      	ble.n	8008dc0 <_strtod_l+0x8b8>
 8008d06:	4621      	mov	r1, r4
 8008d08:	2201      	movs	r2, #1
 8008d0a:	9805      	ldr	r0, [sp, #20]
 8008d0c:	f7ff f984 	bl	8008018 <__lshift>
 8008d10:	4641      	mov	r1, r8
 8008d12:	4604      	mov	r4, r0
 8008d14:	f7ff f9ec 	bl	80080f0 <__mcmp>
 8008d18:	2800      	cmp	r0, #0
 8008d1a:	dd51      	ble.n	8008dc0 <_strtod_l+0x8b8>
 8008d1c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008d20:	9a08      	ldr	r2, [sp, #32]
 8008d22:	0d1b      	lsrs	r3, r3, #20
 8008d24:	051b      	lsls	r3, r3, #20
 8008d26:	2a00      	cmp	r2, #0
 8008d28:	d06b      	beq.n	8008e02 <_strtod_l+0x8fa>
 8008d2a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008d2e:	d868      	bhi.n	8008e02 <_strtod_l+0x8fa>
 8008d30:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008d34:	f67f ae9d 	bls.w	8008a72 <_strtod_l+0x56a>
 8008d38:	4b0a      	ldr	r3, [pc, #40]	@ (8008d64 <_strtod_l+0x85c>)
 8008d3a:	4650      	mov	r0, sl
 8008d3c:	4659      	mov	r1, fp
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f7f7 fc6a 	bl	8000618 <__aeabi_dmul>
 8008d44:	4b08      	ldr	r3, [pc, #32]	@ (8008d68 <_strtod_l+0x860>)
 8008d46:	400b      	ands	r3, r1
 8008d48:	4682      	mov	sl, r0
 8008d4a:	468b      	mov	fp, r1
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	f47f ae05 	bne.w	800895c <_strtod_l+0x454>
 8008d52:	9a05      	ldr	r2, [sp, #20]
 8008d54:	2322      	movs	r3, #34	@ 0x22
 8008d56:	6013      	str	r3, [r2, #0]
 8008d58:	e600      	b.n	800895c <_strtod_l+0x454>
 8008d5a:	bf00      	nop
 8008d5c:	0800a6a8 	.word	0x0800a6a8
 8008d60:	fffffc02 	.word	0xfffffc02
 8008d64:	39500000 	.word	0x39500000
 8008d68:	7ff00000 	.word	0x7ff00000
 8008d6c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008d70:	d165      	bne.n	8008e3e <_strtod_l+0x936>
 8008d72:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008d74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008d78:	b35a      	cbz	r2, 8008dd2 <_strtod_l+0x8ca>
 8008d7a:	4a9f      	ldr	r2, [pc, #636]	@ (8008ff8 <_strtod_l+0xaf0>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d12b      	bne.n	8008dd8 <_strtod_l+0x8d0>
 8008d80:	9b08      	ldr	r3, [sp, #32]
 8008d82:	4651      	mov	r1, sl
 8008d84:	b303      	cbz	r3, 8008dc8 <_strtod_l+0x8c0>
 8008d86:	4b9d      	ldr	r3, [pc, #628]	@ (8008ffc <_strtod_l+0xaf4>)
 8008d88:	465a      	mov	r2, fp
 8008d8a:	4013      	ands	r3, r2
 8008d8c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008d90:	f04f 32ff 	mov.w	r2, #4294967295
 8008d94:	d81b      	bhi.n	8008dce <_strtod_l+0x8c6>
 8008d96:	0d1b      	lsrs	r3, r3, #20
 8008d98:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8008da0:	4299      	cmp	r1, r3
 8008da2:	d119      	bne.n	8008dd8 <_strtod_l+0x8d0>
 8008da4:	4b96      	ldr	r3, [pc, #600]	@ (8009000 <_strtod_l+0xaf8>)
 8008da6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008da8:	429a      	cmp	r2, r3
 8008daa:	d102      	bne.n	8008db2 <_strtod_l+0x8aa>
 8008dac:	3101      	adds	r1, #1
 8008dae:	f43f adca 	beq.w	8008946 <_strtod_l+0x43e>
 8008db2:	4b92      	ldr	r3, [pc, #584]	@ (8008ffc <_strtod_l+0xaf4>)
 8008db4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008db6:	401a      	ands	r2, r3
 8008db8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008dbc:	f04f 0a00 	mov.w	sl, #0
 8008dc0:	9b08      	ldr	r3, [sp, #32]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d1b8      	bne.n	8008d38 <_strtod_l+0x830>
 8008dc6:	e5c9      	b.n	800895c <_strtod_l+0x454>
 8008dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8008dcc:	e7e8      	b.n	8008da0 <_strtod_l+0x898>
 8008dce:	4613      	mov	r3, r2
 8008dd0:	e7e6      	b.n	8008da0 <_strtod_l+0x898>
 8008dd2:	ea53 030a 	orrs.w	r3, r3, sl
 8008dd6:	d0a1      	beq.n	8008d1c <_strtod_l+0x814>
 8008dd8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008dda:	b1db      	cbz	r3, 8008e14 <_strtod_l+0x90c>
 8008ddc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008dde:	4213      	tst	r3, r2
 8008de0:	d0ee      	beq.n	8008dc0 <_strtod_l+0x8b8>
 8008de2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008de4:	9a08      	ldr	r2, [sp, #32]
 8008de6:	4650      	mov	r0, sl
 8008de8:	4659      	mov	r1, fp
 8008dea:	b1bb      	cbz	r3, 8008e1c <_strtod_l+0x914>
 8008dec:	f7ff fb6e 	bl	80084cc <sulp>
 8008df0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008df4:	ec53 2b10 	vmov	r2, r3, d0
 8008df8:	f7f7 fa58 	bl	80002ac <__adddf3>
 8008dfc:	4682      	mov	sl, r0
 8008dfe:	468b      	mov	fp, r1
 8008e00:	e7de      	b.n	8008dc0 <_strtod_l+0x8b8>
 8008e02:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008e06:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008e0a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008e0e:	f04f 3aff 	mov.w	sl, #4294967295
 8008e12:	e7d5      	b.n	8008dc0 <_strtod_l+0x8b8>
 8008e14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008e16:	ea13 0f0a 	tst.w	r3, sl
 8008e1a:	e7e1      	b.n	8008de0 <_strtod_l+0x8d8>
 8008e1c:	f7ff fb56 	bl	80084cc <sulp>
 8008e20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008e24:	ec53 2b10 	vmov	r2, r3, d0
 8008e28:	f7f7 fa3e 	bl	80002a8 <__aeabi_dsub>
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	2300      	movs	r3, #0
 8008e30:	4682      	mov	sl, r0
 8008e32:	468b      	mov	fp, r1
 8008e34:	f7f7 fe58 	bl	8000ae8 <__aeabi_dcmpeq>
 8008e38:	2800      	cmp	r0, #0
 8008e3a:	d0c1      	beq.n	8008dc0 <_strtod_l+0x8b8>
 8008e3c:	e619      	b.n	8008a72 <_strtod_l+0x56a>
 8008e3e:	4641      	mov	r1, r8
 8008e40:	4620      	mov	r0, r4
 8008e42:	f7ff facd 	bl	80083e0 <__ratio>
 8008e46:	ec57 6b10 	vmov	r6, r7, d0
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008e50:	4630      	mov	r0, r6
 8008e52:	4639      	mov	r1, r7
 8008e54:	f7f7 fe5c 	bl	8000b10 <__aeabi_dcmple>
 8008e58:	2800      	cmp	r0, #0
 8008e5a:	d06f      	beq.n	8008f3c <_strtod_l+0xa34>
 8008e5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d17a      	bne.n	8008f58 <_strtod_l+0xa50>
 8008e62:	f1ba 0f00 	cmp.w	sl, #0
 8008e66:	d158      	bne.n	8008f1a <_strtod_l+0xa12>
 8008e68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d15a      	bne.n	8008f28 <_strtod_l+0xa20>
 8008e72:	4b64      	ldr	r3, [pc, #400]	@ (8009004 <_strtod_l+0xafc>)
 8008e74:	2200      	movs	r2, #0
 8008e76:	4630      	mov	r0, r6
 8008e78:	4639      	mov	r1, r7
 8008e7a:	f7f7 fe3f 	bl	8000afc <__aeabi_dcmplt>
 8008e7e:	2800      	cmp	r0, #0
 8008e80:	d159      	bne.n	8008f36 <_strtod_l+0xa2e>
 8008e82:	4630      	mov	r0, r6
 8008e84:	4639      	mov	r1, r7
 8008e86:	4b60      	ldr	r3, [pc, #384]	@ (8009008 <_strtod_l+0xb00>)
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f7f7 fbc5 	bl	8000618 <__aeabi_dmul>
 8008e8e:	4606      	mov	r6, r0
 8008e90:	460f      	mov	r7, r1
 8008e92:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008e96:	9606      	str	r6, [sp, #24]
 8008e98:	9307      	str	r3, [sp, #28]
 8008e9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e9e:	4d57      	ldr	r5, [pc, #348]	@ (8008ffc <_strtod_l+0xaf4>)
 8008ea0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008ea4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ea6:	401d      	ands	r5, r3
 8008ea8:	4b58      	ldr	r3, [pc, #352]	@ (800900c <_strtod_l+0xb04>)
 8008eaa:	429d      	cmp	r5, r3
 8008eac:	f040 80b2 	bne.w	8009014 <_strtod_l+0xb0c>
 8008eb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008eb2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008eb6:	ec4b ab10 	vmov	d0, sl, fp
 8008eba:	f7ff f9c9 	bl	8008250 <__ulp>
 8008ebe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ec2:	ec51 0b10 	vmov	r0, r1, d0
 8008ec6:	f7f7 fba7 	bl	8000618 <__aeabi_dmul>
 8008eca:	4652      	mov	r2, sl
 8008ecc:	465b      	mov	r3, fp
 8008ece:	f7f7 f9ed 	bl	80002ac <__adddf3>
 8008ed2:	460b      	mov	r3, r1
 8008ed4:	4949      	ldr	r1, [pc, #292]	@ (8008ffc <_strtod_l+0xaf4>)
 8008ed6:	4a4e      	ldr	r2, [pc, #312]	@ (8009010 <_strtod_l+0xb08>)
 8008ed8:	4019      	ands	r1, r3
 8008eda:	4291      	cmp	r1, r2
 8008edc:	4682      	mov	sl, r0
 8008ede:	d942      	bls.n	8008f66 <_strtod_l+0xa5e>
 8008ee0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008ee2:	4b47      	ldr	r3, [pc, #284]	@ (8009000 <_strtod_l+0xaf8>)
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d103      	bne.n	8008ef0 <_strtod_l+0x9e8>
 8008ee8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008eea:	3301      	adds	r3, #1
 8008eec:	f43f ad2b 	beq.w	8008946 <_strtod_l+0x43e>
 8008ef0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009000 <_strtod_l+0xaf8>
 8008ef4:	f04f 3aff 	mov.w	sl, #4294967295
 8008ef8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008efa:	9805      	ldr	r0, [sp, #20]
 8008efc:	f7fe fe74 	bl	8007be8 <_Bfree>
 8008f00:	9805      	ldr	r0, [sp, #20]
 8008f02:	4649      	mov	r1, r9
 8008f04:	f7fe fe70 	bl	8007be8 <_Bfree>
 8008f08:	9805      	ldr	r0, [sp, #20]
 8008f0a:	4641      	mov	r1, r8
 8008f0c:	f7fe fe6c 	bl	8007be8 <_Bfree>
 8008f10:	9805      	ldr	r0, [sp, #20]
 8008f12:	4621      	mov	r1, r4
 8008f14:	f7fe fe68 	bl	8007be8 <_Bfree>
 8008f18:	e618      	b.n	8008b4c <_strtod_l+0x644>
 8008f1a:	f1ba 0f01 	cmp.w	sl, #1
 8008f1e:	d103      	bne.n	8008f28 <_strtod_l+0xa20>
 8008f20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	f43f ada5 	beq.w	8008a72 <_strtod_l+0x56a>
 8008f28:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008fd8 <_strtod_l+0xad0>
 8008f2c:	4f35      	ldr	r7, [pc, #212]	@ (8009004 <_strtod_l+0xafc>)
 8008f2e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008f32:	2600      	movs	r6, #0
 8008f34:	e7b1      	b.n	8008e9a <_strtod_l+0x992>
 8008f36:	4f34      	ldr	r7, [pc, #208]	@ (8009008 <_strtod_l+0xb00>)
 8008f38:	2600      	movs	r6, #0
 8008f3a:	e7aa      	b.n	8008e92 <_strtod_l+0x98a>
 8008f3c:	4b32      	ldr	r3, [pc, #200]	@ (8009008 <_strtod_l+0xb00>)
 8008f3e:	4630      	mov	r0, r6
 8008f40:	4639      	mov	r1, r7
 8008f42:	2200      	movs	r2, #0
 8008f44:	f7f7 fb68 	bl	8000618 <__aeabi_dmul>
 8008f48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f4a:	4606      	mov	r6, r0
 8008f4c:	460f      	mov	r7, r1
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d09f      	beq.n	8008e92 <_strtod_l+0x98a>
 8008f52:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008f56:	e7a0      	b.n	8008e9a <_strtod_l+0x992>
 8008f58:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008fe0 <_strtod_l+0xad8>
 8008f5c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008f60:	ec57 6b17 	vmov	r6, r7, d7
 8008f64:	e799      	b.n	8008e9a <_strtod_l+0x992>
 8008f66:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008f6a:	9b08      	ldr	r3, [sp, #32]
 8008f6c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d1c1      	bne.n	8008ef8 <_strtod_l+0x9f0>
 8008f74:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008f78:	0d1b      	lsrs	r3, r3, #20
 8008f7a:	051b      	lsls	r3, r3, #20
 8008f7c:	429d      	cmp	r5, r3
 8008f7e:	d1bb      	bne.n	8008ef8 <_strtod_l+0x9f0>
 8008f80:	4630      	mov	r0, r6
 8008f82:	4639      	mov	r1, r7
 8008f84:	f7f7 ffb6 	bl	8000ef4 <__aeabi_d2lz>
 8008f88:	f7f7 fb18 	bl	80005bc <__aeabi_l2d>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	460b      	mov	r3, r1
 8008f90:	4630      	mov	r0, r6
 8008f92:	4639      	mov	r1, r7
 8008f94:	f7f7 f988 	bl	80002a8 <__aeabi_dsub>
 8008f98:	460b      	mov	r3, r1
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008fa0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008fa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fa6:	ea46 060a 	orr.w	r6, r6, sl
 8008faa:	431e      	orrs	r6, r3
 8008fac:	d06f      	beq.n	800908e <_strtod_l+0xb86>
 8008fae:	a30e      	add	r3, pc, #56	@ (adr r3, 8008fe8 <_strtod_l+0xae0>)
 8008fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb4:	f7f7 fda2 	bl	8000afc <__aeabi_dcmplt>
 8008fb8:	2800      	cmp	r0, #0
 8008fba:	f47f accf 	bne.w	800895c <_strtod_l+0x454>
 8008fbe:	a30c      	add	r3, pc, #48	@ (adr r3, 8008ff0 <_strtod_l+0xae8>)
 8008fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008fc8:	f7f7 fdb6 	bl	8000b38 <__aeabi_dcmpgt>
 8008fcc:	2800      	cmp	r0, #0
 8008fce:	d093      	beq.n	8008ef8 <_strtod_l+0x9f0>
 8008fd0:	e4c4      	b.n	800895c <_strtod_l+0x454>
 8008fd2:	bf00      	nop
 8008fd4:	f3af 8000 	nop.w
 8008fd8:	00000000 	.word	0x00000000
 8008fdc:	bff00000 	.word	0xbff00000
 8008fe0:	00000000 	.word	0x00000000
 8008fe4:	3ff00000 	.word	0x3ff00000
 8008fe8:	94a03595 	.word	0x94a03595
 8008fec:	3fdfffff 	.word	0x3fdfffff
 8008ff0:	35afe535 	.word	0x35afe535
 8008ff4:	3fe00000 	.word	0x3fe00000
 8008ff8:	000fffff 	.word	0x000fffff
 8008ffc:	7ff00000 	.word	0x7ff00000
 8009000:	7fefffff 	.word	0x7fefffff
 8009004:	3ff00000 	.word	0x3ff00000
 8009008:	3fe00000 	.word	0x3fe00000
 800900c:	7fe00000 	.word	0x7fe00000
 8009010:	7c9fffff 	.word	0x7c9fffff
 8009014:	9b08      	ldr	r3, [sp, #32]
 8009016:	b323      	cbz	r3, 8009062 <_strtod_l+0xb5a>
 8009018:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800901c:	d821      	bhi.n	8009062 <_strtod_l+0xb5a>
 800901e:	a328      	add	r3, pc, #160	@ (adr r3, 80090c0 <_strtod_l+0xbb8>)
 8009020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009024:	4630      	mov	r0, r6
 8009026:	4639      	mov	r1, r7
 8009028:	f7f7 fd72 	bl	8000b10 <__aeabi_dcmple>
 800902c:	b1a0      	cbz	r0, 8009058 <_strtod_l+0xb50>
 800902e:	4639      	mov	r1, r7
 8009030:	4630      	mov	r0, r6
 8009032:	f7f7 fdc9 	bl	8000bc8 <__aeabi_d2uiz>
 8009036:	2801      	cmp	r0, #1
 8009038:	bf38      	it	cc
 800903a:	2001      	movcc	r0, #1
 800903c:	f7f7 fa72 	bl	8000524 <__aeabi_ui2d>
 8009040:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009042:	4606      	mov	r6, r0
 8009044:	460f      	mov	r7, r1
 8009046:	b9fb      	cbnz	r3, 8009088 <_strtod_l+0xb80>
 8009048:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800904c:	9014      	str	r0, [sp, #80]	@ 0x50
 800904e:	9315      	str	r3, [sp, #84]	@ 0x54
 8009050:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009054:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009058:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800905a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800905e:	1b5b      	subs	r3, r3, r5
 8009060:	9311      	str	r3, [sp, #68]	@ 0x44
 8009062:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009066:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800906a:	f7ff f8f1 	bl	8008250 <__ulp>
 800906e:	4650      	mov	r0, sl
 8009070:	ec53 2b10 	vmov	r2, r3, d0
 8009074:	4659      	mov	r1, fp
 8009076:	f7f7 facf 	bl	8000618 <__aeabi_dmul>
 800907a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800907e:	f7f7 f915 	bl	80002ac <__adddf3>
 8009082:	4682      	mov	sl, r0
 8009084:	468b      	mov	fp, r1
 8009086:	e770      	b.n	8008f6a <_strtod_l+0xa62>
 8009088:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800908c:	e7e0      	b.n	8009050 <_strtod_l+0xb48>
 800908e:	a30e      	add	r3, pc, #56	@ (adr r3, 80090c8 <_strtod_l+0xbc0>)
 8009090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009094:	f7f7 fd32 	bl	8000afc <__aeabi_dcmplt>
 8009098:	e798      	b.n	8008fcc <_strtod_l+0xac4>
 800909a:	2300      	movs	r3, #0
 800909c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800909e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80090a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80090a2:	6013      	str	r3, [r2, #0]
 80090a4:	f7ff ba6d 	b.w	8008582 <_strtod_l+0x7a>
 80090a8:	2a65      	cmp	r2, #101	@ 0x65
 80090aa:	f43f ab66 	beq.w	800877a <_strtod_l+0x272>
 80090ae:	2a45      	cmp	r2, #69	@ 0x45
 80090b0:	f43f ab63 	beq.w	800877a <_strtod_l+0x272>
 80090b4:	2301      	movs	r3, #1
 80090b6:	f7ff bb9e 	b.w	80087f6 <_strtod_l+0x2ee>
 80090ba:	bf00      	nop
 80090bc:	f3af 8000 	nop.w
 80090c0:	ffc00000 	.word	0xffc00000
 80090c4:	41dfffff 	.word	0x41dfffff
 80090c8:	94a03595 	.word	0x94a03595
 80090cc:	3fcfffff 	.word	0x3fcfffff

080090d0 <_strtod_r>:
 80090d0:	4b01      	ldr	r3, [pc, #4]	@ (80090d8 <_strtod_r+0x8>)
 80090d2:	f7ff ba19 	b.w	8008508 <_strtod_l>
 80090d6:	bf00      	nop
 80090d8:	20000068 	.word	0x20000068

080090dc <_strtol_l.constprop.0>:
 80090dc:	2b24      	cmp	r3, #36	@ 0x24
 80090de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090e2:	4686      	mov	lr, r0
 80090e4:	4690      	mov	r8, r2
 80090e6:	d801      	bhi.n	80090ec <_strtol_l.constprop.0+0x10>
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d106      	bne.n	80090fa <_strtol_l.constprop.0+0x1e>
 80090ec:	f7fd fdbc 	bl	8006c68 <__errno>
 80090f0:	2316      	movs	r3, #22
 80090f2:	6003      	str	r3, [r0, #0]
 80090f4:	2000      	movs	r0, #0
 80090f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090fa:	4834      	ldr	r0, [pc, #208]	@ (80091cc <_strtol_l.constprop.0+0xf0>)
 80090fc:	460d      	mov	r5, r1
 80090fe:	462a      	mov	r2, r5
 8009100:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009104:	5d06      	ldrb	r6, [r0, r4]
 8009106:	f016 0608 	ands.w	r6, r6, #8
 800910a:	d1f8      	bne.n	80090fe <_strtol_l.constprop.0+0x22>
 800910c:	2c2d      	cmp	r4, #45	@ 0x2d
 800910e:	d12d      	bne.n	800916c <_strtol_l.constprop.0+0x90>
 8009110:	782c      	ldrb	r4, [r5, #0]
 8009112:	2601      	movs	r6, #1
 8009114:	1c95      	adds	r5, r2, #2
 8009116:	f033 0210 	bics.w	r2, r3, #16
 800911a:	d109      	bne.n	8009130 <_strtol_l.constprop.0+0x54>
 800911c:	2c30      	cmp	r4, #48	@ 0x30
 800911e:	d12a      	bne.n	8009176 <_strtol_l.constprop.0+0x9a>
 8009120:	782a      	ldrb	r2, [r5, #0]
 8009122:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009126:	2a58      	cmp	r2, #88	@ 0x58
 8009128:	d125      	bne.n	8009176 <_strtol_l.constprop.0+0x9a>
 800912a:	786c      	ldrb	r4, [r5, #1]
 800912c:	2310      	movs	r3, #16
 800912e:	3502      	adds	r5, #2
 8009130:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009134:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009138:	2200      	movs	r2, #0
 800913a:	fbbc f9f3 	udiv	r9, ip, r3
 800913e:	4610      	mov	r0, r2
 8009140:	fb03 ca19 	mls	sl, r3, r9, ip
 8009144:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009148:	2f09      	cmp	r7, #9
 800914a:	d81b      	bhi.n	8009184 <_strtol_l.constprop.0+0xa8>
 800914c:	463c      	mov	r4, r7
 800914e:	42a3      	cmp	r3, r4
 8009150:	dd27      	ble.n	80091a2 <_strtol_l.constprop.0+0xc6>
 8009152:	1c57      	adds	r7, r2, #1
 8009154:	d007      	beq.n	8009166 <_strtol_l.constprop.0+0x8a>
 8009156:	4581      	cmp	r9, r0
 8009158:	d320      	bcc.n	800919c <_strtol_l.constprop.0+0xc0>
 800915a:	d101      	bne.n	8009160 <_strtol_l.constprop.0+0x84>
 800915c:	45a2      	cmp	sl, r4
 800915e:	db1d      	blt.n	800919c <_strtol_l.constprop.0+0xc0>
 8009160:	fb00 4003 	mla	r0, r0, r3, r4
 8009164:	2201      	movs	r2, #1
 8009166:	f815 4b01 	ldrb.w	r4, [r5], #1
 800916a:	e7eb      	b.n	8009144 <_strtol_l.constprop.0+0x68>
 800916c:	2c2b      	cmp	r4, #43	@ 0x2b
 800916e:	bf04      	itt	eq
 8009170:	782c      	ldrbeq	r4, [r5, #0]
 8009172:	1c95      	addeq	r5, r2, #2
 8009174:	e7cf      	b.n	8009116 <_strtol_l.constprop.0+0x3a>
 8009176:	2b00      	cmp	r3, #0
 8009178:	d1da      	bne.n	8009130 <_strtol_l.constprop.0+0x54>
 800917a:	2c30      	cmp	r4, #48	@ 0x30
 800917c:	bf0c      	ite	eq
 800917e:	2308      	moveq	r3, #8
 8009180:	230a      	movne	r3, #10
 8009182:	e7d5      	b.n	8009130 <_strtol_l.constprop.0+0x54>
 8009184:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009188:	2f19      	cmp	r7, #25
 800918a:	d801      	bhi.n	8009190 <_strtol_l.constprop.0+0xb4>
 800918c:	3c37      	subs	r4, #55	@ 0x37
 800918e:	e7de      	b.n	800914e <_strtol_l.constprop.0+0x72>
 8009190:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009194:	2f19      	cmp	r7, #25
 8009196:	d804      	bhi.n	80091a2 <_strtol_l.constprop.0+0xc6>
 8009198:	3c57      	subs	r4, #87	@ 0x57
 800919a:	e7d8      	b.n	800914e <_strtol_l.constprop.0+0x72>
 800919c:	f04f 32ff 	mov.w	r2, #4294967295
 80091a0:	e7e1      	b.n	8009166 <_strtol_l.constprop.0+0x8a>
 80091a2:	1c53      	adds	r3, r2, #1
 80091a4:	d108      	bne.n	80091b8 <_strtol_l.constprop.0+0xdc>
 80091a6:	2322      	movs	r3, #34	@ 0x22
 80091a8:	f8ce 3000 	str.w	r3, [lr]
 80091ac:	4660      	mov	r0, ip
 80091ae:	f1b8 0f00 	cmp.w	r8, #0
 80091b2:	d0a0      	beq.n	80090f6 <_strtol_l.constprop.0+0x1a>
 80091b4:	1e69      	subs	r1, r5, #1
 80091b6:	e006      	b.n	80091c6 <_strtol_l.constprop.0+0xea>
 80091b8:	b106      	cbz	r6, 80091bc <_strtol_l.constprop.0+0xe0>
 80091ba:	4240      	negs	r0, r0
 80091bc:	f1b8 0f00 	cmp.w	r8, #0
 80091c0:	d099      	beq.n	80090f6 <_strtol_l.constprop.0+0x1a>
 80091c2:	2a00      	cmp	r2, #0
 80091c4:	d1f6      	bne.n	80091b4 <_strtol_l.constprop.0+0xd8>
 80091c6:	f8c8 1000 	str.w	r1, [r8]
 80091ca:	e794      	b.n	80090f6 <_strtol_l.constprop.0+0x1a>
 80091cc:	0800a6d1 	.word	0x0800a6d1

080091d0 <_strtol_r>:
 80091d0:	f7ff bf84 	b.w	80090dc <_strtol_l.constprop.0>

080091d4 <__ssputs_r>:
 80091d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091d8:	688e      	ldr	r6, [r1, #8]
 80091da:	461f      	mov	r7, r3
 80091dc:	42be      	cmp	r6, r7
 80091de:	680b      	ldr	r3, [r1, #0]
 80091e0:	4682      	mov	sl, r0
 80091e2:	460c      	mov	r4, r1
 80091e4:	4690      	mov	r8, r2
 80091e6:	d82d      	bhi.n	8009244 <__ssputs_r+0x70>
 80091e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80091ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80091f0:	d026      	beq.n	8009240 <__ssputs_r+0x6c>
 80091f2:	6965      	ldr	r5, [r4, #20]
 80091f4:	6909      	ldr	r1, [r1, #16]
 80091f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80091fa:	eba3 0901 	sub.w	r9, r3, r1
 80091fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009202:	1c7b      	adds	r3, r7, #1
 8009204:	444b      	add	r3, r9
 8009206:	106d      	asrs	r5, r5, #1
 8009208:	429d      	cmp	r5, r3
 800920a:	bf38      	it	cc
 800920c:	461d      	movcc	r5, r3
 800920e:	0553      	lsls	r3, r2, #21
 8009210:	d527      	bpl.n	8009262 <__ssputs_r+0x8e>
 8009212:	4629      	mov	r1, r5
 8009214:	f7fe fc1c 	bl	8007a50 <_malloc_r>
 8009218:	4606      	mov	r6, r0
 800921a:	b360      	cbz	r0, 8009276 <__ssputs_r+0xa2>
 800921c:	6921      	ldr	r1, [r4, #16]
 800921e:	464a      	mov	r2, r9
 8009220:	f000 fa18 	bl	8009654 <memcpy>
 8009224:	89a3      	ldrh	r3, [r4, #12]
 8009226:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800922a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800922e:	81a3      	strh	r3, [r4, #12]
 8009230:	6126      	str	r6, [r4, #16]
 8009232:	6165      	str	r5, [r4, #20]
 8009234:	444e      	add	r6, r9
 8009236:	eba5 0509 	sub.w	r5, r5, r9
 800923a:	6026      	str	r6, [r4, #0]
 800923c:	60a5      	str	r5, [r4, #8]
 800923e:	463e      	mov	r6, r7
 8009240:	42be      	cmp	r6, r7
 8009242:	d900      	bls.n	8009246 <__ssputs_r+0x72>
 8009244:	463e      	mov	r6, r7
 8009246:	6820      	ldr	r0, [r4, #0]
 8009248:	4632      	mov	r2, r6
 800924a:	4641      	mov	r1, r8
 800924c:	f000 f9c6 	bl	80095dc <memmove>
 8009250:	68a3      	ldr	r3, [r4, #8]
 8009252:	1b9b      	subs	r3, r3, r6
 8009254:	60a3      	str	r3, [r4, #8]
 8009256:	6823      	ldr	r3, [r4, #0]
 8009258:	4433      	add	r3, r6
 800925a:	6023      	str	r3, [r4, #0]
 800925c:	2000      	movs	r0, #0
 800925e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009262:	462a      	mov	r2, r5
 8009264:	f000 fd89 	bl	8009d7a <_realloc_r>
 8009268:	4606      	mov	r6, r0
 800926a:	2800      	cmp	r0, #0
 800926c:	d1e0      	bne.n	8009230 <__ssputs_r+0x5c>
 800926e:	6921      	ldr	r1, [r4, #16]
 8009270:	4650      	mov	r0, sl
 8009272:	f7fe fb79 	bl	8007968 <_free_r>
 8009276:	230c      	movs	r3, #12
 8009278:	f8ca 3000 	str.w	r3, [sl]
 800927c:	89a3      	ldrh	r3, [r4, #12]
 800927e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009282:	81a3      	strh	r3, [r4, #12]
 8009284:	f04f 30ff 	mov.w	r0, #4294967295
 8009288:	e7e9      	b.n	800925e <__ssputs_r+0x8a>
	...

0800928c <_svfiprintf_r>:
 800928c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009290:	4698      	mov	r8, r3
 8009292:	898b      	ldrh	r3, [r1, #12]
 8009294:	061b      	lsls	r3, r3, #24
 8009296:	b09d      	sub	sp, #116	@ 0x74
 8009298:	4607      	mov	r7, r0
 800929a:	460d      	mov	r5, r1
 800929c:	4614      	mov	r4, r2
 800929e:	d510      	bpl.n	80092c2 <_svfiprintf_r+0x36>
 80092a0:	690b      	ldr	r3, [r1, #16]
 80092a2:	b973      	cbnz	r3, 80092c2 <_svfiprintf_r+0x36>
 80092a4:	2140      	movs	r1, #64	@ 0x40
 80092a6:	f7fe fbd3 	bl	8007a50 <_malloc_r>
 80092aa:	6028      	str	r0, [r5, #0]
 80092ac:	6128      	str	r0, [r5, #16]
 80092ae:	b930      	cbnz	r0, 80092be <_svfiprintf_r+0x32>
 80092b0:	230c      	movs	r3, #12
 80092b2:	603b      	str	r3, [r7, #0]
 80092b4:	f04f 30ff 	mov.w	r0, #4294967295
 80092b8:	b01d      	add	sp, #116	@ 0x74
 80092ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092be:	2340      	movs	r3, #64	@ 0x40
 80092c0:	616b      	str	r3, [r5, #20]
 80092c2:	2300      	movs	r3, #0
 80092c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80092c6:	2320      	movs	r3, #32
 80092c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80092cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80092d0:	2330      	movs	r3, #48	@ 0x30
 80092d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009470 <_svfiprintf_r+0x1e4>
 80092d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80092da:	f04f 0901 	mov.w	r9, #1
 80092de:	4623      	mov	r3, r4
 80092e0:	469a      	mov	sl, r3
 80092e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092e6:	b10a      	cbz	r2, 80092ec <_svfiprintf_r+0x60>
 80092e8:	2a25      	cmp	r2, #37	@ 0x25
 80092ea:	d1f9      	bne.n	80092e0 <_svfiprintf_r+0x54>
 80092ec:	ebba 0b04 	subs.w	fp, sl, r4
 80092f0:	d00b      	beq.n	800930a <_svfiprintf_r+0x7e>
 80092f2:	465b      	mov	r3, fp
 80092f4:	4622      	mov	r2, r4
 80092f6:	4629      	mov	r1, r5
 80092f8:	4638      	mov	r0, r7
 80092fa:	f7ff ff6b 	bl	80091d4 <__ssputs_r>
 80092fe:	3001      	adds	r0, #1
 8009300:	f000 80a7 	beq.w	8009452 <_svfiprintf_r+0x1c6>
 8009304:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009306:	445a      	add	r2, fp
 8009308:	9209      	str	r2, [sp, #36]	@ 0x24
 800930a:	f89a 3000 	ldrb.w	r3, [sl]
 800930e:	2b00      	cmp	r3, #0
 8009310:	f000 809f 	beq.w	8009452 <_svfiprintf_r+0x1c6>
 8009314:	2300      	movs	r3, #0
 8009316:	f04f 32ff 	mov.w	r2, #4294967295
 800931a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800931e:	f10a 0a01 	add.w	sl, sl, #1
 8009322:	9304      	str	r3, [sp, #16]
 8009324:	9307      	str	r3, [sp, #28]
 8009326:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800932a:	931a      	str	r3, [sp, #104]	@ 0x68
 800932c:	4654      	mov	r4, sl
 800932e:	2205      	movs	r2, #5
 8009330:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009334:	484e      	ldr	r0, [pc, #312]	@ (8009470 <_svfiprintf_r+0x1e4>)
 8009336:	f7f6 ff5b 	bl	80001f0 <memchr>
 800933a:	9a04      	ldr	r2, [sp, #16]
 800933c:	b9d8      	cbnz	r0, 8009376 <_svfiprintf_r+0xea>
 800933e:	06d0      	lsls	r0, r2, #27
 8009340:	bf44      	itt	mi
 8009342:	2320      	movmi	r3, #32
 8009344:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009348:	0711      	lsls	r1, r2, #28
 800934a:	bf44      	itt	mi
 800934c:	232b      	movmi	r3, #43	@ 0x2b
 800934e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009352:	f89a 3000 	ldrb.w	r3, [sl]
 8009356:	2b2a      	cmp	r3, #42	@ 0x2a
 8009358:	d015      	beq.n	8009386 <_svfiprintf_r+0xfa>
 800935a:	9a07      	ldr	r2, [sp, #28]
 800935c:	4654      	mov	r4, sl
 800935e:	2000      	movs	r0, #0
 8009360:	f04f 0c0a 	mov.w	ip, #10
 8009364:	4621      	mov	r1, r4
 8009366:	f811 3b01 	ldrb.w	r3, [r1], #1
 800936a:	3b30      	subs	r3, #48	@ 0x30
 800936c:	2b09      	cmp	r3, #9
 800936e:	d94b      	bls.n	8009408 <_svfiprintf_r+0x17c>
 8009370:	b1b0      	cbz	r0, 80093a0 <_svfiprintf_r+0x114>
 8009372:	9207      	str	r2, [sp, #28]
 8009374:	e014      	b.n	80093a0 <_svfiprintf_r+0x114>
 8009376:	eba0 0308 	sub.w	r3, r0, r8
 800937a:	fa09 f303 	lsl.w	r3, r9, r3
 800937e:	4313      	orrs	r3, r2
 8009380:	9304      	str	r3, [sp, #16]
 8009382:	46a2      	mov	sl, r4
 8009384:	e7d2      	b.n	800932c <_svfiprintf_r+0xa0>
 8009386:	9b03      	ldr	r3, [sp, #12]
 8009388:	1d19      	adds	r1, r3, #4
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	9103      	str	r1, [sp, #12]
 800938e:	2b00      	cmp	r3, #0
 8009390:	bfbb      	ittet	lt
 8009392:	425b      	neglt	r3, r3
 8009394:	f042 0202 	orrlt.w	r2, r2, #2
 8009398:	9307      	strge	r3, [sp, #28]
 800939a:	9307      	strlt	r3, [sp, #28]
 800939c:	bfb8      	it	lt
 800939e:	9204      	strlt	r2, [sp, #16]
 80093a0:	7823      	ldrb	r3, [r4, #0]
 80093a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80093a4:	d10a      	bne.n	80093bc <_svfiprintf_r+0x130>
 80093a6:	7863      	ldrb	r3, [r4, #1]
 80093a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80093aa:	d132      	bne.n	8009412 <_svfiprintf_r+0x186>
 80093ac:	9b03      	ldr	r3, [sp, #12]
 80093ae:	1d1a      	adds	r2, r3, #4
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	9203      	str	r2, [sp, #12]
 80093b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80093b8:	3402      	adds	r4, #2
 80093ba:	9305      	str	r3, [sp, #20]
 80093bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009480 <_svfiprintf_r+0x1f4>
 80093c0:	7821      	ldrb	r1, [r4, #0]
 80093c2:	2203      	movs	r2, #3
 80093c4:	4650      	mov	r0, sl
 80093c6:	f7f6 ff13 	bl	80001f0 <memchr>
 80093ca:	b138      	cbz	r0, 80093dc <_svfiprintf_r+0x150>
 80093cc:	9b04      	ldr	r3, [sp, #16]
 80093ce:	eba0 000a 	sub.w	r0, r0, sl
 80093d2:	2240      	movs	r2, #64	@ 0x40
 80093d4:	4082      	lsls	r2, r0
 80093d6:	4313      	orrs	r3, r2
 80093d8:	3401      	adds	r4, #1
 80093da:	9304      	str	r3, [sp, #16]
 80093dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093e0:	4824      	ldr	r0, [pc, #144]	@ (8009474 <_svfiprintf_r+0x1e8>)
 80093e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80093e6:	2206      	movs	r2, #6
 80093e8:	f7f6 ff02 	bl	80001f0 <memchr>
 80093ec:	2800      	cmp	r0, #0
 80093ee:	d036      	beq.n	800945e <_svfiprintf_r+0x1d2>
 80093f0:	4b21      	ldr	r3, [pc, #132]	@ (8009478 <_svfiprintf_r+0x1ec>)
 80093f2:	bb1b      	cbnz	r3, 800943c <_svfiprintf_r+0x1b0>
 80093f4:	9b03      	ldr	r3, [sp, #12]
 80093f6:	3307      	adds	r3, #7
 80093f8:	f023 0307 	bic.w	r3, r3, #7
 80093fc:	3308      	adds	r3, #8
 80093fe:	9303      	str	r3, [sp, #12]
 8009400:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009402:	4433      	add	r3, r6
 8009404:	9309      	str	r3, [sp, #36]	@ 0x24
 8009406:	e76a      	b.n	80092de <_svfiprintf_r+0x52>
 8009408:	fb0c 3202 	mla	r2, ip, r2, r3
 800940c:	460c      	mov	r4, r1
 800940e:	2001      	movs	r0, #1
 8009410:	e7a8      	b.n	8009364 <_svfiprintf_r+0xd8>
 8009412:	2300      	movs	r3, #0
 8009414:	3401      	adds	r4, #1
 8009416:	9305      	str	r3, [sp, #20]
 8009418:	4619      	mov	r1, r3
 800941a:	f04f 0c0a 	mov.w	ip, #10
 800941e:	4620      	mov	r0, r4
 8009420:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009424:	3a30      	subs	r2, #48	@ 0x30
 8009426:	2a09      	cmp	r2, #9
 8009428:	d903      	bls.n	8009432 <_svfiprintf_r+0x1a6>
 800942a:	2b00      	cmp	r3, #0
 800942c:	d0c6      	beq.n	80093bc <_svfiprintf_r+0x130>
 800942e:	9105      	str	r1, [sp, #20]
 8009430:	e7c4      	b.n	80093bc <_svfiprintf_r+0x130>
 8009432:	fb0c 2101 	mla	r1, ip, r1, r2
 8009436:	4604      	mov	r4, r0
 8009438:	2301      	movs	r3, #1
 800943a:	e7f0      	b.n	800941e <_svfiprintf_r+0x192>
 800943c:	ab03      	add	r3, sp, #12
 800943e:	9300      	str	r3, [sp, #0]
 8009440:	462a      	mov	r2, r5
 8009442:	4b0e      	ldr	r3, [pc, #56]	@ (800947c <_svfiprintf_r+0x1f0>)
 8009444:	a904      	add	r1, sp, #16
 8009446:	4638      	mov	r0, r7
 8009448:	f7fc fcca 	bl	8005de0 <_printf_float>
 800944c:	1c42      	adds	r2, r0, #1
 800944e:	4606      	mov	r6, r0
 8009450:	d1d6      	bne.n	8009400 <_svfiprintf_r+0x174>
 8009452:	89ab      	ldrh	r3, [r5, #12]
 8009454:	065b      	lsls	r3, r3, #25
 8009456:	f53f af2d 	bmi.w	80092b4 <_svfiprintf_r+0x28>
 800945a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800945c:	e72c      	b.n	80092b8 <_svfiprintf_r+0x2c>
 800945e:	ab03      	add	r3, sp, #12
 8009460:	9300      	str	r3, [sp, #0]
 8009462:	462a      	mov	r2, r5
 8009464:	4b05      	ldr	r3, [pc, #20]	@ (800947c <_svfiprintf_r+0x1f0>)
 8009466:	a904      	add	r1, sp, #16
 8009468:	4638      	mov	r0, r7
 800946a:	f7fc ff51 	bl	8006310 <_printf_i>
 800946e:	e7ed      	b.n	800944c <_svfiprintf_r+0x1c0>
 8009470:	0800a7d1 	.word	0x0800a7d1
 8009474:	0800a7db 	.word	0x0800a7db
 8009478:	08005de1 	.word	0x08005de1
 800947c:	080091d5 	.word	0x080091d5
 8009480:	0800a7d7 	.word	0x0800a7d7

08009484 <__sflush_r>:
 8009484:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800948c:	0716      	lsls	r6, r2, #28
 800948e:	4605      	mov	r5, r0
 8009490:	460c      	mov	r4, r1
 8009492:	d454      	bmi.n	800953e <__sflush_r+0xba>
 8009494:	684b      	ldr	r3, [r1, #4]
 8009496:	2b00      	cmp	r3, #0
 8009498:	dc02      	bgt.n	80094a0 <__sflush_r+0x1c>
 800949a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800949c:	2b00      	cmp	r3, #0
 800949e:	dd48      	ble.n	8009532 <__sflush_r+0xae>
 80094a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80094a2:	2e00      	cmp	r6, #0
 80094a4:	d045      	beq.n	8009532 <__sflush_r+0xae>
 80094a6:	2300      	movs	r3, #0
 80094a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80094ac:	682f      	ldr	r7, [r5, #0]
 80094ae:	6a21      	ldr	r1, [r4, #32]
 80094b0:	602b      	str	r3, [r5, #0]
 80094b2:	d030      	beq.n	8009516 <__sflush_r+0x92>
 80094b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80094b6:	89a3      	ldrh	r3, [r4, #12]
 80094b8:	0759      	lsls	r1, r3, #29
 80094ba:	d505      	bpl.n	80094c8 <__sflush_r+0x44>
 80094bc:	6863      	ldr	r3, [r4, #4]
 80094be:	1ad2      	subs	r2, r2, r3
 80094c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80094c2:	b10b      	cbz	r3, 80094c8 <__sflush_r+0x44>
 80094c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80094c6:	1ad2      	subs	r2, r2, r3
 80094c8:	2300      	movs	r3, #0
 80094ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80094cc:	6a21      	ldr	r1, [r4, #32]
 80094ce:	4628      	mov	r0, r5
 80094d0:	47b0      	blx	r6
 80094d2:	1c43      	adds	r3, r0, #1
 80094d4:	89a3      	ldrh	r3, [r4, #12]
 80094d6:	d106      	bne.n	80094e6 <__sflush_r+0x62>
 80094d8:	6829      	ldr	r1, [r5, #0]
 80094da:	291d      	cmp	r1, #29
 80094dc:	d82b      	bhi.n	8009536 <__sflush_r+0xb2>
 80094de:	4a2a      	ldr	r2, [pc, #168]	@ (8009588 <__sflush_r+0x104>)
 80094e0:	410a      	asrs	r2, r1
 80094e2:	07d6      	lsls	r6, r2, #31
 80094e4:	d427      	bmi.n	8009536 <__sflush_r+0xb2>
 80094e6:	2200      	movs	r2, #0
 80094e8:	6062      	str	r2, [r4, #4]
 80094ea:	04d9      	lsls	r1, r3, #19
 80094ec:	6922      	ldr	r2, [r4, #16]
 80094ee:	6022      	str	r2, [r4, #0]
 80094f0:	d504      	bpl.n	80094fc <__sflush_r+0x78>
 80094f2:	1c42      	adds	r2, r0, #1
 80094f4:	d101      	bne.n	80094fa <__sflush_r+0x76>
 80094f6:	682b      	ldr	r3, [r5, #0]
 80094f8:	b903      	cbnz	r3, 80094fc <__sflush_r+0x78>
 80094fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80094fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80094fe:	602f      	str	r7, [r5, #0]
 8009500:	b1b9      	cbz	r1, 8009532 <__sflush_r+0xae>
 8009502:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009506:	4299      	cmp	r1, r3
 8009508:	d002      	beq.n	8009510 <__sflush_r+0x8c>
 800950a:	4628      	mov	r0, r5
 800950c:	f7fe fa2c 	bl	8007968 <_free_r>
 8009510:	2300      	movs	r3, #0
 8009512:	6363      	str	r3, [r4, #52]	@ 0x34
 8009514:	e00d      	b.n	8009532 <__sflush_r+0xae>
 8009516:	2301      	movs	r3, #1
 8009518:	4628      	mov	r0, r5
 800951a:	47b0      	blx	r6
 800951c:	4602      	mov	r2, r0
 800951e:	1c50      	adds	r0, r2, #1
 8009520:	d1c9      	bne.n	80094b6 <__sflush_r+0x32>
 8009522:	682b      	ldr	r3, [r5, #0]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d0c6      	beq.n	80094b6 <__sflush_r+0x32>
 8009528:	2b1d      	cmp	r3, #29
 800952a:	d001      	beq.n	8009530 <__sflush_r+0xac>
 800952c:	2b16      	cmp	r3, #22
 800952e:	d11e      	bne.n	800956e <__sflush_r+0xea>
 8009530:	602f      	str	r7, [r5, #0]
 8009532:	2000      	movs	r0, #0
 8009534:	e022      	b.n	800957c <__sflush_r+0xf8>
 8009536:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800953a:	b21b      	sxth	r3, r3
 800953c:	e01b      	b.n	8009576 <__sflush_r+0xf2>
 800953e:	690f      	ldr	r7, [r1, #16]
 8009540:	2f00      	cmp	r7, #0
 8009542:	d0f6      	beq.n	8009532 <__sflush_r+0xae>
 8009544:	0793      	lsls	r3, r2, #30
 8009546:	680e      	ldr	r6, [r1, #0]
 8009548:	bf08      	it	eq
 800954a:	694b      	ldreq	r3, [r1, #20]
 800954c:	600f      	str	r7, [r1, #0]
 800954e:	bf18      	it	ne
 8009550:	2300      	movne	r3, #0
 8009552:	eba6 0807 	sub.w	r8, r6, r7
 8009556:	608b      	str	r3, [r1, #8]
 8009558:	f1b8 0f00 	cmp.w	r8, #0
 800955c:	dde9      	ble.n	8009532 <__sflush_r+0xae>
 800955e:	6a21      	ldr	r1, [r4, #32]
 8009560:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009562:	4643      	mov	r3, r8
 8009564:	463a      	mov	r2, r7
 8009566:	4628      	mov	r0, r5
 8009568:	47b0      	blx	r6
 800956a:	2800      	cmp	r0, #0
 800956c:	dc08      	bgt.n	8009580 <__sflush_r+0xfc>
 800956e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009572:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009576:	81a3      	strh	r3, [r4, #12]
 8009578:	f04f 30ff 	mov.w	r0, #4294967295
 800957c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009580:	4407      	add	r7, r0
 8009582:	eba8 0800 	sub.w	r8, r8, r0
 8009586:	e7e7      	b.n	8009558 <__sflush_r+0xd4>
 8009588:	dfbffffe 	.word	0xdfbffffe

0800958c <_fflush_r>:
 800958c:	b538      	push	{r3, r4, r5, lr}
 800958e:	690b      	ldr	r3, [r1, #16]
 8009590:	4605      	mov	r5, r0
 8009592:	460c      	mov	r4, r1
 8009594:	b913      	cbnz	r3, 800959c <_fflush_r+0x10>
 8009596:	2500      	movs	r5, #0
 8009598:	4628      	mov	r0, r5
 800959a:	bd38      	pop	{r3, r4, r5, pc}
 800959c:	b118      	cbz	r0, 80095a6 <_fflush_r+0x1a>
 800959e:	6a03      	ldr	r3, [r0, #32]
 80095a0:	b90b      	cbnz	r3, 80095a6 <_fflush_r+0x1a>
 80095a2:	f7fd fa75 	bl	8006a90 <__sinit>
 80095a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d0f3      	beq.n	8009596 <_fflush_r+0xa>
 80095ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80095b0:	07d0      	lsls	r0, r2, #31
 80095b2:	d404      	bmi.n	80095be <_fflush_r+0x32>
 80095b4:	0599      	lsls	r1, r3, #22
 80095b6:	d402      	bmi.n	80095be <_fflush_r+0x32>
 80095b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80095ba:	f7fd fb80 	bl	8006cbe <__retarget_lock_acquire_recursive>
 80095be:	4628      	mov	r0, r5
 80095c0:	4621      	mov	r1, r4
 80095c2:	f7ff ff5f 	bl	8009484 <__sflush_r>
 80095c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80095c8:	07da      	lsls	r2, r3, #31
 80095ca:	4605      	mov	r5, r0
 80095cc:	d4e4      	bmi.n	8009598 <_fflush_r+0xc>
 80095ce:	89a3      	ldrh	r3, [r4, #12]
 80095d0:	059b      	lsls	r3, r3, #22
 80095d2:	d4e1      	bmi.n	8009598 <_fflush_r+0xc>
 80095d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80095d6:	f7fd fb73 	bl	8006cc0 <__retarget_lock_release_recursive>
 80095da:	e7dd      	b.n	8009598 <_fflush_r+0xc>

080095dc <memmove>:
 80095dc:	4288      	cmp	r0, r1
 80095de:	b510      	push	{r4, lr}
 80095e0:	eb01 0402 	add.w	r4, r1, r2
 80095e4:	d902      	bls.n	80095ec <memmove+0x10>
 80095e6:	4284      	cmp	r4, r0
 80095e8:	4623      	mov	r3, r4
 80095ea:	d807      	bhi.n	80095fc <memmove+0x20>
 80095ec:	1e43      	subs	r3, r0, #1
 80095ee:	42a1      	cmp	r1, r4
 80095f0:	d008      	beq.n	8009604 <memmove+0x28>
 80095f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80095f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80095fa:	e7f8      	b.n	80095ee <memmove+0x12>
 80095fc:	4402      	add	r2, r0
 80095fe:	4601      	mov	r1, r0
 8009600:	428a      	cmp	r2, r1
 8009602:	d100      	bne.n	8009606 <memmove+0x2a>
 8009604:	bd10      	pop	{r4, pc}
 8009606:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800960a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800960e:	e7f7      	b.n	8009600 <memmove+0x24>

08009610 <strncmp>:
 8009610:	b510      	push	{r4, lr}
 8009612:	b16a      	cbz	r2, 8009630 <strncmp+0x20>
 8009614:	3901      	subs	r1, #1
 8009616:	1884      	adds	r4, r0, r2
 8009618:	f810 2b01 	ldrb.w	r2, [r0], #1
 800961c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009620:	429a      	cmp	r2, r3
 8009622:	d103      	bne.n	800962c <strncmp+0x1c>
 8009624:	42a0      	cmp	r0, r4
 8009626:	d001      	beq.n	800962c <strncmp+0x1c>
 8009628:	2a00      	cmp	r2, #0
 800962a:	d1f5      	bne.n	8009618 <strncmp+0x8>
 800962c:	1ad0      	subs	r0, r2, r3
 800962e:	bd10      	pop	{r4, pc}
 8009630:	4610      	mov	r0, r2
 8009632:	e7fc      	b.n	800962e <strncmp+0x1e>

08009634 <_sbrk_r>:
 8009634:	b538      	push	{r3, r4, r5, lr}
 8009636:	4d06      	ldr	r5, [pc, #24]	@ (8009650 <_sbrk_r+0x1c>)
 8009638:	2300      	movs	r3, #0
 800963a:	4604      	mov	r4, r0
 800963c:	4608      	mov	r0, r1
 800963e:	602b      	str	r3, [r5, #0]
 8009640:	f7f8 fa4c 	bl	8001adc <_sbrk>
 8009644:	1c43      	adds	r3, r0, #1
 8009646:	d102      	bne.n	800964e <_sbrk_r+0x1a>
 8009648:	682b      	ldr	r3, [r5, #0]
 800964a:	b103      	cbz	r3, 800964e <_sbrk_r+0x1a>
 800964c:	6023      	str	r3, [r4, #0]
 800964e:	bd38      	pop	{r3, r4, r5, pc}
 8009650:	20001440 	.word	0x20001440

08009654 <memcpy>:
 8009654:	440a      	add	r2, r1
 8009656:	4291      	cmp	r1, r2
 8009658:	f100 33ff 	add.w	r3, r0, #4294967295
 800965c:	d100      	bne.n	8009660 <memcpy+0xc>
 800965e:	4770      	bx	lr
 8009660:	b510      	push	{r4, lr}
 8009662:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009666:	f803 4f01 	strb.w	r4, [r3, #1]!
 800966a:	4291      	cmp	r1, r2
 800966c:	d1f9      	bne.n	8009662 <memcpy+0xe>
 800966e:	bd10      	pop	{r4, pc}

08009670 <nan>:
 8009670:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009678 <nan+0x8>
 8009674:	4770      	bx	lr
 8009676:	bf00      	nop
 8009678:	00000000 	.word	0x00000000
 800967c:	7ff80000 	.word	0x7ff80000

08009680 <__assert_func>:
 8009680:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009682:	4614      	mov	r4, r2
 8009684:	461a      	mov	r2, r3
 8009686:	4b09      	ldr	r3, [pc, #36]	@ (80096ac <__assert_func+0x2c>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4605      	mov	r5, r0
 800968c:	68d8      	ldr	r0, [r3, #12]
 800968e:	b954      	cbnz	r4, 80096a6 <__assert_func+0x26>
 8009690:	4b07      	ldr	r3, [pc, #28]	@ (80096b0 <__assert_func+0x30>)
 8009692:	461c      	mov	r4, r3
 8009694:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009698:	9100      	str	r1, [sp, #0]
 800969a:	462b      	mov	r3, r5
 800969c:	4905      	ldr	r1, [pc, #20]	@ (80096b4 <__assert_func+0x34>)
 800969e:	f000 fba7 	bl	8009df0 <fiprintf>
 80096a2:	f000 fbb7 	bl	8009e14 <abort>
 80096a6:	4b04      	ldr	r3, [pc, #16]	@ (80096b8 <__assert_func+0x38>)
 80096a8:	e7f4      	b.n	8009694 <__assert_func+0x14>
 80096aa:	bf00      	nop
 80096ac:	20000018 	.word	0x20000018
 80096b0:	0800a825 	.word	0x0800a825
 80096b4:	0800a7f7 	.word	0x0800a7f7
 80096b8:	0800a7ea 	.word	0x0800a7ea

080096bc <_calloc_r>:
 80096bc:	b570      	push	{r4, r5, r6, lr}
 80096be:	fba1 5402 	umull	r5, r4, r1, r2
 80096c2:	b93c      	cbnz	r4, 80096d4 <_calloc_r+0x18>
 80096c4:	4629      	mov	r1, r5
 80096c6:	f7fe f9c3 	bl	8007a50 <_malloc_r>
 80096ca:	4606      	mov	r6, r0
 80096cc:	b928      	cbnz	r0, 80096da <_calloc_r+0x1e>
 80096ce:	2600      	movs	r6, #0
 80096d0:	4630      	mov	r0, r6
 80096d2:	bd70      	pop	{r4, r5, r6, pc}
 80096d4:	220c      	movs	r2, #12
 80096d6:	6002      	str	r2, [r0, #0]
 80096d8:	e7f9      	b.n	80096ce <_calloc_r+0x12>
 80096da:	462a      	mov	r2, r5
 80096dc:	4621      	mov	r1, r4
 80096de:	f7fd fa70 	bl	8006bc2 <memset>
 80096e2:	e7f5      	b.n	80096d0 <_calloc_r+0x14>

080096e4 <rshift>:
 80096e4:	6903      	ldr	r3, [r0, #16]
 80096e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80096ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80096ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 80096f2:	f100 0414 	add.w	r4, r0, #20
 80096f6:	dd45      	ble.n	8009784 <rshift+0xa0>
 80096f8:	f011 011f 	ands.w	r1, r1, #31
 80096fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009700:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009704:	d10c      	bne.n	8009720 <rshift+0x3c>
 8009706:	f100 0710 	add.w	r7, r0, #16
 800970a:	4629      	mov	r1, r5
 800970c:	42b1      	cmp	r1, r6
 800970e:	d334      	bcc.n	800977a <rshift+0x96>
 8009710:	1a9b      	subs	r3, r3, r2
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	1eea      	subs	r2, r5, #3
 8009716:	4296      	cmp	r6, r2
 8009718:	bf38      	it	cc
 800971a:	2300      	movcc	r3, #0
 800971c:	4423      	add	r3, r4
 800971e:	e015      	b.n	800974c <rshift+0x68>
 8009720:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009724:	f1c1 0820 	rsb	r8, r1, #32
 8009728:	40cf      	lsrs	r7, r1
 800972a:	f105 0e04 	add.w	lr, r5, #4
 800972e:	46a1      	mov	r9, r4
 8009730:	4576      	cmp	r6, lr
 8009732:	46f4      	mov	ip, lr
 8009734:	d815      	bhi.n	8009762 <rshift+0x7e>
 8009736:	1a9a      	subs	r2, r3, r2
 8009738:	0092      	lsls	r2, r2, #2
 800973a:	3a04      	subs	r2, #4
 800973c:	3501      	adds	r5, #1
 800973e:	42ae      	cmp	r6, r5
 8009740:	bf38      	it	cc
 8009742:	2200      	movcc	r2, #0
 8009744:	18a3      	adds	r3, r4, r2
 8009746:	50a7      	str	r7, [r4, r2]
 8009748:	b107      	cbz	r7, 800974c <rshift+0x68>
 800974a:	3304      	adds	r3, #4
 800974c:	1b1a      	subs	r2, r3, r4
 800974e:	42a3      	cmp	r3, r4
 8009750:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009754:	bf08      	it	eq
 8009756:	2300      	moveq	r3, #0
 8009758:	6102      	str	r2, [r0, #16]
 800975a:	bf08      	it	eq
 800975c:	6143      	streq	r3, [r0, #20]
 800975e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009762:	f8dc c000 	ldr.w	ip, [ip]
 8009766:	fa0c fc08 	lsl.w	ip, ip, r8
 800976a:	ea4c 0707 	orr.w	r7, ip, r7
 800976e:	f849 7b04 	str.w	r7, [r9], #4
 8009772:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009776:	40cf      	lsrs	r7, r1
 8009778:	e7da      	b.n	8009730 <rshift+0x4c>
 800977a:	f851 cb04 	ldr.w	ip, [r1], #4
 800977e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009782:	e7c3      	b.n	800970c <rshift+0x28>
 8009784:	4623      	mov	r3, r4
 8009786:	e7e1      	b.n	800974c <rshift+0x68>

08009788 <__hexdig_fun>:
 8009788:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800978c:	2b09      	cmp	r3, #9
 800978e:	d802      	bhi.n	8009796 <__hexdig_fun+0xe>
 8009790:	3820      	subs	r0, #32
 8009792:	b2c0      	uxtb	r0, r0
 8009794:	4770      	bx	lr
 8009796:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800979a:	2b05      	cmp	r3, #5
 800979c:	d801      	bhi.n	80097a2 <__hexdig_fun+0x1a>
 800979e:	3847      	subs	r0, #71	@ 0x47
 80097a0:	e7f7      	b.n	8009792 <__hexdig_fun+0xa>
 80097a2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80097a6:	2b05      	cmp	r3, #5
 80097a8:	d801      	bhi.n	80097ae <__hexdig_fun+0x26>
 80097aa:	3827      	subs	r0, #39	@ 0x27
 80097ac:	e7f1      	b.n	8009792 <__hexdig_fun+0xa>
 80097ae:	2000      	movs	r0, #0
 80097b0:	4770      	bx	lr
	...

080097b4 <__gethex>:
 80097b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097b8:	b085      	sub	sp, #20
 80097ba:	468a      	mov	sl, r1
 80097bc:	9302      	str	r3, [sp, #8]
 80097be:	680b      	ldr	r3, [r1, #0]
 80097c0:	9001      	str	r0, [sp, #4]
 80097c2:	4690      	mov	r8, r2
 80097c4:	1c9c      	adds	r4, r3, #2
 80097c6:	46a1      	mov	r9, r4
 80097c8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80097cc:	2830      	cmp	r0, #48	@ 0x30
 80097ce:	d0fa      	beq.n	80097c6 <__gethex+0x12>
 80097d0:	eba9 0303 	sub.w	r3, r9, r3
 80097d4:	f1a3 0b02 	sub.w	fp, r3, #2
 80097d8:	f7ff ffd6 	bl	8009788 <__hexdig_fun>
 80097dc:	4605      	mov	r5, r0
 80097de:	2800      	cmp	r0, #0
 80097e0:	d168      	bne.n	80098b4 <__gethex+0x100>
 80097e2:	49a0      	ldr	r1, [pc, #640]	@ (8009a64 <__gethex+0x2b0>)
 80097e4:	2201      	movs	r2, #1
 80097e6:	4648      	mov	r0, r9
 80097e8:	f7ff ff12 	bl	8009610 <strncmp>
 80097ec:	4607      	mov	r7, r0
 80097ee:	2800      	cmp	r0, #0
 80097f0:	d167      	bne.n	80098c2 <__gethex+0x10e>
 80097f2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80097f6:	4626      	mov	r6, r4
 80097f8:	f7ff ffc6 	bl	8009788 <__hexdig_fun>
 80097fc:	2800      	cmp	r0, #0
 80097fe:	d062      	beq.n	80098c6 <__gethex+0x112>
 8009800:	4623      	mov	r3, r4
 8009802:	7818      	ldrb	r0, [r3, #0]
 8009804:	2830      	cmp	r0, #48	@ 0x30
 8009806:	4699      	mov	r9, r3
 8009808:	f103 0301 	add.w	r3, r3, #1
 800980c:	d0f9      	beq.n	8009802 <__gethex+0x4e>
 800980e:	f7ff ffbb 	bl	8009788 <__hexdig_fun>
 8009812:	fab0 f580 	clz	r5, r0
 8009816:	096d      	lsrs	r5, r5, #5
 8009818:	f04f 0b01 	mov.w	fp, #1
 800981c:	464a      	mov	r2, r9
 800981e:	4616      	mov	r6, r2
 8009820:	3201      	adds	r2, #1
 8009822:	7830      	ldrb	r0, [r6, #0]
 8009824:	f7ff ffb0 	bl	8009788 <__hexdig_fun>
 8009828:	2800      	cmp	r0, #0
 800982a:	d1f8      	bne.n	800981e <__gethex+0x6a>
 800982c:	498d      	ldr	r1, [pc, #564]	@ (8009a64 <__gethex+0x2b0>)
 800982e:	2201      	movs	r2, #1
 8009830:	4630      	mov	r0, r6
 8009832:	f7ff feed 	bl	8009610 <strncmp>
 8009836:	2800      	cmp	r0, #0
 8009838:	d13f      	bne.n	80098ba <__gethex+0x106>
 800983a:	b944      	cbnz	r4, 800984e <__gethex+0x9a>
 800983c:	1c74      	adds	r4, r6, #1
 800983e:	4622      	mov	r2, r4
 8009840:	4616      	mov	r6, r2
 8009842:	3201      	adds	r2, #1
 8009844:	7830      	ldrb	r0, [r6, #0]
 8009846:	f7ff ff9f 	bl	8009788 <__hexdig_fun>
 800984a:	2800      	cmp	r0, #0
 800984c:	d1f8      	bne.n	8009840 <__gethex+0x8c>
 800984e:	1ba4      	subs	r4, r4, r6
 8009850:	00a7      	lsls	r7, r4, #2
 8009852:	7833      	ldrb	r3, [r6, #0]
 8009854:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009858:	2b50      	cmp	r3, #80	@ 0x50
 800985a:	d13e      	bne.n	80098da <__gethex+0x126>
 800985c:	7873      	ldrb	r3, [r6, #1]
 800985e:	2b2b      	cmp	r3, #43	@ 0x2b
 8009860:	d033      	beq.n	80098ca <__gethex+0x116>
 8009862:	2b2d      	cmp	r3, #45	@ 0x2d
 8009864:	d034      	beq.n	80098d0 <__gethex+0x11c>
 8009866:	1c71      	adds	r1, r6, #1
 8009868:	2400      	movs	r4, #0
 800986a:	7808      	ldrb	r0, [r1, #0]
 800986c:	f7ff ff8c 	bl	8009788 <__hexdig_fun>
 8009870:	1e43      	subs	r3, r0, #1
 8009872:	b2db      	uxtb	r3, r3
 8009874:	2b18      	cmp	r3, #24
 8009876:	d830      	bhi.n	80098da <__gethex+0x126>
 8009878:	f1a0 0210 	sub.w	r2, r0, #16
 800987c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009880:	f7ff ff82 	bl	8009788 <__hexdig_fun>
 8009884:	f100 3cff 	add.w	ip, r0, #4294967295
 8009888:	fa5f fc8c 	uxtb.w	ip, ip
 800988c:	f1bc 0f18 	cmp.w	ip, #24
 8009890:	f04f 030a 	mov.w	r3, #10
 8009894:	d91e      	bls.n	80098d4 <__gethex+0x120>
 8009896:	b104      	cbz	r4, 800989a <__gethex+0xe6>
 8009898:	4252      	negs	r2, r2
 800989a:	4417      	add	r7, r2
 800989c:	f8ca 1000 	str.w	r1, [sl]
 80098a0:	b1ed      	cbz	r5, 80098de <__gethex+0x12a>
 80098a2:	f1bb 0f00 	cmp.w	fp, #0
 80098a6:	bf0c      	ite	eq
 80098a8:	2506      	moveq	r5, #6
 80098aa:	2500      	movne	r5, #0
 80098ac:	4628      	mov	r0, r5
 80098ae:	b005      	add	sp, #20
 80098b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098b4:	2500      	movs	r5, #0
 80098b6:	462c      	mov	r4, r5
 80098b8:	e7b0      	b.n	800981c <__gethex+0x68>
 80098ba:	2c00      	cmp	r4, #0
 80098bc:	d1c7      	bne.n	800984e <__gethex+0x9a>
 80098be:	4627      	mov	r7, r4
 80098c0:	e7c7      	b.n	8009852 <__gethex+0x9e>
 80098c2:	464e      	mov	r6, r9
 80098c4:	462f      	mov	r7, r5
 80098c6:	2501      	movs	r5, #1
 80098c8:	e7c3      	b.n	8009852 <__gethex+0x9e>
 80098ca:	2400      	movs	r4, #0
 80098cc:	1cb1      	adds	r1, r6, #2
 80098ce:	e7cc      	b.n	800986a <__gethex+0xb6>
 80098d0:	2401      	movs	r4, #1
 80098d2:	e7fb      	b.n	80098cc <__gethex+0x118>
 80098d4:	fb03 0002 	mla	r0, r3, r2, r0
 80098d8:	e7ce      	b.n	8009878 <__gethex+0xc4>
 80098da:	4631      	mov	r1, r6
 80098dc:	e7de      	b.n	800989c <__gethex+0xe8>
 80098de:	eba6 0309 	sub.w	r3, r6, r9
 80098e2:	3b01      	subs	r3, #1
 80098e4:	4629      	mov	r1, r5
 80098e6:	2b07      	cmp	r3, #7
 80098e8:	dc0a      	bgt.n	8009900 <__gethex+0x14c>
 80098ea:	9801      	ldr	r0, [sp, #4]
 80098ec:	f7fe f93c 	bl	8007b68 <_Balloc>
 80098f0:	4604      	mov	r4, r0
 80098f2:	b940      	cbnz	r0, 8009906 <__gethex+0x152>
 80098f4:	4b5c      	ldr	r3, [pc, #368]	@ (8009a68 <__gethex+0x2b4>)
 80098f6:	4602      	mov	r2, r0
 80098f8:	21e4      	movs	r1, #228	@ 0xe4
 80098fa:	485c      	ldr	r0, [pc, #368]	@ (8009a6c <__gethex+0x2b8>)
 80098fc:	f7ff fec0 	bl	8009680 <__assert_func>
 8009900:	3101      	adds	r1, #1
 8009902:	105b      	asrs	r3, r3, #1
 8009904:	e7ef      	b.n	80098e6 <__gethex+0x132>
 8009906:	f100 0a14 	add.w	sl, r0, #20
 800990a:	2300      	movs	r3, #0
 800990c:	4655      	mov	r5, sl
 800990e:	469b      	mov	fp, r3
 8009910:	45b1      	cmp	r9, r6
 8009912:	d337      	bcc.n	8009984 <__gethex+0x1d0>
 8009914:	f845 bb04 	str.w	fp, [r5], #4
 8009918:	eba5 050a 	sub.w	r5, r5, sl
 800991c:	10ad      	asrs	r5, r5, #2
 800991e:	6125      	str	r5, [r4, #16]
 8009920:	4658      	mov	r0, fp
 8009922:	f7fe fa13 	bl	8007d4c <__hi0bits>
 8009926:	016d      	lsls	r5, r5, #5
 8009928:	f8d8 6000 	ldr.w	r6, [r8]
 800992c:	1a2d      	subs	r5, r5, r0
 800992e:	42b5      	cmp	r5, r6
 8009930:	dd54      	ble.n	80099dc <__gethex+0x228>
 8009932:	1bad      	subs	r5, r5, r6
 8009934:	4629      	mov	r1, r5
 8009936:	4620      	mov	r0, r4
 8009938:	f7fe fda7 	bl	800848a <__any_on>
 800993c:	4681      	mov	r9, r0
 800993e:	b178      	cbz	r0, 8009960 <__gethex+0x1ac>
 8009940:	1e6b      	subs	r3, r5, #1
 8009942:	1159      	asrs	r1, r3, #5
 8009944:	f003 021f 	and.w	r2, r3, #31
 8009948:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800994c:	f04f 0901 	mov.w	r9, #1
 8009950:	fa09 f202 	lsl.w	r2, r9, r2
 8009954:	420a      	tst	r2, r1
 8009956:	d003      	beq.n	8009960 <__gethex+0x1ac>
 8009958:	454b      	cmp	r3, r9
 800995a:	dc36      	bgt.n	80099ca <__gethex+0x216>
 800995c:	f04f 0902 	mov.w	r9, #2
 8009960:	4629      	mov	r1, r5
 8009962:	4620      	mov	r0, r4
 8009964:	f7ff febe 	bl	80096e4 <rshift>
 8009968:	442f      	add	r7, r5
 800996a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800996e:	42bb      	cmp	r3, r7
 8009970:	da42      	bge.n	80099f8 <__gethex+0x244>
 8009972:	9801      	ldr	r0, [sp, #4]
 8009974:	4621      	mov	r1, r4
 8009976:	f7fe f937 	bl	8007be8 <_Bfree>
 800997a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800997c:	2300      	movs	r3, #0
 800997e:	6013      	str	r3, [r2, #0]
 8009980:	25a3      	movs	r5, #163	@ 0xa3
 8009982:	e793      	b.n	80098ac <__gethex+0xf8>
 8009984:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009988:	2a2e      	cmp	r2, #46	@ 0x2e
 800998a:	d012      	beq.n	80099b2 <__gethex+0x1fe>
 800998c:	2b20      	cmp	r3, #32
 800998e:	d104      	bne.n	800999a <__gethex+0x1e6>
 8009990:	f845 bb04 	str.w	fp, [r5], #4
 8009994:	f04f 0b00 	mov.w	fp, #0
 8009998:	465b      	mov	r3, fp
 800999a:	7830      	ldrb	r0, [r6, #0]
 800999c:	9303      	str	r3, [sp, #12]
 800999e:	f7ff fef3 	bl	8009788 <__hexdig_fun>
 80099a2:	9b03      	ldr	r3, [sp, #12]
 80099a4:	f000 000f 	and.w	r0, r0, #15
 80099a8:	4098      	lsls	r0, r3
 80099aa:	ea4b 0b00 	orr.w	fp, fp, r0
 80099ae:	3304      	adds	r3, #4
 80099b0:	e7ae      	b.n	8009910 <__gethex+0x15c>
 80099b2:	45b1      	cmp	r9, r6
 80099b4:	d8ea      	bhi.n	800998c <__gethex+0x1d8>
 80099b6:	492b      	ldr	r1, [pc, #172]	@ (8009a64 <__gethex+0x2b0>)
 80099b8:	9303      	str	r3, [sp, #12]
 80099ba:	2201      	movs	r2, #1
 80099bc:	4630      	mov	r0, r6
 80099be:	f7ff fe27 	bl	8009610 <strncmp>
 80099c2:	9b03      	ldr	r3, [sp, #12]
 80099c4:	2800      	cmp	r0, #0
 80099c6:	d1e1      	bne.n	800998c <__gethex+0x1d8>
 80099c8:	e7a2      	b.n	8009910 <__gethex+0x15c>
 80099ca:	1ea9      	subs	r1, r5, #2
 80099cc:	4620      	mov	r0, r4
 80099ce:	f7fe fd5c 	bl	800848a <__any_on>
 80099d2:	2800      	cmp	r0, #0
 80099d4:	d0c2      	beq.n	800995c <__gethex+0x1a8>
 80099d6:	f04f 0903 	mov.w	r9, #3
 80099da:	e7c1      	b.n	8009960 <__gethex+0x1ac>
 80099dc:	da09      	bge.n	80099f2 <__gethex+0x23e>
 80099de:	1b75      	subs	r5, r6, r5
 80099e0:	4621      	mov	r1, r4
 80099e2:	9801      	ldr	r0, [sp, #4]
 80099e4:	462a      	mov	r2, r5
 80099e6:	f7fe fb17 	bl	8008018 <__lshift>
 80099ea:	1b7f      	subs	r7, r7, r5
 80099ec:	4604      	mov	r4, r0
 80099ee:	f100 0a14 	add.w	sl, r0, #20
 80099f2:	f04f 0900 	mov.w	r9, #0
 80099f6:	e7b8      	b.n	800996a <__gethex+0x1b6>
 80099f8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80099fc:	42bd      	cmp	r5, r7
 80099fe:	dd6f      	ble.n	8009ae0 <__gethex+0x32c>
 8009a00:	1bed      	subs	r5, r5, r7
 8009a02:	42ae      	cmp	r6, r5
 8009a04:	dc34      	bgt.n	8009a70 <__gethex+0x2bc>
 8009a06:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009a0a:	2b02      	cmp	r3, #2
 8009a0c:	d022      	beq.n	8009a54 <__gethex+0x2a0>
 8009a0e:	2b03      	cmp	r3, #3
 8009a10:	d024      	beq.n	8009a5c <__gethex+0x2a8>
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	d115      	bne.n	8009a42 <__gethex+0x28e>
 8009a16:	42ae      	cmp	r6, r5
 8009a18:	d113      	bne.n	8009a42 <__gethex+0x28e>
 8009a1a:	2e01      	cmp	r6, #1
 8009a1c:	d10b      	bne.n	8009a36 <__gethex+0x282>
 8009a1e:	9a02      	ldr	r2, [sp, #8]
 8009a20:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009a24:	6013      	str	r3, [r2, #0]
 8009a26:	2301      	movs	r3, #1
 8009a28:	6123      	str	r3, [r4, #16]
 8009a2a:	f8ca 3000 	str.w	r3, [sl]
 8009a2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a30:	2562      	movs	r5, #98	@ 0x62
 8009a32:	601c      	str	r4, [r3, #0]
 8009a34:	e73a      	b.n	80098ac <__gethex+0xf8>
 8009a36:	1e71      	subs	r1, r6, #1
 8009a38:	4620      	mov	r0, r4
 8009a3a:	f7fe fd26 	bl	800848a <__any_on>
 8009a3e:	2800      	cmp	r0, #0
 8009a40:	d1ed      	bne.n	8009a1e <__gethex+0x26a>
 8009a42:	9801      	ldr	r0, [sp, #4]
 8009a44:	4621      	mov	r1, r4
 8009a46:	f7fe f8cf 	bl	8007be8 <_Bfree>
 8009a4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	6013      	str	r3, [r2, #0]
 8009a50:	2550      	movs	r5, #80	@ 0x50
 8009a52:	e72b      	b.n	80098ac <__gethex+0xf8>
 8009a54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d1f3      	bne.n	8009a42 <__gethex+0x28e>
 8009a5a:	e7e0      	b.n	8009a1e <__gethex+0x26a>
 8009a5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d1dd      	bne.n	8009a1e <__gethex+0x26a>
 8009a62:	e7ee      	b.n	8009a42 <__gethex+0x28e>
 8009a64:	0800a678 	.word	0x0800a678
 8009a68:	0800a511 	.word	0x0800a511
 8009a6c:	0800a826 	.word	0x0800a826
 8009a70:	1e6f      	subs	r7, r5, #1
 8009a72:	f1b9 0f00 	cmp.w	r9, #0
 8009a76:	d130      	bne.n	8009ada <__gethex+0x326>
 8009a78:	b127      	cbz	r7, 8009a84 <__gethex+0x2d0>
 8009a7a:	4639      	mov	r1, r7
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	f7fe fd04 	bl	800848a <__any_on>
 8009a82:	4681      	mov	r9, r0
 8009a84:	117a      	asrs	r2, r7, #5
 8009a86:	2301      	movs	r3, #1
 8009a88:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009a8c:	f007 071f 	and.w	r7, r7, #31
 8009a90:	40bb      	lsls	r3, r7
 8009a92:	4213      	tst	r3, r2
 8009a94:	4629      	mov	r1, r5
 8009a96:	4620      	mov	r0, r4
 8009a98:	bf18      	it	ne
 8009a9a:	f049 0902 	orrne.w	r9, r9, #2
 8009a9e:	f7ff fe21 	bl	80096e4 <rshift>
 8009aa2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009aa6:	1b76      	subs	r6, r6, r5
 8009aa8:	2502      	movs	r5, #2
 8009aaa:	f1b9 0f00 	cmp.w	r9, #0
 8009aae:	d047      	beq.n	8009b40 <__gethex+0x38c>
 8009ab0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009ab4:	2b02      	cmp	r3, #2
 8009ab6:	d015      	beq.n	8009ae4 <__gethex+0x330>
 8009ab8:	2b03      	cmp	r3, #3
 8009aba:	d017      	beq.n	8009aec <__gethex+0x338>
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d109      	bne.n	8009ad4 <__gethex+0x320>
 8009ac0:	f019 0f02 	tst.w	r9, #2
 8009ac4:	d006      	beq.n	8009ad4 <__gethex+0x320>
 8009ac6:	f8da 3000 	ldr.w	r3, [sl]
 8009aca:	ea49 0903 	orr.w	r9, r9, r3
 8009ace:	f019 0f01 	tst.w	r9, #1
 8009ad2:	d10e      	bne.n	8009af2 <__gethex+0x33e>
 8009ad4:	f045 0510 	orr.w	r5, r5, #16
 8009ad8:	e032      	b.n	8009b40 <__gethex+0x38c>
 8009ada:	f04f 0901 	mov.w	r9, #1
 8009ade:	e7d1      	b.n	8009a84 <__gethex+0x2d0>
 8009ae0:	2501      	movs	r5, #1
 8009ae2:	e7e2      	b.n	8009aaa <__gethex+0x2f6>
 8009ae4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ae6:	f1c3 0301 	rsb	r3, r3, #1
 8009aea:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009aec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d0f0      	beq.n	8009ad4 <__gethex+0x320>
 8009af2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009af6:	f104 0314 	add.w	r3, r4, #20
 8009afa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009afe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009b02:	f04f 0c00 	mov.w	ip, #0
 8009b06:	4618      	mov	r0, r3
 8009b08:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b0c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009b10:	d01b      	beq.n	8009b4a <__gethex+0x396>
 8009b12:	3201      	adds	r2, #1
 8009b14:	6002      	str	r2, [r0, #0]
 8009b16:	2d02      	cmp	r5, #2
 8009b18:	f104 0314 	add.w	r3, r4, #20
 8009b1c:	d13c      	bne.n	8009b98 <__gethex+0x3e4>
 8009b1e:	f8d8 2000 	ldr.w	r2, [r8]
 8009b22:	3a01      	subs	r2, #1
 8009b24:	42b2      	cmp	r2, r6
 8009b26:	d109      	bne.n	8009b3c <__gethex+0x388>
 8009b28:	1171      	asrs	r1, r6, #5
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009b30:	f006 061f 	and.w	r6, r6, #31
 8009b34:	fa02 f606 	lsl.w	r6, r2, r6
 8009b38:	421e      	tst	r6, r3
 8009b3a:	d13a      	bne.n	8009bb2 <__gethex+0x3fe>
 8009b3c:	f045 0520 	orr.w	r5, r5, #32
 8009b40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b42:	601c      	str	r4, [r3, #0]
 8009b44:	9b02      	ldr	r3, [sp, #8]
 8009b46:	601f      	str	r7, [r3, #0]
 8009b48:	e6b0      	b.n	80098ac <__gethex+0xf8>
 8009b4a:	4299      	cmp	r1, r3
 8009b4c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009b50:	d8d9      	bhi.n	8009b06 <__gethex+0x352>
 8009b52:	68a3      	ldr	r3, [r4, #8]
 8009b54:	459b      	cmp	fp, r3
 8009b56:	db17      	blt.n	8009b88 <__gethex+0x3d4>
 8009b58:	6861      	ldr	r1, [r4, #4]
 8009b5a:	9801      	ldr	r0, [sp, #4]
 8009b5c:	3101      	adds	r1, #1
 8009b5e:	f7fe f803 	bl	8007b68 <_Balloc>
 8009b62:	4681      	mov	r9, r0
 8009b64:	b918      	cbnz	r0, 8009b6e <__gethex+0x3ba>
 8009b66:	4b1a      	ldr	r3, [pc, #104]	@ (8009bd0 <__gethex+0x41c>)
 8009b68:	4602      	mov	r2, r0
 8009b6a:	2184      	movs	r1, #132	@ 0x84
 8009b6c:	e6c5      	b.n	80098fa <__gethex+0x146>
 8009b6e:	6922      	ldr	r2, [r4, #16]
 8009b70:	3202      	adds	r2, #2
 8009b72:	f104 010c 	add.w	r1, r4, #12
 8009b76:	0092      	lsls	r2, r2, #2
 8009b78:	300c      	adds	r0, #12
 8009b7a:	f7ff fd6b 	bl	8009654 <memcpy>
 8009b7e:	4621      	mov	r1, r4
 8009b80:	9801      	ldr	r0, [sp, #4]
 8009b82:	f7fe f831 	bl	8007be8 <_Bfree>
 8009b86:	464c      	mov	r4, r9
 8009b88:	6923      	ldr	r3, [r4, #16]
 8009b8a:	1c5a      	adds	r2, r3, #1
 8009b8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009b90:	6122      	str	r2, [r4, #16]
 8009b92:	2201      	movs	r2, #1
 8009b94:	615a      	str	r2, [r3, #20]
 8009b96:	e7be      	b.n	8009b16 <__gethex+0x362>
 8009b98:	6922      	ldr	r2, [r4, #16]
 8009b9a:	455a      	cmp	r2, fp
 8009b9c:	dd0b      	ble.n	8009bb6 <__gethex+0x402>
 8009b9e:	2101      	movs	r1, #1
 8009ba0:	4620      	mov	r0, r4
 8009ba2:	f7ff fd9f 	bl	80096e4 <rshift>
 8009ba6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009baa:	3701      	adds	r7, #1
 8009bac:	42bb      	cmp	r3, r7
 8009bae:	f6ff aee0 	blt.w	8009972 <__gethex+0x1be>
 8009bb2:	2501      	movs	r5, #1
 8009bb4:	e7c2      	b.n	8009b3c <__gethex+0x388>
 8009bb6:	f016 061f 	ands.w	r6, r6, #31
 8009bba:	d0fa      	beq.n	8009bb2 <__gethex+0x3fe>
 8009bbc:	4453      	add	r3, sl
 8009bbe:	f1c6 0620 	rsb	r6, r6, #32
 8009bc2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009bc6:	f7fe f8c1 	bl	8007d4c <__hi0bits>
 8009bca:	42b0      	cmp	r0, r6
 8009bcc:	dbe7      	blt.n	8009b9e <__gethex+0x3ea>
 8009bce:	e7f0      	b.n	8009bb2 <__gethex+0x3fe>
 8009bd0:	0800a511 	.word	0x0800a511

08009bd4 <L_shift>:
 8009bd4:	f1c2 0208 	rsb	r2, r2, #8
 8009bd8:	0092      	lsls	r2, r2, #2
 8009bda:	b570      	push	{r4, r5, r6, lr}
 8009bdc:	f1c2 0620 	rsb	r6, r2, #32
 8009be0:	6843      	ldr	r3, [r0, #4]
 8009be2:	6804      	ldr	r4, [r0, #0]
 8009be4:	fa03 f506 	lsl.w	r5, r3, r6
 8009be8:	432c      	orrs	r4, r5
 8009bea:	40d3      	lsrs	r3, r2
 8009bec:	6004      	str	r4, [r0, #0]
 8009bee:	f840 3f04 	str.w	r3, [r0, #4]!
 8009bf2:	4288      	cmp	r0, r1
 8009bf4:	d3f4      	bcc.n	8009be0 <L_shift+0xc>
 8009bf6:	bd70      	pop	{r4, r5, r6, pc}

08009bf8 <__match>:
 8009bf8:	b530      	push	{r4, r5, lr}
 8009bfa:	6803      	ldr	r3, [r0, #0]
 8009bfc:	3301      	adds	r3, #1
 8009bfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c02:	b914      	cbnz	r4, 8009c0a <__match+0x12>
 8009c04:	6003      	str	r3, [r0, #0]
 8009c06:	2001      	movs	r0, #1
 8009c08:	bd30      	pop	{r4, r5, pc}
 8009c0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c0e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009c12:	2d19      	cmp	r5, #25
 8009c14:	bf98      	it	ls
 8009c16:	3220      	addls	r2, #32
 8009c18:	42a2      	cmp	r2, r4
 8009c1a:	d0f0      	beq.n	8009bfe <__match+0x6>
 8009c1c:	2000      	movs	r0, #0
 8009c1e:	e7f3      	b.n	8009c08 <__match+0x10>

08009c20 <__hexnan>:
 8009c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c24:	680b      	ldr	r3, [r1, #0]
 8009c26:	6801      	ldr	r1, [r0, #0]
 8009c28:	115e      	asrs	r6, r3, #5
 8009c2a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009c2e:	f013 031f 	ands.w	r3, r3, #31
 8009c32:	b087      	sub	sp, #28
 8009c34:	bf18      	it	ne
 8009c36:	3604      	addne	r6, #4
 8009c38:	2500      	movs	r5, #0
 8009c3a:	1f37      	subs	r7, r6, #4
 8009c3c:	4682      	mov	sl, r0
 8009c3e:	4690      	mov	r8, r2
 8009c40:	9301      	str	r3, [sp, #4]
 8009c42:	f846 5c04 	str.w	r5, [r6, #-4]
 8009c46:	46b9      	mov	r9, r7
 8009c48:	463c      	mov	r4, r7
 8009c4a:	9502      	str	r5, [sp, #8]
 8009c4c:	46ab      	mov	fp, r5
 8009c4e:	784a      	ldrb	r2, [r1, #1]
 8009c50:	1c4b      	adds	r3, r1, #1
 8009c52:	9303      	str	r3, [sp, #12]
 8009c54:	b342      	cbz	r2, 8009ca8 <__hexnan+0x88>
 8009c56:	4610      	mov	r0, r2
 8009c58:	9105      	str	r1, [sp, #20]
 8009c5a:	9204      	str	r2, [sp, #16]
 8009c5c:	f7ff fd94 	bl	8009788 <__hexdig_fun>
 8009c60:	2800      	cmp	r0, #0
 8009c62:	d151      	bne.n	8009d08 <__hexnan+0xe8>
 8009c64:	9a04      	ldr	r2, [sp, #16]
 8009c66:	9905      	ldr	r1, [sp, #20]
 8009c68:	2a20      	cmp	r2, #32
 8009c6a:	d818      	bhi.n	8009c9e <__hexnan+0x7e>
 8009c6c:	9b02      	ldr	r3, [sp, #8]
 8009c6e:	459b      	cmp	fp, r3
 8009c70:	dd13      	ble.n	8009c9a <__hexnan+0x7a>
 8009c72:	454c      	cmp	r4, r9
 8009c74:	d206      	bcs.n	8009c84 <__hexnan+0x64>
 8009c76:	2d07      	cmp	r5, #7
 8009c78:	dc04      	bgt.n	8009c84 <__hexnan+0x64>
 8009c7a:	462a      	mov	r2, r5
 8009c7c:	4649      	mov	r1, r9
 8009c7e:	4620      	mov	r0, r4
 8009c80:	f7ff ffa8 	bl	8009bd4 <L_shift>
 8009c84:	4544      	cmp	r4, r8
 8009c86:	d952      	bls.n	8009d2e <__hexnan+0x10e>
 8009c88:	2300      	movs	r3, #0
 8009c8a:	f1a4 0904 	sub.w	r9, r4, #4
 8009c8e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009c92:	f8cd b008 	str.w	fp, [sp, #8]
 8009c96:	464c      	mov	r4, r9
 8009c98:	461d      	mov	r5, r3
 8009c9a:	9903      	ldr	r1, [sp, #12]
 8009c9c:	e7d7      	b.n	8009c4e <__hexnan+0x2e>
 8009c9e:	2a29      	cmp	r2, #41	@ 0x29
 8009ca0:	d157      	bne.n	8009d52 <__hexnan+0x132>
 8009ca2:	3102      	adds	r1, #2
 8009ca4:	f8ca 1000 	str.w	r1, [sl]
 8009ca8:	f1bb 0f00 	cmp.w	fp, #0
 8009cac:	d051      	beq.n	8009d52 <__hexnan+0x132>
 8009cae:	454c      	cmp	r4, r9
 8009cb0:	d206      	bcs.n	8009cc0 <__hexnan+0xa0>
 8009cb2:	2d07      	cmp	r5, #7
 8009cb4:	dc04      	bgt.n	8009cc0 <__hexnan+0xa0>
 8009cb6:	462a      	mov	r2, r5
 8009cb8:	4649      	mov	r1, r9
 8009cba:	4620      	mov	r0, r4
 8009cbc:	f7ff ff8a 	bl	8009bd4 <L_shift>
 8009cc0:	4544      	cmp	r4, r8
 8009cc2:	d936      	bls.n	8009d32 <__hexnan+0x112>
 8009cc4:	f1a8 0204 	sub.w	r2, r8, #4
 8009cc8:	4623      	mov	r3, r4
 8009cca:	f853 1b04 	ldr.w	r1, [r3], #4
 8009cce:	f842 1f04 	str.w	r1, [r2, #4]!
 8009cd2:	429f      	cmp	r7, r3
 8009cd4:	d2f9      	bcs.n	8009cca <__hexnan+0xaa>
 8009cd6:	1b3b      	subs	r3, r7, r4
 8009cd8:	f023 0303 	bic.w	r3, r3, #3
 8009cdc:	3304      	adds	r3, #4
 8009cde:	3401      	adds	r4, #1
 8009ce0:	3e03      	subs	r6, #3
 8009ce2:	42b4      	cmp	r4, r6
 8009ce4:	bf88      	it	hi
 8009ce6:	2304      	movhi	r3, #4
 8009ce8:	4443      	add	r3, r8
 8009cea:	2200      	movs	r2, #0
 8009cec:	f843 2b04 	str.w	r2, [r3], #4
 8009cf0:	429f      	cmp	r7, r3
 8009cf2:	d2fb      	bcs.n	8009cec <__hexnan+0xcc>
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	b91b      	cbnz	r3, 8009d00 <__hexnan+0xe0>
 8009cf8:	4547      	cmp	r7, r8
 8009cfa:	d128      	bne.n	8009d4e <__hexnan+0x12e>
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	603b      	str	r3, [r7, #0]
 8009d00:	2005      	movs	r0, #5
 8009d02:	b007      	add	sp, #28
 8009d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d08:	3501      	adds	r5, #1
 8009d0a:	2d08      	cmp	r5, #8
 8009d0c:	f10b 0b01 	add.w	fp, fp, #1
 8009d10:	dd06      	ble.n	8009d20 <__hexnan+0x100>
 8009d12:	4544      	cmp	r4, r8
 8009d14:	d9c1      	bls.n	8009c9a <__hexnan+0x7a>
 8009d16:	2300      	movs	r3, #0
 8009d18:	f844 3c04 	str.w	r3, [r4, #-4]
 8009d1c:	2501      	movs	r5, #1
 8009d1e:	3c04      	subs	r4, #4
 8009d20:	6822      	ldr	r2, [r4, #0]
 8009d22:	f000 000f 	and.w	r0, r0, #15
 8009d26:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009d2a:	6020      	str	r0, [r4, #0]
 8009d2c:	e7b5      	b.n	8009c9a <__hexnan+0x7a>
 8009d2e:	2508      	movs	r5, #8
 8009d30:	e7b3      	b.n	8009c9a <__hexnan+0x7a>
 8009d32:	9b01      	ldr	r3, [sp, #4]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d0dd      	beq.n	8009cf4 <__hexnan+0xd4>
 8009d38:	f1c3 0320 	rsb	r3, r3, #32
 8009d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8009d40:	40da      	lsrs	r2, r3
 8009d42:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009d46:	4013      	ands	r3, r2
 8009d48:	f846 3c04 	str.w	r3, [r6, #-4]
 8009d4c:	e7d2      	b.n	8009cf4 <__hexnan+0xd4>
 8009d4e:	3f04      	subs	r7, #4
 8009d50:	e7d0      	b.n	8009cf4 <__hexnan+0xd4>
 8009d52:	2004      	movs	r0, #4
 8009d54:	e7d5      	b.n	8009d02 <__hexnan+0xe2>

08009d56 <__ascii_mbtowc>:
 8009d56:	b082      	sub	sp, #8
 8009d58:	b901      	cbnz	r1, 8009d5c <__ascii_mbtowc+0x6>
 8009d5a:	a901      	add	r1, sp, #4
 8009d5c:	b142      	cbz	r2, 8009d70 <__ascii_mbtowc+0x1a>
 8009d5e:	b14b      	cbz	r3, 8009d74 <__ascii_mbtowc+0x1e>
 8009d60:	7813      	ldrb	r3, [r2, #0]
 8009d62:	600b      	str	r3, [r1, #0]
 8009d64:	7812      	ldrb	r2, [r2, #0]
 8009d66:	1e10      	subs	r0, r2, #0
 8009d68:	bf18      	it	ne
 8009d6a:	2001      	movne	r0, #1
 8009d6c:	b002      	add	sp, #8
 8009d6e:	4770      	bx	lr
 8009d70:	4610      	mov	r0, r2
 8009d72:	e7fb      	b.n	8009d6c <__ascii_mbtowc+0x16>
 8009d74:	f06f 0001 	mvn.w	r0, #1
 8009d78:	e7f8      	b.n	8009d6c <__ascii_mbtowc+0x16>

08009d7a <_realloc_r>:
 8009d7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d7e:	4680      	mov	r8, r0
 8009d80:	4615      	mov	r5, r2
 8009d82:	460c      	mov	r4, r1
 8009d84:	b921      	cbnz	r1, 8009d90 <_realloc_r+0x16>
 8009d86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d8a:	4611      	mov	r1, r2
 8009d8c:	f7fd be60 	b.w	8007a50 <_malloc_r>
 8009d90:	b92a      	cbnz	r2, 8009d9e <_realloc_r+0x24>
 8009d92:	f7fd fde9 	bl	8007968 <_free_r>
 8009d96:	2400      	movs	r4, #0
 8009d98:	4620      	mov	r0, r4
 8009d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d9e:	f000 f840 	bl	8009e22 <_malloc_usable_size_r>
 8009da2:	4285      	cmp	r5, r0
 8009da4:	4606      	mov	r6, r0
 8009da6:	d802      	bhi.n	8009dae <_realloc_r+0x34>
 8009da8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009dac:	d8f4      	bhi.n	8009d98 <_realloc_r+0x1e>
 8009dae:	4629      	mov	r1, r5
 8009db0:	4640      	mov	r0, r8
 8009db2:	f7fd fe4d 	bl	8007a50 <_malloc_r>
 8009db6:	4607      	mov	r7, r0
 8009db8:	2800      	cmp	r0, #0
 8009dba:	d0ec      	beq.n	8009d96 <_realloc_r+0x1c>
 8009dbc:	42b5      	cmp	r5, r6
 8009dbe:	462a      	mov	r2, r5
 8009dc0:	4621      	mov	r1, r4
 8009dc2:	bf28      	it	cs
 8009dc4:	4632      	movcs	r2, r6
 8009dc6:	f7ff fc45 	bl	8009654 <memcpy>
 8009dca:	4621      	mov	r1, r4
 8009dcc:	4640      	mov	r0, r8
 8009dce:	f7fd fdcb 	bl	8007968 <_free_r>
 8009dd2:	463c      	mov	r4, r7
 8009dd4:	e7e0      	b.n	8009d98 <_realloc_r+0x1e>

08009dd6 <__ascii_wctomb>:
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	4608      	mov	r0, r1
 8009dda:	b141      	cbz	r1, 8009dee <__ascii_wctomb+0x18>
 8009ddc:	2aff      	cmp	r2, #255	@ 0xff
 8009dde:	d904      	bls.n	8009dea <__ascii_wctomb+0x14>
 8009de0:	228a      	movs	r2, #138	@ 0x8a
 8009de2:	601a      	str	r2, [r3, #0]
 8009de4:	f04f 30ff 	mov.w	r0, #4294967295
 8009de8:	4770      	bx	lr
 8009dea:	700a      	strb	r2, [r1, #0]
 8009dec:	2001      	movs	r0, #1
 8009dee:	4770      	bx	lr

08009df0 <fiprintf>:
 8009df0:	b40e      	push	{r1, r2, r3}
 8009df2:	b503      	push	{r0, r1, lr}
 8009df4:	4601      	mov	r1, r0
 8009df6:	ab03      	add	r3, sp, #12
 8009df8:	4805      	ldr	r0, [pc, #20]	@ (8009e10 <fiprintf+0x20>)
 8009dfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dfe:	6800      	ldr	r0, [r0, #0]
 8009e00:	9301      	str	r3, [sp, #4]
 8009e02:	f000 f83f 	bl	8009e84 <_vfiprintf_r>
 8009e06:	b002      	add	sp, #8
 8009e08:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e0c:	b003      	add	sp, #12
 8009e0e:	4770      	bx	lr
 8009e10:	20000018 	.word	0x20000018

08009e14 <abort>:
 8009e14:	b508      	push	{r3, lr}
 8009e16:	2006      	movs	r0, #6
 8009e18:	f000 fa08 	bl	800a22c <raise>
 8009e1c:	2001      	movs	r0, #1
 8009e1e:	f7f7 fde5 	bl	80019ec <_exit>

08009e22 <_malloc_usable_size_r>:
 8009e22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e26:	1f18      	subs	r0, r3, #4
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	bfbc      	itt	lt
 8009e2c:	580b      	ldrlt	r3, [r1, r0]
 8009e2e:	18c0      	addlt	r0, r0, r3
 8009e30:	4770      	bx	lr

08009e32 <__sfputc_r>:
 8009e32:	6893      	ldr	r3, [r2, #8]
 8009e34:	3b01      	subs	r3, #1
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	b410      	push	{r4}
 8009e3a:	6093      	str	r3, [r2, #8]
 8009e3c:	da08      	bge.n	8009e50 <__sfputc_r+0x1e>
 8009e3e:	6994      	ldr	r4, [r2, #24]
 8009e40:	42a3      	cmp	r3, r4
 8009e42:	db01      	blt.n	8009e48 <__sfputc_r+0x16>
 8009e44:	290a      	cmp	r1, #10
 8009e46:	d103      	bne.n	8009e50 <__sfputc_r+0x1e>
 8009e48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e4c:	f000 b932 	b.w	800a0b4 <__swbuf_r>
 8009e50:	6813      	ldr	r3, [r2, #0]
 8009e52:	1c58      	adds	r0, r3, #1
 8009e54:	6010      	str	r0, [r2, #0]
 8009e56:	7019      	strb	r1, [r3, #0]
 8009e58:	4608      	mov	r0, r1
 8009e5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e5e:	4770      	bx	lr

08009e60 <__sfputs_r>:
 8009e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e62:	4606      	mov	r6, r0
 8009e64:	460f      	mov	r7, r1
 8009e66:	4614      	mov	r4, r2
 8009e68:	18d5      	adds	r5, r2, r3
 8009e6a:	42ac      	cmp	r4, r5
 8009e6c:	d101      	bne.n	8009e72 <__sfputs_r+0x12>
 8009e6e:	2000      	movs	r0, #0
 8009e70:	e007      	b.n	8009e82 <__sfputs_r+0x22>
 8009e72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e76:	463a      	mov	r2, r7
 8009e78:	4630      	mov	r0, r6
 8009e7a:	f7ff ffda 	bl	8009e32 <__sfputc_r>
 8009e7e:	1c43      	adds	r3, r0, #1
 8009e80:	d1f3      	bne.n	8009e6a <__sfputs_r+0xa>
 8009e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009e84 <_vfiprintf_r>:
 8009e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e88:	460d      	mov	r5, r1
 8009e8a:	b09d      	sub	sp, #116	@ 0x74
 8009e8c:	4614      	mov	r4, r2
 8009e8e:	4698      	mov	r8, r3
 8009e90:	4606      	mov	r6, r0
 8009e92:	b118      	cbz	r0, 8009e9c <_vfiprintf_r+0x18>
 8009e94:	6a03      	ldr	r3, [r0, #32]
 8009e96:	b90b      	cbnz	r3, 8009e9c <_vfiprintf_r+0x18>
 8009e98:	f7fc fdfa 	bl	8006a90 <__sinit>
 8009e9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e9e:	07d9      	lsls	r1, r3, #31
 8009ea0:	d405      	bmi.n	8009eae <_vfiprintf_r+0x2a>
 8009ea2:	89ab      	ldrh	r3, [r5, #12]
 8009ea4:	059a      	lsls	r2, r3, #22
 8009ea6:	d402      	bmi.n	8009eae <_vfiprintf_r+0x2a>
 8009ea8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009eaa:	f7fc ff08 	bl	8006cbe <__retarget_lock_acquire_recursive>
 8009eae:	89ab      	ldrh	r3, [r5, #12]
 8009eb0:	071b      	lsls	r3, r3, #28
 8009eb2:	d501      	bpl.n	8009eb8 <_vfiprintf_r+0x34>
 8009eb4:	692b      	ldr	r3, [r5, #16]
 8009eb6:	b99b      	cbnz	r3, 8009ee0 <_vfiprintf_r+0x5c>
 8009eb8:	4629      	mov	r1, r5
 8009eba:	4630      	mov	r0, r6
 8009ebc:	f000 f938 	bl	800a130 <__swsetup_r>
 8009ec0:	b170      	cbz	r0, 8009ee0 <_vfiprintf_r+0x5c>
 8009ec2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ec4:	07dc      	lsls	r4, r3, #31
 8009ec6:	d504      	bpl.n	8009ed2 <_vfiprintf_r+0x4e>
 8009ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ecc:	b01d      	add	sp, #116	@ 0x74
 8009ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ed2:	89ab      	ldrh	r3, [r5, #12]
 8009ed4:	0598      	lsls	r0, r3, #22
 8009ed6:	d4f7      	bmi.n	8009ec8 <_vfiprintf_r+0x44>
 8009ed8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009eda:	f7fc fef1 	bl	8006cc0 <__retarget_lock_release_recursive>
 8009ede:	e7f3      	b.n	8009ec8 <_vfiprintf_r+0x44>
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ee4:	2320      	movs	r3, #32
 8009ee6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009eea:	f8cd 800c 	str.w	r8, [sp, #12]
 8009eee:	2330      	movs	r3, #48	@ 0x30
 8009ef0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a0a0 <_vfiprintf_r+0x21c>
 8009ef4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009ef8:	f04f 0901 	mov.w	r9, #1
 8009efc:	4623      	mov	r3, r4
 8009efe:	469a      	mov	sl, r3
 8009f00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f04:	b10a      	cbz	r2, 8009f0a <_vfiprintf_r+0x86>
 8009f06:	2a25      	cmp	r2, #37	@ 0x25
 8009f08:	d1f9      	bne.n	8009efe <_vfiprintf_r+0x7a>
 8009f0a:	ebba 0b04 	subs.w	fp, sl, r4
 8009f0e:	d00b      	beq.n	8009f28 <_vfiprintf_r+0xa4>
 8009f10:	465b      	mov	r3, fp
 8009f12:	4622      	mov	r2, r4
 8009f14:	4629      	mov	r1, r5
 8009f16:	4630      	mov	r0, r6
 8009f18:	f7ff ffa2 	bl	8009e60 <__sfputs_r>
 8009f1c:	3001      	adds	r0, #1
 8009f1e:	f000 80a7 	beq.w	800a070 <_vfiprintf_r+0x1ec>
 8009f22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f24:	445a      	add	r2, fp
 8009f26:	9209      	str	r2, [sp, #36]	@ 0x24
 8009f28:	f89a 3000 	ldrb.w	r3, [sl]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	f000 809f 	beq.w	800a070 <_vfiprintf_r+0x1ec>
 8009f32:	2300      	movs	r3, #0
 8009f34:	f04f 32ff 	mov.w	r2, #4294967295
 8009f38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f3c:	f10a 0a01 	add.w	sl, sl, #1
 8009f40:	9304      	str	r3, [sp, #16]
 8009f42:	9307      	str	r3, [sp, #28]
 8009f44:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009f48:	931a      	str	r3, [sp, #104]	@ 0x68
 8009f4a:	4654      	mov	r4, sl
 8009f4c:	2205      	movs	r2, #5
 8009f4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f52:	4853      	ldr	r0, [pc, #332]	@ (800a0a0 <_vfiprintf_r+0x21c>)
 8009f54:	f7f6 f94c 	bl	80001f0 <memchr>
 8009f58:	9a04      	ldr	r2, [sp, #16]
 8009f5a:	b9d8      	cbnz	r0, 8009f94 <_vfiprintf_r+0x110>
 8009f5c:	06d1      	lsls	r1, r2, #27
 8009f5e:	bf44      	itt	mi
 8009f60:	2320      	movmi	r3, #32
 8009f62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f66:	0713      	lsls	r3, r2, #28
 8009f68:	bf44      	itt	mi
 8009f6a:	232b      	movmi	r3, #43	@ 0x2b
 8009f6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f70:	f89a 3000 	ldrb.w	r3, [sl]
 8009f74:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f76:	d015      	beq.n	8009fa4 <_vfiprintf_r+0x120>
 8009f78:	9a07      	ldr	r2, [sp, #28]
 8009f7a:	4654      	mov	r4, sl
 8009f7c:	2000      	movs	r0, #0
 8009f7e:	f04f 0c0a 	mov.w	ip, #10
 8009f82:	4621      	mov	r1, r4
 8009f84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f88:	3b30      	subs	r3, #48	@ 0x30
 8009f8a:	2b09      	cmp	r3, #9
 8009f8c:	d94b      	bls.n	800a026 <_vfiprintf_r+0x1a2>
 8009f8e:	b1b0      	cbz	r0, 8009fbe <_vfiprintf_r+0x13a>
 8009f90:	9207      	str	r2, [sp, #28]
 8009f92:	e014      	b.n	8009fbe <_vfiprintf_r+0x13a>
 8009f94:	eba0 0308 	sub.w	r3, r0, r8
 8009f98:	fa09 f303 	lsl.w	r3, r9, r3
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	9304      	str	r3, [sp, #16]
 8009fa0:	46a2      	mov	sl, r4
 8009fa2:	e7d2      	b.n	8009f4a <_vfiprintf_r+0xc6>
 8009fa4:	9b03      	ldr	r3, [sp, #12]
 8009fa6:	1d19      	adds	r1, r3, #4
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	9103      	str	r1, [sp, #12]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	bfbb      	ittet	lt
 8009fb0:	425b      	neglt	r3, r3
 8009fb2:	f042 0202 	orrlt.w	r2, r2, #2
 8009fb6:	9307      	strge	r3, [sp, #28]
 8009fb8:	9307      	strlt	r3, [sp, #28]
 8009fba:	bfb8      	it	lt
 8009fbc:	9204      	strlt	r2, [sp, #16]
 8009fbe:	7823      	ldrb	r3, [r4, #0]
 8009fc0:	2b2e      	cmp	r3, #46	@ 0x2e
 8009fc2:	d10a      	bne.n	8009fda <_vfiprintf_r+0x156>
 8009fc4:	7863      	ldrb	r3, [r4, #1]
 8009fc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8009fc8:	d132      	bne.n	800a030 <_vfiprintf_r+0x1ac>
 8009fca:	9b03      	ldr	r3, [sp, #12]
 8009fcc:	1d1a      	adds	r2, r3, #4
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	9203      	str	r2, [sp, #12]
 8009fd2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009fd6:	3402      	adds	r4, #2
 8009fd8:	9305      	str	r3, [sp, #20]
 8009fda:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a0b0 <_vfiprintf_r+0x22c>
 8009fde:	7821      	ldrb	r1, [r4, #0]
 8009fe0:	2203      	movs	r2, #3
 8009fe2:	4650      	mov	r0, sl
 8009fe4:	f7f6 f904 	bl	80001f0 <memchr>
 8009fe8:	b138      	cbz	r0, 8009ffa <_vfiprintf_r+0x176>
 8009fea:	9b04      	ldr	r3, [sp, #16]
 8009fec:	eba0 000a 	sub.w	r0, r0, sl
 8009ff0:	2240      	movs	r2, #64	@ 0x40
 8009ff2:	4082      	lsls	r2, r0
 8009ff4:	4313      	orrs	r3, r2
 8009ff6:	3401      	adds	r4, #1
 8009ff8:	9304      	str	r3, [sp, #16]
 8009ffa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ffe:	4829      	ldr	r0, [pc, #164]	@ (800a0a4 <_vfiprintf_r+0x220>)
 800a000:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a004:	2206      	movs	r2, #6
 800a006:	f7f6 f8f3 	bl	80001f0 <memchr>
 800a00a:	2800      	cmp	r0, #0
 800a00c:	d03f      	beq.n	800a08e <_vfiprintf_r+0x20a>
 800a00e:	4b26      	ldr	r3, [pc, #152]	@ (800a0a8 <_vfiprintf_r+0x224>)
 800a010:	bb1b      	cbnz	r3, 800a05a <_vfiprintf_r+0x1d6>
 800a012:	9b03      	ldr	r3, [sp, #12]
 800a014:	3307      	adds	r3, #7
 800a016:	f023 0307 	bic.w	r3, r3, #7
 800a01a:	3308      	adds	r3, #8
 800a01c:	9303      	str	r3, [sp, #12]
 800a01e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a020:	443b      	add	r3, r7
 800a022:	9309      	str	r3, [sp, #36]	@ 0x24
 800a024:	e76a      	b.n	8009efc <_vfiprintf_r+0x78>
 800a026:	fb0c 3202 	mla	r2, ip, r2, r3
 800a02a:	460c      	mov	r4, r1
 800a02c:	2001      	movs	r0, #1
 800a02e:	e7a8      	b.n	8009f82 <_vfiprintf_r+0xfe>
 800a030:	2300      	movs	r3, #0
 800a032:	3401      	adds	r4, #1
 800a034:	9305      	str	r3, [sp, #20]
 800a036:	4619      	mov	r1, r3
 800a038:	f04f 0c0a 	mov.w	ip, #10
 800a03c:	4620      	mov	r0, r4
 800a03e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a042:	3a30      	subs	r2, #48	@ 0x30
 800a044:	2a09      	cmp	r2, #9
 800a046:	d903      	bls.n	800a050 <_vfiprintf_r+0x1cc>
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d0c6      	beq.n	8009fda <_vfiprintf_r+0x156>
 800a04c:	9105      	str	r1, [sp, #20]
 800a04e:	e7c4      	b.n	8009fda <_vfiprintf_r+0x156>
 800a050:	fb0c 2101 	mla	r1, ip, r1, r2
 800a054:	4604      	mov	r4, r0
 800a056:	2301      	movs	r3, #1
 800a058:	e7f0      	b.n	800a03c <_vfiprintf_r+0x1b8>
 800a05a:	ab03      	add	r3, sp, #12
 800a05c:	9300      	str	r3, [sp, #0]
 800a05e:	462a      	mov	r2, r5
 800a060:	4b12      	ldr	r3, [pc, #72]	@ (800a0ac <_vfiprintf_r+0x228>)
 800a062:	a904      	add	r1, sp, #16
 800a064:	4630      	mov	r0, r6
 800a066:	f7fb febb 	bl	8005de0 <_printf_float>
 800a06a:	4607      	mov	r7, r0
 800a06c:	1c78      	adds	r0, r7, #1
 800a06e:	d1d6      	bne.n	800a01e <_vfiprintf_r+0x19a>
 800a070:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a072:	07d9      	lsls	r1, r3, #31
 800a074:	d405      	bmi.n	800a082 <_vfiprintf_r+0x1fe>
 800a076:	89ab      	ldrh	r3, [r5, #12]
 800a078:	059a      	lsls	r2, r3, #22
 800a07a:	d402      	bmi.n	800a082 <_vfiprintf_r+0x1fe>
 800a07c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a07e:	f7fc fe1f 	bl	8006cc0 <__retarget_lock_release_recursive>
 800a082:	89ab      	ldrh	r3, [r5, #12]
 800a084:	065b      	lsls	r3, r3, #25
 800a086:	f53f af1f 	bmi.w	8009ec8 <_vfiprintf_r+0x44>
 800a08a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a08c:	e71e      	b.n	8009ecc <_vfiprintf_r+0x48>
 800a08e:	ab03      	add	r3, sp, #12
 800a090:	9300      	str	r3, [sp, #0]
 800a092:	462a      	mov	r2, r5
 800a094:	4b05      	ldr	r3, [pc, #20]	@ (800a0ac <_vfiprintf_r+0x228>)
 800a096:	a904      	add	r1, sp, #16
 800a098:	4630      	mov	r0, r6
 800a09a:	f7fc f939 	bl	8006310 <_printf_i>
 800a09e:	e7e4      	b.n	800a06a <_vfiprintf_r+0x1e6>
 800a0a0:	0800a7d1 	.word	0x0800a7d1
 800a0a4:	0800a7db 	.word	0x0800a7db
 800a0a8:	08005de1 	.word	0x08005de1
 800a0ac:	08009e61 	.word	0x08009e61
 800a0b0:	0800a7d7 	.word	0x0800a7d7

0800a0b4 <__swbuf_r>:
 800a0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0b6:	460e      	mov	r6, r1
 800a0b8:	4614      	mov	r4, r2
 800a0ba:	4605      	mov	r5, r0
 800a0bc:	b118      	cbz	r0, 800a0c6 <__swbuf_r+0x12>
 800a0be:	6a03      	ldr	r3, [r0, #32]
 800a0c0:	b90b      	cbnz	r3, 800a0c6 <__swbuf_r+0x12>
 800a0c2:	f7fc fce5 	bl	8006a90 <__sinit>
 800a0c6:	69a3      	ldr	r3, [r4, #24]
 800a0c8:	60a3      	str	r3, [r4, #8]
 800a0ca:	89a3      	ldrh	r3, [r4, #12]
 800a0cc:	071a      	lsls	r2, r3, #28
 800a0ce:	d501      	bpl.n	800a0d4 <__swbuf_r+0x20>
 800a0d0:	6923      	ldr	r3, [r4, #16]
 800a0d2:	b943      	cbnz	r3, 800a0e6 <__swbuf_r+0x32>
 800a0d4:	4621      	mov	r1, r4
 800a0d6:	4628      	mov	r0, r5
 800a0d8:	f000 f82a 	bl	800a130 <__swsetup_r>
 800a0dc:	b118      	cbz	r0, 800a0e6 <__swbuf_r+0x32>
 800a0de:	f04f 37ff 	mov.w	r7, #4294967295
 800a0e2:	4638      	mov	r0, r7
 800a0e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0e6:	6823      	ldr	r3, [r4, #0]
 800a0e8:	6922      	ldr	r2, [r4, #16]
 800a0ea:	1a98      	subs	r0, r3, r2
 800a0ec:	6963      	ldr	r3, [r4, #20]
 800a0ee:	b2f6      	uxtb	r6, r6
 800a0f0:	4283      	cmp	r3, r0
 800a0f2:	4637      	mov	r7, r6
 800a0f4:	dc05      	bgt.n	800a102 <__swbuf_r+0x4e>
 800a0f6:	4621      	mov	r1, r4
 800a0f8:	4628      	mov	r0, r5
 800a0fa:	f7ff fa47 	bl	800958c <_fflush_r>
 800a0fe:	2800      	cmp	r0, #0
 800a100:	d1ed      	bne.n	800a0de <__swbuf_r+0x2a>
 800a102:	68a3      	ldr	r3, [r4, #8]
 800a104:	3b01      	subs	r3, #1
 800a106:	60a3      	str	r3, [r4, #8]
 800a108:	6823      	ldr	r3, [r4, #0]
 800a10a:	1c5a      	adds	r2, r3, #1
 800a10c:	6022      	str	r2, [r4, #0]
 800a10e:	701e      	strb	r6, [r3, #0]
 800a110:	6962      	ldr	r2, [r4, #20]
 800a112:	1c43      	adds	r3, r0, #1
 800a114:	429a      	cmp	r2, r3
 800a116:	d004      	beq.n	800a122 <__swbuf_r+0x6e>
 800a118:	89a3      	ldrh	r3, [r4, #12]
 800a11a:	07db      	lsls	r3, r3, #31
 800a11c:	d5e1      	bpl.n	800a0e2 <__swbuf_r+0x2e>
 800a11e:	2e0a      	cmp	r6, #10
 800a120:	d1df      	bne.n	800a0e2 <__swbuf_r+0x2e>
 800a122:	4621      	mov	r1, r4
 800a124:	4628      	mov	r0, r5
 800a126:	f7ff fa31 	bl	800958c <_fflush_r>
 800a12a:	2800      	cmp	r0, #0
 800a12c:	d0d9      	beq.n	800a0e2 <__swbuf_r+0x2e>
 800a12e:	e7d6      	b.n	800a0de <__swbuf_r+0x2a>

0800a130 <__swsetup_r>:
 800a130:	b538      	push	{r3, r4, r5, lr}
 800a132:	4b29      	ldr	r3, [pc, #164]	@ (800a1d8 <__swsetup_r+0xa8>)
 800a134:	4605      	mov	r5, r0
 800a136:	6818      	ldr	r0, [r3, #0]
 800a138:	460c      	mov	r4, r1
 800a13a:	b118      	cbz	r0, 800a144 <__swsetup_r+0x14>
 800a13c:	6a03      	ldr	r3, [r0, #32]
 800a13e:	b90b      	cbnz	r3, 800a144 <__swsetup_r+0x14>
 800a140:	f7fc fca6 	bl	8006a90 <__sinit>
 800a144:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a148:	0719      	lsls	r1, r3, #28
 800a14a:	d422      	bmi.n	800a192 <__swsetup_r+0x62>
 800a14c:	06da      	lsls	r2, r3, #27
 800a14e:	d407      	bmi.n	800a160 <__swsetup_r+0x30>
 800a150:	2209      	movs	r2, #9
 800a152:	602a      	str	r2, [r5, #0]
 800a154:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a158:	81a3      	strh	r3, [r4, #12]
 800a15a:	f04f 30ff 	mov.w	r0, #4294967295
 800a15e:	e033      	b.n	800a1c8 <__swsetup_r+0x98>
 800a160:	0758      	lsls	r0, r3, #29
 800a162:	d512      	bpl.n	800a18a <__swsetup_r+0x5a>
 800a164:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a166:	b141      	cbz	r1, 800a17a <__swsetup_r+0x4a>
 800a168:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a16c:	4299      	cmp	r1, r3
 800a16e:	d002      	beq.n	800a176 <__swsetup_r+0x46>
 800a170:	4628      	mov	r0, r5
 800a172:	f7fd fbf9 	bl	8007968 <_free_r>
 800a176:	2300      	movs	r3, #0
 800a178:	6363      	str	r3, [r4, #52]	@ 0x34
 800a17a:	89a3      	ldrh	r3, [r4, #12]
 800a17c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a180:	81a3      	strh	r3, [r4, #12]
 800a182:	2300      	movs	r3, #0
 800a184:	6063      	str	r3, [r4, #4]
 800a186:	6923      	ldr	r3, [r4, #16]
 800a188:	6023      	str	r3, [r4, #0]
 800a18a:	89a3      	ldrh	r3, [r4, #12]
 800a18c:	f043 0308 	orr.w	r3, r3, #8
 800a190:	81a3      	strh	r3, [r4, #12]
 800a192:	6923      	ldr	r3, [r4, #16]
 800a194:	b94b      	cbnz	r3, 800a1aa <__swsetup_r+0x7a>
 800a196:	89a3      	ldrh	r3, [r4, #12]
 800a198:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a19c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1a0:	d003      	beq.n	800a1aa <__swsetup_r+0x7a>
 800a1a2:	4621      	mov	r1, r4
 800a1a4:	4628      	mov	r0, r5
 800a1a6:	f000 f883 	bl	800a2b0 <__smakebuf_r>
 800a1aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1ae:	f013 0201 	ands.w	r2, r3, #1
 800a1b2:	d00a      	beq.n	800a1ca <__swsetup_r+0x9a>
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	60a2      	str	r2, [r4, #8]
 800a1b8:	6962      	ldr	r2, [r4, #20]
 800a1ba:	4252      	negs	r2, r2
 800a1bc:	61a2      	str	r2, [r4, #24]
 800a1be:	6922      	ldr	r2, [r4, #16]
 800a1c0:	b942      	cbnz	r2, 800a1d4 <__swsetup_r+0xa4>
 800a1c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a1c6:	d1c5      	bne.n	800a154 <__swsetup_r+0x24>
 800a1c8:	bd38      	pop	{r3, r4, r5, pc}
 800a1ca:	0799      	lsls	r1, r3, #30
 800a1cc:	bf58      	it	pl
 800a1ce:	6962      	ldrpl	r2, [r4, #20]
 800a1d0:	60a2      	str	r2, [r4, #8]
 800a1d2:	e7f4      	b.n	800a1be <__swsetup_r+0x8e>
 800a1d4:	2000      	movs	r0, #0
 800a1d6:	e7f7      	b.n	800a1c8 <__swsetup_r+0x98>
 800a1d8:	20000018 	.word	0x20000018

0800a1dc <_raise_r>:
 800a1dc:	291f      	cmp	r1, #31
 800a1de:	b538      	push	{r3, r4, r5, lr}
 800a1e0:	4605      	mov	r5, r0
 800a1e2:	460c      	mov	r4, r1
 800a1e4:	d904      	bls.n	800a1f0 <_raise_r+0x14>
 800a1e6:	2316      	movs	r3, #22
 800a1e8:	6003      	str	r3, [r0, #0]
 800a1ea:	f04f 30ff 	mov.w	r0, #4294967295
 800a1ee:	bd38      	pop	{r3, r4, r5, pc}
 800a1f0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a1f2:	b112      	cbz	r2, 800a1fa <_raise_r+0x1e>
 800a1f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a1f8:	b94b      	cbnz	r3, 800a20e <_raise_r+0x32>
 800a1fa:	4628      	mov	r0, r5
 800a1fc:	f000 f830 	bl	800a260 <_getpid_r>
 800a200:	4622      	mov	r2, r4
 800a202:	4601      	mov	r1, r0
 800a204:	4628      	mov	r0, r5
 800a206:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a20a:	f000 b817 	b.w	800a23c <_kill_r>
 800a20e:	2b01      	cmp	r3, #1
 800a210:	d00a      	beq.n	800a228 <_raise_r+0x4c>
 800a212:	1c59      	adds	r1, r3, #1
 800a214:	d103      	bne.n	800a21e <_raise_r+0x42>
 800a216:	2316      	movs	r3, #22
 800a218:	6003      	str	r3, [r0, #0]
 800a21a:	2001      	movs	r0, #1
 800a21c:	e7e7      	b.n	800a1ee <_raise_r+0x12>
 800a21e:	2100      	movs	r1, #0
 800a220:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a224:	4620      	mov	r0, r4
 800a226:	4798      	blx	r3
 800a228:	2000      	movs	r0, #0
 800a22a:	e7e0      	b.n	800a1ee <_raise_r+0x12>

0800a22c <raise>:
 800a22c:	4b02      	ldr	r3, [pc, #8]	@ (800a238 <raise+0xc>)
 800a22e:	4601      	mov	r1, r0
 800a230:	6818      	ldr	r0, [r3, #0]
 800a232:	f7ff bfd3 	b.w	800a1dc <_raise_r>
 800a236:	bf00      	nop
 800a238:	20000018 	.word	0x20000018

0800a23c <_kill_r>:
 800a23c:	b538      	push	{r3, r4, r5, lr}
 800a23e:	4d07      	ldr	r5, [pc, #28]	@ (800a25c <_kill_r+0x20>)
 800a240:	2300      	movs	r3, #0
 800a242:	4604      	mov	r4, r0
 800a244:	4608      	mov	r0, r1
 800a246:	4611      	mov	r1, r2
 800a248:	602b      	str	r3, [r5, #0]
 800a24a:	f7f7 fbbf 	bl	80019cc <_kill>
 800a24e:	1c43      	adds	r3, r0, #1
 800a250:	d102      	bne.n	800a258 <_kill_r+0x1c>
 800a252:	682b      	ldr	r3, [r5, #0]
 800a254:	b103      	cbz	r3, 800a258 <_kill_r+0x1c>
 800a256:	6023      	str	r3, [r4, #0]
 800a258:	bd38      	pop	{r3, r4, r5, pc}
 800a25a:	bf00      	nop
 800a25c:	20001440 	.word	0x20001440

0800a260 <_getpid_r>:
 800a260:	f7f7 bbac 	b.w	80019bc <_getpid>

0800a264 <__swhatbuf_r>:
 800a264:	b570      	push	{r4, r5, r6, lr}
 800a266:	460c      	mov	r4, r1
 800a268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a26c:	2900      	cmp	r1, #0
 800a26e:	b096      	sub	sp, #88	@ 0x58
 800a270:	4615      	mov	r5, r2
 800a272:	461e      	mov	r6, r3
 800a274:	da0d      	bge.n	800a292 <__swhatbuf_r+0x2e>
 800a276:	89a3      	ldrh	r3, [r4, #12]
 800a278:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a27c:	f04f 0100 	mov.w	r1, #0
 800a280:	bf14      	ite	ne
 800a282:	2340      	movne	r3, #64	@ 0x40
 800a284:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a288:	2000      	movs	r0, #0
 800a28a:	6031      	str	r1, [r6, #0]
 800a28c:	602b      	str	r3, [r5, #0]
 800a28e:	b016      	add	sp, #88	@ 0x58
 800a290:	bd70      	pop	{r4, r5, r6, pc}
 800a292:	466a      	mov	r2, sp
 800a294:	f000 f848 	bl	800a328 <_fstat_r>
 800a298:	2800      	cmp	r0, #0
 800a29a:	dbec      	blt.n	800a276 <__swhatbuf_r+0x12>
 800a29c:	9901      	ldr	r1, [sp, #4]
 800a29e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a2a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a2a6:	4259      	negs	r1, r3
 800a2a8:	4159      	adcs	r1, r3
 800a2aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a2ae:	e7eb      	b.n	800a288 <__swhatbuf_r+0x24>

0800a2b0 <__smakebuf_r>:
 800a2b0:	898b      	ldrh	r3, [r1, #12]
 800a2b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a2b4:	079d      	lsls	r5, r3, #30
 800a2b6:	4606      	mov	r6, r0
 800a2b8:	460c      	mov	r4, r1
 800a2ba:	d507      	bpl.n	800a2cc <__smakebuf_r+0x1c>
 800a2bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a2c0:	6023      	str	r3, [r4, #0]
 800a2c2:	6123      	str	r3, [r4, #16]
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	6163      	str	r3, [r4, #20]
 800a2c8:	b003      	add	sp, #12
 800a2ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2cc:	ab01      	add	r3, sp, #4
 800a2ce:	466a      	mov	r2, sp
 800a2d0:	f7ff ffc8 	bl	800a264 <__swhatbuf_r>
 800a2d4:	9f00      	ldr	r7, [sp, #0]
 800a2d6:	4605      	mov	r5, r0
 800a2d8:	4639      	mov	r1, r7
 800a2da:	4630      	mov	r0, r6
 800a2dc:	f7fd fbb8 	bl	8007a50 <_malloc_r>
 800a2e0:	b948      	cbnz	r0, 800a2f6 <__smakebuf_r+0x46>
 800a2e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2e6:	059a      	lsls	r2, r3, #22
 800a2e8:	d4ee      	bmi.n	800a2c8 <__smakebuf_r+0x18>
 800a2ea:	f023 0303 	bic.w	r3, r3, #3
 800a2ee:	f043 0302 	orr.w	r3, r3, #2
 800a2f2:	81a3      	strh	r3, [r4, #12]
 800a2f4:	e7e2      	b.n	800a2bc <__smakebuf_r+0xc>
 800a2f6:	89a3      	ldrh	r3, [r4, #12]
 800a2f8:	6020      	str	r0, [r4, #0]
 800a2fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2fe:	81a3      	strh	r3, [r4, #12]
 800a300:	9b01      	ldr	r3, [sp, #4]
 800a302:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a306:	b15b      	cbz	r3, 800a320 <__smakebuf_r+0x70>
 800a308:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a30c:	4630      	mov	r0, r6
 800a30e:	f000 f81d 	bl	800a34c <_isatty_r>
 800a312:	b128      	cbz	r0, 800a320 <__smakebuf_r+0x70>
 800a314:	89a3      	ldrh	r3, [r4, #12]
 800a316:	f023 0303 	bic.w	r3, r3, #3
 800a31a:	f043 0301 	orr.w	r3, r3, #1
 800a31e:	81a3      	strh	r3, [r4, #12]
 800a320:	89a3      	ldrh	r3, [r4, #12]
 800a322:	431d      	orrs	r5, r3
 800a324:	81a5      	strh	r5, [r4, #12]
 800a326:	e7cf      	b.n	800a2c8 <__smakebuf_r+0x18>

0800a328 <_fstat_r>:
 800a328:	b538      	push	{r3, r4, r5, lr}
 800a32a:	4d07      	ldr	r5, [pc, #28]	@ (800a348 <_fstat_r+0x20>)
 800a32c:	2300      	movs	r3, #0
 800a32e:	4604      	mov	r4, r0
 800a330:	4608      	mov	r0, r1
 800a332:	4611      	mov	r1, r2
 800a334:	602b      	str	r3, [r5, #0]
 800a336:	f7f7 fba9 	bl	8001a8c <_fstat>
 800a33a:	1c43      	adds	r3, r0, #1
 800a33c:	d102      	bne.n	800a344 <_fstat_r+0x1c>
 800a33e:	682b      	ldr	r3, [r5, #0]
 800a340:	b103      	cbz	r3, 800a344 <_fstat_r+0x1c>
 800a342:	6023      	str	r3, [r4, #0]
 800a344:	bd38      	pop	{r3, r4, r5, pc}
 800a346:	bf00      	nop
 800a348:	20001440 	.word	0x20001440

0800a34c <_isatty_r>:
 800a34c:	b538      	push	{r3, r4, r5, lr}
 800a34e:	4d06      	ldr	r5, [pc, #24]	@ (800a368 <_isatty_r+0x1c>)
 800a350:	2300      	movs	r3, #0
 800a352:	4604      	mov	r4, r0
 800a354:	4608      	mov	r0, r1
 800a356:	602b      	str	r3, [r5, #0]
 800a358:	f7f7 fba8 	bl	8001aac <_isatty>
 800a35c:	1c43      	adds	r3, r0, #1
 800a35e:	d102      	bne.n	800a366 <_isatty_r+0x1a>
 800a360:	682b      	ldr	r3, [r5, #0]
 800a362:	b103      	cbz	r3, 800a366 <_isatty_r+0x1a>
 800a364:	6023      	str	r3, [r4, #0]
 800a366:	bd38      	pop	{r3, r4, r5, pc}
 800a368:	20001440 	.word	0x20001440

0800a36c <_init>:
 800a36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a36e:	bf00      	nop
 800a370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a372:	bc08      	pop	{r3}
 800a374:	469e      	mov	lr, r3
 800a376:	4770      	bx	lr

0800a378 <_fini>:
 800a378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a37a:	bf00      	nop
 800a37c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a37e:	bc08      	pop	{r3}
 800a380:	469e      	mov	lr, r3
 800a382:	4770      	bx	lr
